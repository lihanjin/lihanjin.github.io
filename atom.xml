<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_sUper.LEE的个人空间</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-22T11:04:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_sUper.LEE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现数据的双向绑定mvvm-剖析Vue的原理</title>
    <link href="http://yoursite.com/2018/02/25/vue-mvvm/"/>
    <id>http://yoursite.com/2018/02/25/vue-mvvm/</id>
    <published>2018-02-25T09:12:32.000Z</published>
    <updated>2018-03-22T11:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>完成的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        word: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/1.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="一、几种实现双向绑定的做法"><a href="#一、几种实现双向绑定的做法" class="headerlink" title="一、几种实现双向绑定的做法"></a>一、几种实现双向绑定的做法</h2><blockquote><p>目前几种主流的<code>mvc(vm)</code>框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（<code>input</code>、<code>textare</code>等）添加了<code>change(input)</code>事件，来动态修改<code>model</code>和 <code>view</code>，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p></blockquote><ul><li>发布者-订阅者模式（<code>backbone.js</code>）</li><li>脏值检查（<code>angular.js</code>） </li><li>数据劫持（<code>vue.js</code>） </li></ul><h3 id="1-1-发布者-订阅者模式"><a href="#1-1-发布者-订阅者模式" class="headerlink" title="1.1 发布者-订阅者模式"></a>1.1 发布者-订阅者模式</h3><ul><li>一般通过<code>sub</code>, <code>pub</code>的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">这里有篇文章讲的比较详细</a></li><li>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</li></ul><h3 id="1-2-脏值检查"><a href="#1-2-脏值检查" class="headerlink" title="1.2 脏值检查"></a>1.2 脏值检查</h3><blockquote><p><code>angular.js</code> 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p></blockquote><ul><li><code>DOM</code>事件，譬如用户输入文本，点击按钮等。( <code>ng-click</code> ) </li><li><code>XHR</code>响应事件 ( <code>$http</code> ) </li><li>浏览器<code>Location</code>变更事件 ( <code>$location</code> ) </li><li><code>Timer</code>事件( <code>$timeout</code> , <code>$interval</code> ) </li><li>执行 <code>$digest()</code> 或 <code>$apply()</code></li></ul><h3 id="1-3-数据劫持"><a href="#1-3-数据劫持" class="headerlink" title="1.3 数据劫持"></a>1.3 数据劫持</h3><ul><li><code>vue.js</code>则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><blockquote><p>已经了解到<code>vue</code>是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉<code>defineProperty</code>，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这里</a></p></blockquote><p><strong>要实现mvvm的双向绑定，就必须要实现以下几点</strong></p><ul><li>实现一个数据监听器<code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器<code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接<code>Observer</code>和<code>Compile</code>的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li><code>mvvm</code>入口函数，整合以上三者</li></ul><p>上述流程如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-1-实现Observer"><a href="#2-1-实现Observer" class="headerlink" title="2.1 实现Observer"></a>2.1 实现Observer</h3><ul><li>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动</li><li>那么将需要<code>observe</code>的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code></li><li>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。相关代码可以是这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key]);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/observer.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/observer.js</a></li></ul><blockquote><p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发<code>notify</code>，再调用订阅者的<code>update</code>方法，代码改善之后是这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>那么问题来了，谁是订阅者，怎么往订阅器添加订阅者？</li><li>没错，上面的思路整理中我们已经明确订阅者应该是<code>Watcher</code>, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在<code>getter</code>里面动手脚：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">Dep.target = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.value = data[key];<span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里已经实现了一个<code>Observer</code>了，已经具备了监听数据和数据变化通知订阅者的功能。那么接下来就是实现<code>Compile</code>了</li></ul><h3 id="2-2-实现Compile"><a href="#2-2-实现Compile" class="headerlink" title="2.2 实现Compile"></a>2.2 实现<code>Compile</code></h3><ul><li><code>compile</code>主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图</li><li>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>因为遍历解析的过程有多次操作<code>dom</code>节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作</li><li>解析完成，再将<code>fragment</code>添加回原来的真实<code>dom</code>节点中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</span><br><span class="line">    node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</span><br><span class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>compileElement</code>方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;<span class="comment">// 表达式文本</span></span><br><span class="line">            <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                me.compile(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历编译子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 规定：指令以 v-xxx 命名</span></span><br><span class="line">            <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></span><br><span class="line">            <span class="keyword">var</span> attrName = attr.name;<span class="comment">// v-text</span></span><br><span class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">                <span class="keyword">var</span> exp = attr.value; <span class="comment">// content</span></span><br><span class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">// text</span></span><br><span class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">                <span class="comment">// 事件指令, 如 v-on:click</span></span><br><span class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 普通指令</span></span><br><span class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>];</span><br><span class="line">        <span class="comment">// 第一次初始化视图</span></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, vm[exp]);</span><br><span class="line">        <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">    textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/compile.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/compile.js</a></p></blockquote><ul><li>这里通过递归遍历保证了每个节点及子节点都会解析编译到</li><li>指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot;</code>中<code>v-text</code>便是指令</li><li>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知</li><li>至此，一个简单的<code>Compile</code>就完成了。接下来要看看<code>Watcher</code>这个订阅者的具体实现了</li></ul><h3 id="2-3-实现Watcher"><a href="#2-3-实现Watcher" class="headerlink" title="2.3 实现Watcher"></a>2.3 实现Watcher</h3><blockquote><p><code>Watcher</code>订阅者作为<code>Observer</code>和<code>Compile</code>之间通信的桥梁，主要做的事情是</p></blockquote><ul><li>在自身实例化时往属性订阅器<code>dep</code>里面添加自己</li><li>自身必须有一个<code>update()</code>方法</li><li>待属性变动<code>dep.notice()</code>通知时，能调用自身的<code>update()</code>方法，并触发<code>Compile</code>中绑定的回调，则功成身退。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get(); </span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();<span class="comment">// 属性值变化收到通知</span></span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></span><br><span class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;<span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp];<span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>;<span class="comment">// 添加完毕，重置</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/watcher.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/watcher.js</a></p></blockquote><ul><li>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前<code>watcher</code>实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前<code>watcher</code>实例，从而在属性值有变化的时候，<code>watcherInstance</code>就能收到更新通知。</li><li>基本上<code>vue</code>中数据绑定相关比较核心的几个模块也是这几个，猛戳<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">这里</a> , 在<code>src</code> 目录可找到<code>vue</code>源码。</li></ul><blockquote><p>最后来讲讲<code>MVVM</code>入口文件的相关逻辑和实现吧，相对就比较简单了</p></blockquote><h2 id="三、实现MVVM"><a href="#三、实现MVVM" class="headerlink" title="三、实现MVVM"></a>三、实现MVVM</h2><blockquote><p><code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>、<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>数据变化，通过<code>Compile</code>来解析编译模板指令，最终利用<code>Watcher</code>搭起<code>Observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(<code>input</code>) -&gt; 数据<code>model</code>变更的双向绑定效果。</p></blockquote><ul><li>一个简单的<code>MVVM</code>构造器是这样子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这里有个问题，从代码中可看出监听的数据对象是<code>options.data</code>，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。</li><li>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></li><li>所以这里需要给<code>MVVM</code>实例添加一个属性代理的方法，使访问<code>vm</code>的属性代理为访问<code>vm._data</code>的属性，改造后的代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">_proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> me._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                me._data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/mvvm.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/mvvm.js</a></p><ul><li>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了<code>vm</code>实例对象的属性的读写权，使读写<code>vm</code>实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;完成的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="Front-End" scheme="http://yoursite.com/categories/Front-End/"/>
    
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>eslint 常用配置</title>
    <link href="http://yoursite.com/2018/01/27/eslint/"/>
    <id>http://yoursite.com/2018/01/27/eslint/</id>
    <published>2018-01-27T14:41:24.000Z</published>
    <updated>2018-03-29T15:13:49.728Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// no-var</span></span><br><span class="line">    <span class="string">'no-var'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 要求或禁止 var 声明中的初始化</span></span><br><span class="line">    <span class="string">'init-declarations'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">'quotes'</span>: [<span class="string">'error'</span>, <span class="string">'single'</span>],</span><br><span class="line">    <span class="comment">// 要求或禁止使用分号而不是 ASI</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">    <span class="string">'no-extra-semi'</span>: <span class="string">'error'</span>,</span><br><span class="line">    <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="string">'error'</span>, <span class="string">'unix'</span>],</span><br><span class="line">    <span class="comment">// 空格2个</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>, &#123;<span class="string">'SwitchCase'</span>: <span class="number">1</span>&#125;],</span><br><span class="line">    <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">    <span class="string">'array-bracket-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示</span></span><br><span class="line">    <span class="string">'block-scoped-var'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">    <span class="string">'brace-style'</span>: [<span class="number">2</span>, <span class="string">'1tbs'</span>, &#123;<span class="string">'allowSingleLine'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">    <span class="string">'camelcase'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号， </span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123;<span class="string">'before'</span>: <span class="literal">false</span>, <span class="string">'after'</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    <span class="comment">// 控制逗号在行尾出现还是在行首出现</span></span><br><span class="line">    <span class="string">'comma-style'</span>: [<span class="number">2</span>, <span class="string">'last'</span>],</span><br><span class="line">    <span class="comment">// 圈复杂度</span></span><br><span class="line">    <span class="string">'complexity'</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">    <span class="string">'computed-property-spacing'</span>: [<span class="number">2</span>, <span class="string">'never'</span>],</span><br><span class="line">    <span class="comment">// TODO 关闭 强制方法必须返回值，TypeScript强类型，不配置</span></span><br><span class="line">    <span class="comment">// 'consistent-return': 0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>更多配置规则说明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></span><br><span class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></span><br><span class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></span><br><span class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></span><br><span class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="规范" scheme="http://yoursite.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="eslint" scheme="http://yoursite.com/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>RXJS</title>
    <link href="http://yoursite.com/2018/01/13/RX.js/"/>
    <id>http://yoursite.com/2018/01/13/RX.js/</id>
    <published>2018-01-13T13:23:08.000Z</published>
    <updated>2018-03-29T15:07:24.407Z</updated>
    
    <content type="html"><![CDATA[<p>##RX.js</p><blockquote></blockquote><p>##一、函数式编程-通用函数式</p><p>1.<code>ForEach</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;111&apos;,&apos;222&apos;];</span><br><span class="line">arr.forEacj(item =&gt; console.log(item));</span><br></pre></td></tr></table></figure></p><p>2.<code>map</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.map = function(callback) &#123;</span><br><span class="line">    var result;</span><br><span class="line">    this.forEach((element,index) =&gt; &#123;</span><br><span class="line">        result.push(callback(element,index))</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<code>filter</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.filter = function(callback) &#123;</span><br><span class="line">    var result = [];</span><br><span class="line">    this.forEach((ele,index) =&gt; &#123;</span><br><span class="line">        if(callback(ele)&#123;</span><br><span class="line">            result.push(ele)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.<code>concatAll</code></p><blockquote><p>合并二维数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.concatAll = function() &#123;</span><br><span class="line">    var result = [];</span><br><span class="line">    this.forEach((array) =&gt; &#123;</span><br><span class="line">        result.push.apply(result,array);</span><br><span class="line">        //result.push(...array)   es6写法</span><br><span class="line">        //result.push.call(result,...array)</span><br><span class="line">    &#125;);</span><br><span class="line">    return result;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>##二、Observable的基本建立</p><blockquote><p><code>create</code>  <code>of</code>  <code>from</code> <code>fromEvent</code> <code>fromPromise</code> <code>never</code> <code>empty</code> <code>throw</code> <code>interval</code> <code>timer</code> 以上为<code>Observable</code>的实例方法<code>creation operator</code></p></blockquote><p>1.<code>create</code></p><blockquote><p><code>create</code>是<code>Observable</code>的基本建立方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var observable = Rx.Observable</span><br><span class="line">                .create((observer) =&gt; &#123;</span><br><span class="line">                    observer.next(&apos;111&apos;);</span><br><span class="line">                    observer.next(&apos;222);</span><br><span class="line">                    setTimeout(function () &#123;</span><br><span class="line">                        observer.next(&apos;333&apos;);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line">    console.log(&apos;start&apos;)</span><br><span class="line">    observable.subscribe(function (val) &#123;</span><br><span class="line">        console.log(val);</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(&apos;end&apos;)</span><br><span class="line">    //Observable 相当于推送事件可以同时推送同步和异步时间并且可以暂停</span><br><span class="line">    //上面代码会输出:</span><br><span class="line">    start</span><br><span class="line">    111</span><br><span class="line">    222</span><br><span class="line">    end</span><br><span class="line">    333</span><br><span class="line">    compelte</span><br></pre></td></tr></table></figure></p></blockquote><p>2.<code>of</code></p><blockquote><p>当同步传值时候可以直接使用of更方便简洁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var observable = Rx.Observable</span><br><span class="line">                    .of(&apos;111&apos;,&apos;222);</span><br><span class="line">    observable.subscribe(&#123;</span><br><span class="line">        value =&gt; console.log(vale);</span><br><span class="line">        error =&gt; console.log(error);</span><br><span class="line">        () =&gt; console.log(&apos;compelte)&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    //以上程序打印出：</span><br><span class="line">    111</span><br><span class="line">    222</span><br><span class="line">    compelte</span><br></pre></td></tr></table></figure></p></blockquote><p>3.<code>from</code></p><blockquote><p><code>from</code> 和<code>of</code>差不多<code>from</code>参数为数组,  <code>set</code>, <code>WeakSet</code>, <code>Iterator</code> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;];</span><br><span class="line">var source = Rx.Observable.from(arr);</span><br><span class="line"> observable.subscribe(&#123;</span><br><span class="line">        value =&gt; console.log(vale);</span><br><span class="line">        error =&gt; console.log(error);</span><br><span class="line">        () =&gt; console.log(&apos;compelte)&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    //以上程序打印出：</span><br><span class="line">    111</span><br><span class="line">    222</span><br><span class="line">    compelte</span><br><span class="line">    //**from也可以接受字符串，例如&quot;你好&quot;会打印出：&quot;你&quot;,&quot;好&quot;,&quot;compelte&quot;**</span><br><span class="line">    //也可以传入promise</span><br><span class="line">    var source = Rx.Observable</span><br><span class="line">  .from(new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(&apos;Hello RxJS!&apos;);</span><br><span class="line">    &#125;,3000)</span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">source.subscribe(&#123;</span><br><span class="line">    next: function(value) &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: function() &#123;</span><br><span class="line">    console.log(&apos;complete!&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Hello RxJS!</span><br><span class="line">// complete!</span><br></pre></td></tr></table></figure><blockquote><p>如果<code>promise</code> 返回的是<code>resolve</code>则执行<code>next</code>，如果返回<code>reject</code>执行<code>error</code>，这里使用<code>formPromise</code>返回的结果也是一样的</p></blockquote><p>4.<code>fromEvent</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var source= Rx.observable.fromEvent(document.body,&apos;click&apos;);</span><br><span class="line">source.subscribe(&#123;</span><br><span class="line">    next: function(value) &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: function() &#123;</span><br><span class="line">    console.log(&apos;complete!&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//打印出mouseEvent()</span><br></pre></td></tr></table></figure></p><blockquote><p><code>fromEvent</code>传入的第一个参数为dom，第二个参数为需要监听事件的名称</p></blockquote><p><strong>补充：fromEventPattern</strong></p><p>要用<code>Event</code>来建立<code>Observable</code>实例还有另一个方法<code>fromEventPattern</code>，这个方法是给类事件使用。所谓的类事件就是指其行为跟事件相像，同时具有注册监听及移除监听两种行为，就像<code>DOM Event</code>有<code>addEventListener</code>及<code>removeEventListener</code>一样！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Producer &#123;</span><br><span class="line">constructor() &#123;</span><br><span class="line">this.listenList = [];</span><br><span class="line">&#125;</span><br><span class="line">addListener(listener) &#123;</span><br><span class="line">if(typeof listenner === &apos;function&apos;) &#123;</span><br><span class="line">this.listenList.push(listenner);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(&apos;listenner 必须是方法&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">removeListener(listener) &#123;</span><br><span class="line">this.listerList.splice(this.listerList.indexOf(listener),1)</span><br><span class="line">&#125;</span><br><span class="line">norify(message) &#123;</span><br><span class="line">this.listenList.forEach(listener=&gt; &#123;</span><br><span class="line">console.log(message)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">var egghead = new Producer();</span><br><span class="line">var souce = Rx.Observable.formEventPattern(&#123;</span><br><span class="line">(handle) =&gt; egghead.addListener(handle);</span><br><span class="line">(handle) =&gt; eegghead.removeListenner(handle);</span><br><span class="line">&#125;);</span><br><span class="line">source.subscribe(&#123;</span><br><span class="line">    next: function(value) &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: function() &#123;</span><br><span class="line">    console.log(&apos;complete!&apos;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: function(error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">egghandle.notify(&apos;can i listener u&apos;)</span><br><span class="line">//can i listener u</span><br></pre></td></tr></table></figure></p><blockquote><p>这里要注意不要直接将方法传入，避免<code>this</code>出错！也可以用<code>bind</code>来写。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rx.Observable</span><br><span class="line">    .fromEventPattern(</span><br><span class="line">        egghead.addListener.bind(egghead), </span><br><span class="line">        egghead.removeListener.bind(egghead)</span><br><span class="line">    )</span><br><span class="line">    .subscribe(console.log)</span><br></pre></td></tr></table></figure><p>5.<code>empty</code></p><blockquote><p>Observable可以订阅一个空的事件，不会返回任何东西会立即返回complete</p></blockquote><p>6.<code>never</code></p><blockquote><p>Observable也可以订阅一个无穷的事件，不会返回任何东西但是会一直存在不会complete</p></blockquote><p>7.<code>thorw</code></p><blockquote><p>此方法只会抛出错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.thorw(&quot;thow&quot;);</span><br><span class="line">source.subscribe(&#123;</span><br><span class="line">next: function(value) &#123;</span><br><span class="line">console.log(value)</span><br><span class="line">&#125;,</span><br><span class="line">complete: function() &#123;</span><br><span class="line">console.log(&apos;complete!&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">error: function(error) &#123;</span><br><span class="line">    console.log(&apos;Throw Error: &apos; + error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// Throw Error: thow!</span><br></pre></td></tr></table></figure></p></blockquote><p>8.<code>interval</code></p><blockquote><p>interval必须有一个number数值，代表发出的时间间隔</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">source.subscribe(&#123;</span><br><span class="line">next: function(value) &#123;</span><br><span class="line">console.log(value)</span><br><span class="line">&#125;,</span><br><span class="line">complete: function() &#123;</span><br><span class="line">console.log(&apos;complete!&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">error: function(error) &#123;</span><br><span class="line">    console.log(&apos;Throw Error: &apos; + error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br></pre></td></tr></table></figure><p>9.<code>timer</code><br>当timer有两个参数时，第一个参数代表要发出第一个值的等待时间(ms)，第二个参数代表第一次之后发送值的间隔时间，所以上面这段程式码会先等一秒送出1之后每五秒送出2, 3, 4, 5…。</p><p>timer 第一个参数除了可以是数值(Number)之外，也可以是日期(Date)，就会等到指定的时间在发送第一个值。</p><p>另外timer也可以只接收一个参数<br>10.<code>unsubscribe</code></p><blockquote><p>停止订阅</p></blockquote><p>###三、Observer观察者</p><blockquote><p><code>observer</code>分别拥有三个方法 <code>next</code>  <code>error</code>   <code>complete</code></p></blockquote><p>观察者的三个方法(method)：</p><ul><li><p><code>next</code>：每当<code>Observable</code> 发送出新的值，<code>next</code> 方法就会被呼叫。</p></li><li><p><code>complete</code>：在<code>Observable</code> 没有其他的资料可以取得时，<code>complete</code> 方法就会被呼叫，在<code>complete</code> 被呼叫之后，<code>next</code> 方法就不会再起作用。</p></li><li><p><code>error</code>：每当<code>Observable</code> 内发生错误时，<code>error</code> 方法就会被呼叫。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var observable = Rx.Observable</span><br><span class="line">                .create((observer) =&gt; &#123;</span><br><span class="line">                    observer.next(&apos;111&apos;);</span><br><span class="line">                    observer.next(&apos;222);</span><br><span class="line">                    observer.compelte()</span><br><span class="line">                    setTimeout(function () &#123;</span><br><span class="line">                        observer.next(&apos;333&apos;);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line">var observer = &#123;</span><br><span class="line">    next: (value) =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: (error) =&gt; &#123;</span><br><span class="line">        console.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: () =&gt; &#123;</span><br><span class="line">        console.log(&apos;compelte&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">observable.subscribe(observer);</span><br><span class="line">  //上面代码会输出:</span><br><span class="line">  111</span><br><span class="line">  222</span><br><span class="line">  //可以看出当compelte执行完之后的next会失效</span><br></pre></td></tr></table></figure></li></ul><p>###三、Observable的Operators方法</p><blockquote><p>转换（transformation） 过滤（filter） 合并（combination）<br>1.map<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var newest = source.map(x = x+1);</span><br><span class="line">newest.subscribe(console.log())</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图 Marble diagrams<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source: -----0-----1-----2-----3--...</span><br><span class="line">            map(x =&gt; x + 1)</span><br><span class="line">newest: -----1-----2-----3-----4--...</span><br></pre></td></tr></table></figure></p><p>2.mapTo</p><blockquote><p>mapTo可以吧传进来的值改成指定的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var newest = source.mapTo(2);</span><br><span class="line">newest.subscribe(console.log);</span><br><span class="line">//</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图Marble diagrams</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source: -----0-----1-----2-----3--...</span><br><span class="line">                mapTo(2)</span><br><span class="line">newest: -----2-----2-----2-----2--...</span><br></pre></td></tr></table></figure><p>3.filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var newest = source.filter(x =&gt; x % 2 === 0); </span><br><span class="line"></span><br><span class="line">newest.subscribe(console.log);</span><br><span class="line">// 0</span><br><span class="line">// 2</span><br><span class="line">// 4</span><br><span class="line">// 6..</span><br></pre></td></tr></table></figure><p>珠宝图Marble diagrams</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source: -----0-----1-----2-----3-----4-...</span><br><span class="line">            filter(x =&gt; x % 2 === 0)</span><br><span class="line">newest: -----0-----------2-----------4-...</span><br></pre></td></tr></table></figure><p>4.take</p><blockquote><p>take表示取前几个就结束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var example = source.take(3);</span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">next:(val) =&gt; &#123;console.log(val)&#125;;</span><br><span class="line">error: (err) =&gt; &#123;console.log(err)&#125;;</span><br><span class="line">complete: () =&gt; &#123;console.log(complete)&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">//</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">complete</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图Marble diagrams<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source : -----0-----1-----2-----3--..</span><br><span class="line">                take(3)</span><br><span class="line">example: -----0-----1-----2|</span><br></pre></td></tr></table></figure></p><p>5.first</p><blockquote><p>和take差不多取第一个就结束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var example = source.first();</span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">next:(val) =&gt; &#123;console.log(val)&#125;;</span><br><span class="line">error: (err) =&gt; &#123;console.log(err)&#125;;</span><br><span class="line">complete: () =&gt; &#123;console.log(complete)&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">//</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">complete</span><br></pre></td></tr></table></figure><p>珠宝图Marble diagrams<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source : -----0-----1-----2-----3--..</span><br><span class="line">                first()</span><br><span class="line">example: -----0|</span><br></pre></td></tr></table></figure></p><p>6.takeUntil</p><blockquote><p>直到某个事件发生以后才结束发出compelte<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var click = Rx.Observable.fromEvent(document.body, &apos;click&apos;);</span><br><span class="line">var example = source.takeUntil(click);     </span><br><span class="line">   </span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line">// complete (點擊body了</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图Marble diagrams<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source : -----0-----1-----2------3--</span><br><span class="line">click  : ----------------------c----</span><br><span class="line">                takeUntil(click)</span><br><span class="line">example: -----0-----1-----2----|</span><br></pre></td></tr></table></figure></p><p>7.concatAll</p><blockquote><p>相当于把二维数组转换成一维数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var click = Rx.Observable.fromEvent(document.body, &apos;click&apos;);</span><br><span class="line">var source = click.map(e =&gt; Rx.Observable.of(1,2,3));</span><br><span class="line"></span><br><span class="line">var example = source.concatAll();</span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图Marble diagrams<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">click  : ------c------------c--------</span><br><span class="line"></span><br><span class="line">        map(e =&gt; Rx.Observable.of(1,2,3))</span><br><span class="line"></span><br><span class="line">source : ------o------------o--------</span><br><span class="line">                \            \</span><br><span class="line">                 (123)|       (123)|</span><br><span class="line"></span><br><span class="line">                   concatAll()</span><br><span class="line"></span><br><span class="line">example: ------(123)--------(123)------------</span><br></pre></td></tr></table></figure></p><p>这里可以看到sourceobservable内部每次发送的值也是observable，这时我们用concatAll就可以把source摊平成example。</p><p>这里需要注意的是concatAll会处理source先发出来的observable，必须等到这个observable结束，才会再处理下一个source发出来的observable，让我们用下面这个范例说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var obs1 = Rx.Observable.interval(1000).take(5);</span><br><span class="line">var obs2 = Rx.Observable.interval(500).take(2);</span><br><span class="line">var obs3 = Rx.Observable.interval(2000).take(1);</span><br><span class="line"></span><br><span class="line">var source = Rx.Observable.of(obs1, obs2, obs3);</span><br><span class="line"></span><br><span class="line">var example = source.concatAll();</span><br><span class="line"></span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line">// 4</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 0</span><br><span class="line">// complete</span><br></pre></td></tr></table></figure><p>8.skip</p><blockquote><p>省略前几个发送的元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000);</span><br><span class="line">var example = source.skip(3);</span><br><span class="line"></span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 3</span><br><span class="line">// 4</span><br><span class="line">// 5...</span><br></pre></td></tr></table></figure><p>珠宝图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source : ----0----1----2----3----4----5--....</span><br><span class="line">                    skip(3)</span><br><span class="line">example: -------------------3----4----5--...</span><br></pre></td></tr></table></figure></p><p>9.takeLast</p><blockquote><p>取最后第几个值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000).take(6);</span><br><span class="line">var example = source.takeLast(2);</span><br><span class="line"></span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 4</span><br><span class="line">// 5</span><br><span class="line">// complete</span><br></pre></td></tr></table></figure><p>珠宝图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source : ----0----1----2----3----4----5|</span><br><span class="line">                takeLast(2)</span><br><span class="line">example: ------------------------------(45)|</span><br></pre></td></tr></table></figure></p><p>10.last</p><blockquote><p>去最后一个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var source = Rx.Observable.interval(1000).take(6);</span><br><span class="line">var example = source.last();</span><br><span class="line"></span><br><span class="line">example.subscribe(&#123;</span><br><span class="line">    next: (value) =&gt; &#123; console.log(value); &#125;,</span><br><span class="line">    error: (err) =&gt; &#123; console.log(&apos;Error: &apos; + err); &#125;,</span><br><span class="line">    complete: () =&gt; &#123; console.log(&apos;complete&apos;); &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 5</span><br><span class="line">// complete</span><br></pre></td></tr></table></figure></p></blockquote><p>珠宝图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">source : ----0----1----2----3----4----5|</span><br><span class="line">                    last()</span><br><span class="line">example: ------------------------------(5)|</span><br><span class="line">```</span><br><span class="line">11.concat</span><br><span class="line">&gt;把多个实例合并成一个</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.interval(1000).take(3);<br>var source2 = Rx.Observable.of(3)<br>var source3 = Rx.Observable.of(4,5,6)<br>var example = source.concat(source2, source3);</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br>// 0<br>// 1<br>// 2<br>// 3<br>// 4<br>// 5<br>// 6<br>// complete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图</span><br></pre></td></tr></table></figure></p><p>source : —-0—-1—-2|<br>source2: (3)|<br>source3: (456)|<br>            concat()<br>example: —-0—-1—-2(3456)|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12.startWith</span><br><span class="line">&gt;表示一开始要发送的元素可以在前面插入</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.interval(1000);<br>var example = source.startWith(0);</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br>// 0<br>// 0<br>// 1<br>// 2<br>// 3…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图</span><br></pre></td></tr></table></figure></p><p>source : —-0—-1—-2—-3–…<br>                startWith(0)<br>example: (0)—-0—-1—-2—-3–…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">13.merge</span><br><span class="line">&gt;合并多个实例</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.interval(500).take(3);<br>var source2 = Rx.Observable.interval(300).take(6);<br>var example = source.merge(source2);</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br>// 0<br>// 0<br>// 1<br>// 2<br>// 1<br>// 3<br>// 2<br>// 4<br>// 5<br>// complete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图</span><br></pre></td></tr></table></figure></p><p>source : —-0—-1—-2|<br>source2: –0–1–2–3–4–5|<br>            merge()<br>example: –0-01–21-3–(24)–5|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">merge 的邏輯有點像是 OR(||)，就是當兩個 observable 其中一個被觸發時都可以被處理，這很常用在一個以上的按鈕具有部分相同的行為。</span><br><span class="line"></span><br><span class="line">例如一個影片播放器有兩個按鈕，一個是暫停(II)，另一個是結束播放(口)。這兩個按鈕都具有相同的行為就是影片會被停止，只是結束播放會讓影片回到 00 秒，這時我們就可以把這兩個按鈕的事件 merge 起來處理影片暫停這件事。</span><br></pre></td></tr></table></figure></p><p>var stopVideo = Rx.Observable.merge(stopButton, endButton);</p><p>stopVideo.subscribe(() =&gt; {<br>    // 暫停播放影片<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://ithelp.ithome.com.tw/articles/10187638</span><br><span class="line">14.combineLatest</span><br><span class="line">&gt;首先我們要介紹的是 combineLatest，它會取得各個 observable 最後送出的值，再輸出成一個值，我們直接看範例會比較好解釋。</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.interval(500).take(3);<br>var newest = Rx.Observable.interval(300).take(6);</p><p>var example = source.combineLatest(newest, (x, y) =&gt; x + y);</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br>// 0<br>// 1<br>// 2<br>// 3<br>// 4<br>// 5<br>// 6<br>// 7<br>// complete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图</span><br></pre></td></tr></table></figure></p><p>source : —-0—-1—-2|<br>newest : –0–1–2–3–4–5|</p><pre><code>combineLatest(newest, (x, y) =&gt; x + y);</code></pre><p>example: —-01–23-4–(56)–7|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">首先combineLatest可以接收多个observable，最后一个参数是callback function，这个callback function接收的参数数量跟合并的observable数量相同，依照范例来说，因为我们这里合并了两个observable所以后面的callback function就接收x, y两个参数，x会接收从source发送出来的值，y会接收从newest发送出来的值。</span><br><span class="line"></span><br><span class="line">最后一个重点就是一定会等两个observable都曾有送值出来才会呼叫我们传入的callback，所以这段程式是这样运行的</span><br><span class="line"></span><br><span class="line">- newest送出了0，但此时source并没有送出过任何值，所以不会执行callback</span><br><span class="line">- source送出了0，此时newest最后一次送出的值为0，把这两个数传入callback得到0。</span><br><span class="line">- newest送出了1，此时source最后一次送出的值为0，把这两个数传入callback得到1。</span><br><span class="line">- newest送出了2，此时source最后一次送出的值为0，把这两个数传入callback得到2。</span><br><span class="line">- source送出了1，此时newest最后一次送出的值为2，把这两个数传入callback得到3。</span><br><span class="line">- newest送出了3，此时source最后一次送出的值为1，把这两个数传入callback得到4。</span><br><span class="line">- source送出了2，此时newest最后一次送出的值为3，把这两个数传入callback得到5。</span><br><span class="line">- source 结束，但newest 还没结束，所以example 还不会结束。</span><br><span class="line">- newest送出了4，此时source最后一次送出的值为2，把这两个数传入callback得到6。</span><br><span class="line">- newest送出了5，此时source最后一次送出的值为2，把这两个数传入callback得到7。</span><br><span class="line">- newest 结束，因为source 也结束了，所以example 结束。</span><br><span class="line">不管是source 还是newest 送出值来，只要另一方曾有送出过值(有最后的值)，就会执行callback 并送出新的值，这就是combineLatest。</span><br><span class="line"></span><br><span class="line">combineLatest 很常用在运算多个因子的结果，例如最常见的BMI 计算，我们身高变动时就拿上一次的体重计算新的BMI，当体重变动时则拿上一次的身高计算BMI，这就很适合用combineLatest 来处理！</span><br><span class="line">15.zip</span><br><span class="line">&gt;在讲withLatestFrom 之前，先让我们先来看一下zip 是怎么运作的，zip 会取每个observable 相同顺位的元素并传入callback，也就是说每个observable 的第n 个元素会一起被传入callback ，这里我们同样直接用范例讲解会比较清楚</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.interval(500).take(3);<br>var newest = Rx.Observable.interval(300).take(6);</p><p>var example = source.zip(newest, (x, y) =&gt; x + y);</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br>// 0<br>// 2<br>// 4<br>// complete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图</span><br></pre></td></tr></table></figure></p><p>source : —-0—-1—-2|<br>newest : –0–1–2–3–4–5|<br>    zip(newest, (x, y) =&gt; x + y)<br>example: —-0—-2—-4|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以我们的范例来说，zip会等到source跟newest 都送出了第一个元素，再传入callback，下次则等到source跟newest 都送出了第二个元素再一起传入callback，所以运行的步骤如下：</span><br><span class="line"></span><br><span class="line">- newest送出了第一个值0，但此时source并没有送出第一个值，所以不会执行callback。</span><br><span class="line">- source送出了第一个值0，newest之前送出的第一个值为0，把这两个数传入callback得到0。</span><br><span class="line">- newest送出了第二个值1，但此时source并没有送出第二个值，所以不会执行callback。</span><br><span class="line">- newest送出了第三个值2，但此时source并没有送出第三个值，所以不会执行callback。</span><br><span class="line">- source送出了第二个值1，newest之前送出的第二个值为1，把这两个数传入callback得到2。</span><br><span class="line">- newest送出了第四个值3，但此时source并没有送出第四个值，所以不会执行callback。</span><br><span class="line">- source送出了第三个值2，newest之前送出的第三个值为2，把这两个数传入callback得到4。</span><br><span class="line">- source 结束example 就直接结束，因为source 跟newest 不会再有对应顺位的值</span><br><span class="line">zip 会把各个observable 相同顺位送出的值传入callback，这很常拿来做demo 使用，比如我们想要间隔100ms 送出&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;，就可以这么做</span><br></pre></td></tr></table></figure></p><p>var source = Rx.Observable.from(‘hello’);<br>var source2 = Rx.Observable.interval(100);</p><p>var example = source.zip(source2, (x, y) =&gt; x);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里的Marble Diagram 就很简单</span><br></pre></td></tr></table></figure></p><p>source : (hello)|<br>source2: -0-1-2-3-4-…<br>        zip(source2, (x, y) =&gt; x)<br>example: -h-e-l-l-o|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里我们利用zip 来达到原本只能同步送出的资料变成了非同步的，很适合用在建立示范用的资料。</span><br><span class="line"></span><br><span class="line">建议大家平常没事不要乱用zip，除非真的需要。因为zip 必须cache 住还没处理的元素，当我们两个observable 一个很快一个很慢时，就会cache 非常多的元素，等待比较慢的那个observable。这很有可能造成记忆体相关的问题！</span><br><span class="line">16.withLatestFrom</span><br><span class="line">&gt;withLatestFrom 运作方式跟combineLatest 有点像，只是他有主从的关系，只有在主要的observable 送出新的值时，才会执行callback，附随的observable 只是在背景下运作。让我们看一个例子</span><br></pre></td></tr></table></figure></p><p>var main = Rx.Observable.from(‘hello’).zip(Rx.Observable.interval(500), (x, y) =&gt; x);<br>var some = Rx.Observable.from([0,1,0,0,0,1]).zip(Rx.Observable.interval(300), (x, y) =&gt; x);</p><p>var example = main.withLatestFrom(some, (x, y) =&gt; {<br>    return y === 1 ? x.toUpperCase() : x;<br>});</p><p>example.subscribe({<br>    next: (value) =&gt; { console.log(value); },<br>    error: (err) =&gt; { console.log(‘Error: ‘ + err); },<br>    complete: () =&gt; { console.log(‘complete’); }<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">珠宝图Marble diagrams</span><br></pre></td></tr></table></figure></p><p>main   : —-h—-e—-l—-l—-o|<br>some   : –0–1–0–0–0–1|</p><p>withLatestFrom(some, (x, y) =&gt;  y === 1 ? x.toUpperCase() : x);</p><p>example: —-h—-e—-l—-L—-O|<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">withLatestFrom 会在main 送出值的时候执行callback，但请注意如果main 送出值时some 之前没有送出过任何值callback 仍然不会执行！</span><br><span class="line"></span><br><span class="line">这里我们在main 送出值时，去判断some 最后一次送的值是不是1 来决定是否要切换大小写，执行步骤如下</span><br><span class="line"></span><br><span class="line">- main送出了h，此时some上一次送出的值为0，把这两个参数传入callback得到h。</span><br><span class="line">- main送出了e，此时some上一次送出的值为0，把这两个参数传入callback得到e。</span><br><span class="line">- main送出了l，此时some上一次送出的值为0，把这两个参数传入callback得到l。</span><br><span class="line">- main送出了l，此时some上一次送出的值为1，把这两个参数传入callback得到L。</span><br><span class="line">- main送出了o，此时some上一次送出的值为1，把这两个参数传入callback得到O。</span><br><span class="line">withLatestFrom 很常用在一些checkbox 型的功能，例如说一个编辑器，我们开启粗体后，打出来的字就都要变粗体，粗体就像是some observable，而我们打字就是main </span><br><span class="line">###四、实战实现简易拖拉</span><br></pre></td></tr></table></figure></p><p>const dragDOM = document.getElementById(‘drag’);<br>const body = document.body;</p><p>const mouseDown = Rx.Observable.fromEvent(dragDOM, ‘mousedown’);<br>const mouseUp = Rx.Observable.fromEvent(body, ‘mouseup’);<br>const mouseMove = Rx.Observable.fromEvent(body, ‘mousemove’);</p><p>mouseDown<br>  .map(event =&gt; mouseMove.takeUntil(mouseUp))<br>  .concatAll()<br>  .map(event =&gt; ({ x: event.clientX, y: event.clientY }))<br>  .subscribe(pos =&gt; {<br>      dragDOM.style.left = pos.x + ‘px’;<br>    dragDOM.style.top = pos.y + ‘px’;<br>  })<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##RX.js&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;##一、函数式编程-通用函数式&lt;/p&gt;
&lt;p&gt;1.&lt;code&gt;ForEach&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="RXJS" scheme="http://yoursite.com/categories/RXJS/"/>
    
    
      <category term="RXJS" scheme="http://yoursite.com/tags/RXJS/"/>
    
  </entry>
  
  <entry>
    <title>React之Immutable学习记录（十二）</title>
    <link href="http://yoursite.com/2017/11/20/react-study-Immutable/"/>
    <id>http://yoursite.com/2017/11/20/react-study-Immutable/</id>
    <published>2017-11-20T12:10:24.000Z</published>
    <updated>2018-03-29T15:27:25.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理于互联网</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>从问题说起：熟悉 <code>React</code> 组件生命周期的话都知道：调用 <code>setState</code> 方法总是会触发 <code>render</code> 方法从而进行 <code>vdom re-render</code> 相关逻辑，哪怕实际上你没有更改到 <code>Component.state</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="number">0</span>&#125;);<span class="comment">// 组件 state 并未被改变，但仍会触发 render 方法</span></span><br></pre></td></tr></table></figure><ul><li>为了避免这种性能上的浪费，<code>React</code> 提供了一个 <code>shouldComponentUpdate</code> 来控制触发 <code>vdom re-render</code> 逻辑的条件。于是 <code>PureRenderMixin</code> 作为一种优化技巧被使用。它仅仅是浅比较对象，深层次的数据结构根本不管用</li></ul><p><strong>js中的Immutable Data</strong></p><blockquote><p>在<code>javascript</code>中我们可以通过<code>deep clone</code>来模拟<code>Immutable Data</code>，就是每次对数据进行操作，新对数据进行<code>deep clone</code>出一个新数据</p></blockquote><ul><li>deep clone</li><li>当然你或许意识到了，这样非常的慢</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;  </span><br><span class="line"><span class="keyword">var</span> cloneDeep = <span class="built_in">require</span>(<span class="string">'lodash.clonedeep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;  </span><br><span class="line">    id: <span class="string">'data'</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">        name: <span class="string">'mdemo'</span>,</span><br><span class="line">        github: <span class="string">'https://github.com/demohi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data1 = cloneDeep(data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'equal:'</span>, data1===data); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">data1.id = <span class="string">'data1'</span>;  </span><br><span class="line">data1.author.name = <span class="string">'demohi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.id);<span class="comment">// data  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.id);<span class="comment">// data1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.author.name);<span class="comment">//mdemo  </span></span><br><span class="line"><span class="built_in">console</span>.log(data1.author.name);<span class="comment">//demohi</span></span><br></pre></td></tr></table></figure><blockquote><p>这时候 immutableJS 就派得上用场了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line"><span class="keyword">var</span> map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:&#123;<span class="attr">e</span>:<span class="number">7</span>&#125;&#125;&#125;&#125;&#125;);</span><br><span class="line">Immutable.is(map1, map2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>遍历对象不再用<code>for-in</code>，可以这样:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123; <span class="comment">/* do some thing */</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="二、什么是-Immutable-Data"><a href="#二、什么是-Immutable-Data" class="headerlink" title="二、什么是 Immutable Data"></a>二、什么是 Immutable Data</h2><ul><li><code>Immutable Data</code> 就是一旦创建，就不能再被更改的数据。对 <code>Immutable</code> 对象的任何修改或添加删除操作都会返回一个新的 <code>Immutable</code> 对象</li><li><code>Immutable</code> 实现的原理是 <code>Persistent Data Structure</code>（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变</li><li>同时为了避免 <code>deepCopy</code> 把所有节点都复制一遍带来的性能损耗，<code>Immutable</code> 使用了 <code>Structural Sharing····</code>（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://segmentfault.com/image?src=http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif&objectId=1190000003910357&token=4f994e3bf65c373b010a157dfbab240f" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>打印<code>immutableJS</code>看看有什么东西</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-ddbb8fec9c23aa7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>一个说明不可变的例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生对象</span></span><br><span class="line"><span class="keyword">let</span> a1 = &#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = a1;</span><br><span class="line">b1.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1.b, b1.b); <span class="comment">// 2, 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === b1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.c === b1.c); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// immutable.js 的Map</span></span><br><span class="line"><span class="keyword">let</span> a2 = Immutable.fromJS(&#123;</span><br><span class="line">    b: <span class="number">1</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        c1: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 = a2.set(<span class="string">'b'</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'b'</span>), b2.get(<span class="string">'b'</span>)); <span class="comment">// 1, 2  对象 a2 的 b 值并没有变成2。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === b2); <span class="comment">//  false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.get(<span class="string">'c'</span>) === b2.get(<span class="string">'c'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="三、为什么要在React-js中使用Immutable"><a href="#三、为什么要在React-js中使用Immutable" class="headerlink" title="三、为什么要在React.js中使用Immutable"></a>三、为什么要在React.js中使用Immutable</h2><blockquote><ul><li>它是一个完全独立的库，无论基于什么框架都可以用它。意义在于它弥补了<code>Javascript</code> 没有不可变数据结构的问题</li><li>由于是不可变的，可以放心的对对象进行任意操作。在<code>React</code>开发中，频繁操作state对象或是<code>store</code>，配合<code>immutableJS</code>快、安全、方便</li></ul></blockquote><ul><li>熟悉<code>React.js</code>的都应该知道，<code>React.js</code>是一个<code>UI = f(states)</code>的框架，为了解决更新的问题，<code>React.js</code>使用了<code>virtual dom</code>，<code>virtual dom</code>通过<code>diff</code>修改<code>dom</code>，来实现高效的<code>dom</code>更新。</li><li>但是有一个问题。当<code>state</code>更新时，如果数据没变，你也会去做<code>virtual dom</code>的<code>diff</code>，这就产生了浪费。这种情况其实很常见</li></ul><blockquote><ul><li>当然你可能会说，你可以使用<code>PureRenderMixin</code>来解决呀，<code>PureRenderMixin</code>是个好东西，我们可以用它来解决一部分的上述问题</li><li>但<code>PureRenderMixin</code>只是简单的浅比较，不使用于多层比较。那怎么办？自己去做复杂比较的话，性能又会非常差</li></ul></blockquote><ul><li>方案就是使用<code>immutable.js</code>可以解决这个问题。因为每一次<code>state</code>更新只要有数据改变，那么<code>PureRenderMixin</code>可以立刻判断出数据改变，可以大大提升性能</li></ul><p><strong>Immutable 优点</strong></p><ul><li><strong>Immutable 降低了 Mutable 带来的复杂度</strong></li></ul><blockquote><p>可变（<code>Mutable</code>）数据耦合了 <code>Time</code>和 <code>Value</code> 的概念，造成了数据很难被回溯</p></blockquote><ul><li><strong>节省内存</strong></li></ul><blockquote><p><code>Immutable.js</code> 使用了 <code>Structure Sharing</code> 会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Map</span>(&#123;</span><br><span class="line">  select: <span class="string">'users'</span>,</span><br><span class="line">  filter: <span class="built_in">Map</span>(&#123; <span class="attr">name</span>: <span class="string">'Cam'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> b = a.set(<span class="string">'select'</span>, <span class="string">'people'</span>);</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a.get(<span class="string">'filter'</span>) === b.get(<span class="string">'filter'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</strong></li></ul><blockquote><p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。</p></blockquote><ul><li><strong>并发安全</strong></li></ul><blockquote><p>传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 <code>Immutable</code> 之后，数据天生是不可变的，并发锁就不需要了。</p></blockquote><ul><li><strong>拥抱函数式编程</strong></li></ul><blockquote><p><code>Immutable</code> 本身就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</p></blockquote><p><strong>Immutable 缺点</strong></p><ul><li>需要学习新的 API</li><li>增加了资源文件大小</li><li>容易与原生对象混淆</li></ul><h2 id="四、Immutable-的几种数据类型"><a href="#四、Immutable-的几种数据类型" class="headerlink" title="四、Immutable 的几种数据类型"></a>四、Immutable 的几种数据类型</h2><ul><li><code>List</code>: 有序索引集，类似<code>JavaScript</code>中的<code>Array</code>。</li><li><code>Map</code>: 无序索引集，类似<code>JavaScript</code>中的<code>Object</code>。</li><li><code>OrderedMap</code>: 有序的<code>Map</code>，根据数据的<code>set()</code>进行排序。</li><li><code>Set</code>: 没有重复值的集合。</li><li><code>OrderedSet</code>: 有序的<code>Set</code>，根据数据的<code>add</code>进行排序。</li><li><code>Stack</code>: 有序集合，支持使用<code>unshift（）</code>和<code>shift（）</code>添加和删除。</li><li><code>Range()</code>: 返回一个<code>Seq.Indexed</code>类型的集合，这个方法有三个参数，<code>start</code>表示开始值，默认值为<code>0</code>，<code>end</code>表示结束值，默认为无穷大，<code>step</code>代表每次增大的数值，默认为<code>1</code>.如果<code>start = end</code>,则返回空集合。</li><li><code>Repeat()</code>: 返回一个<code>vSeq.Indexe</code>类型的集合，这个方法有两个参数，<code>value</code>代表需要重复的值，<code>times</code>代表要重复的次数，默认为无穷大。</li><li><code>Record</code>: 一个用于生成<code>Record</code>实例的类。类似于<code>JavaScript</code>的<code>Object</code>，但是只接收特定字符串为<code>key</code>，具有默认值。</li><li><code>Seq</code>: 序列，但是可能不能由具体的数据结构支持。</li><li><code>Collection</code>: 是构建所有数据结构的基类，不可以直接构建</li></ul><blockquote><p>上面那么多常用的也就是 <code>List</code>和<code>Map</code></p></blockquote><h2 id="五、几个重要的API"><a href="#五、几个重要的API" class="headerlink" title="五、几个重要的API"></a>五、几个重要的API</h2><p><strong>1、fromJS()</strong></p><ul><li><code>fromJS()</code> 是最最最常用的将原生<code>JS</code>数据转换为<code>ImmutableJS</code>数据的转换方法。使用方式类似于 <code>JSON.parse()</code>，接收两个参数：<code>json</code> 数据和 <code>reviver</code>函数</li><li>在不传递<code>reviver</code>函数的情况下，默认将原生<code>JS</code>的<code>Array</code>转为<code>List</code>，<code>Object</code>转为<code>Map</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见</span></span><br><span class="line"><span class="keyword">const</span> t1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不常用</span></span><br><span class="line"><span class="keyword">const</span> t2 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;, <span class="attr">c</span>: <span class="number">40</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定制转换方式，下这种就是将Array转换为List，Object转换为Map</span></span><br><span class="line">    <span class="keyword">const</span> isIndexed = Immutable.Iterable.isIndexed(value);</span><br><span class="line">    <span class="keyword">return</span> isIndexed ? value.toList() : value.toOrderedMap();</span><br><span class="line">    <span class="comment">// true, "b", &#123;b: [10, 20, 30]&#125;</span></span><br><span class="line">    <span class="comment">// false, "a", &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;</span></span><br><span class="line">    <span class="comment">// false, "", &#123;"": &#123;a: &#123;b: [10, 20, 30]&#125;, c: 40&#125;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(t2);</span><br></pre></td></tr></table></figure><p><strong>2、is()</strong></p><blockquote><p>先来看官网的一段话: <code>immutable</code>数据应该被当作值而不是对象，值是表示该事件在特定时刻的状态。这个原则对理解不可变数据的适当使用是最重要的。为了将<code>Immutable.js</code>数据视为值，就必须使用<code>Immutable.is()</code>函数或<code>.equals()</code>方法来确定值相等，而不是确定对象引用标识的 <code>===</code> 操作符</p></blockquote><ul><li>所以<code>is()</code>就是用来对两个<code>immutable</code>对象进行值比较的。使用方式类似于 <code>Object.is(obj1, obj2)</code>，接收两个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个不同的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(map1 === map2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 进行值比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(map1, map2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不仅仅只能比较ImmutableJS的类型的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">undefined</span>, <span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">null</span>, <span class="literal">null</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区别于 Object.is</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>) ,Immutable.is(<span class="number">-0</span>, <span class="number">0</span>)); <span class="comment">// false , true</span></span><br></pre></td></tr></table></figure><p><strong>3、Map</strong></p><blockquote><p><code>Map</code> 数据类型，对应原生 <code>Object</code> 数组。最最常用的 数据结构之一，循环时无序(<code>orderedMap</code>有序)，对象的 <code>key</code> 可以是任意值。具体看下面的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(List.of(<span class="number">1</span>), <span class="string">'list-of-one'</span>).get(List.of(<span class="number">1</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">NaN</span>, <span class="string">'NaN'</span>).get(<span class="literal">NaN</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">undefined</span>, <span class="string">'undefined'</span>).get(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().set(<span class="literal">null</span>, <span class="string">'null'</span>).get(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>简单介绍 OrderedMap</strong></li></ul><blockquote><p><code>OrderedMap</code> 是 <code>Map</code> 的变体，它除了具有 <code>Map</code> 的特性外，还具有顺序性，当开发者遍历 <code>OrderedMap</code> 的实例时，遍历顺序为该实例中元素的声明、添加顺序。<code>OrderedMap</code>比非有序<code>Map</code>更昂贵，并且可能消耗更多的内存。如果真要求遍历有序，请使用<code>List</code></p></blockquote><p><strong>4、List</strong></p><blockquote><p><code>List</code> 数据类型，对应原生 <code>Array</code>数组。和原生数组，最大区别不存在’空位’。<code>[, , , , ]</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([,,,,]).toJS());<span class="comment">// [undefined, undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure><h2 id="六、API"><a href="#六、API" class="headerlink" title="六、API"></a>六、API</h2><blockquote><p>我们主要介绍<code>Map</code>和 <code>List</code></p></blockquote><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><strong>1、通过构造函数 Map()</strong></p><blockquote><p>构造函数不常用，一般都是通过<code>Immutable.fromJS()</code>将一个<code>JS</code>原生对象转换为一个<code>Immutable</code>对象</p></blockquote><p><strong>2、Map()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iter: Iterable&lt;any, Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(obj: Array&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;V&gt;(obj: &#123;[key: string]: V&#125;): Map&lt;string, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterator: Iterator&lt;Array&lt;any&gt;&gt;): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> Map&lt;K, V&gt;(iterable: Object): Map&lt;K, V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>().toJS()); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value"</span>&#125;).toJS()); <span class="comment">// &#123;key: "value"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>同Key覆盖问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后的&#123;key: value2&#125; 覆盖了前面的 &#123;key: value&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>([[<span class="string">"key"</span>, <span class="string">"value"</span>], [<span class="string">"key"</span>, <span class="string">"value2"</span>], [<span class="string">"key1"</span>, <span class="string">"value1"</span>]]).toJS());<span class="comment">// &#123;key: "value2", key1: "value1"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、List()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Indexed&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iter: Iterable.Set&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;K, V&gt;(iter: Iterable.Keyed&lt;K, V&gt;): List&lt;any&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(array: Array&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterator: Iterator&lt;T&gt;): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> List&lt;T&gt;(iterable: Object): List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(List().toJS()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;]).toJS()); <span class="comment">// [ 1, 2, 3, 4, &#123;a: 123&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>4、另一种方式</strong></p><p><strong>Map.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(<span class="string">'key1'</span>,<span class="string">'value1'</span>,<span class="string">'key2'</span>,<span class="string">'value2'</span>,<span class="string">'key3'</span>,<span class="string">'value3'</span>).toJS()); <span class="comment">// &#123;key1: "value1", key2: "value2", key3: "value3"&#125;</span></span><br></pre></td></tr></table></figure><p><strong>List.of()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).toJS()); <span class="comment">// [&#123;x:1&#125;, 2, [3], 4]</span></span><br></pre></td></tr></table></figure><h3 id="判断是否是一个Map或者List"><a href="#判断是否是一个Map或者List" class="headerlink" title="判断是否是一个Map或者List"></a>判断是否是一个Map或者List</h3><p><strong>1、Map判断</strong></p><ul><li>判断是否是一个<code>Map</code> , 对原生<code>Object</code>不生效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(&#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.isMap(<span class="built_in">Map</span>(&#123;&#125;))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>2、List判断</strong></p><blockquote><p>判断是否是一个<code>List</code> , 对原生<code>Array</code>不生效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List.isList([])); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(List.isList(List([]))); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h3><p><strong>1、size</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]).size);<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).size);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).size);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.of(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, [<span class="number">3</span>], <span class="number">4</span>).size);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>count()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="string">"value2"</span>, <span class="attr">key1</span>: <span class="string">"value1"</span>&#125;).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以定制条件，来确定大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).count(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 1 value大于3的有两个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count());<span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 可以制定条件，来确定 大小</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).count(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 2 大于3的有两个</span></span><br></pre></td></tr></table></figure><p><strong>countBy()</strong></p><blockquote><p><code>countBy()</code>和<code>count()</code>的区别就是它的返回值是一个对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">key1</span>: <span class="number">34</span>&#125;).countBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 1, true: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).countBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;false: 2, true: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p><strong>1、Set</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 将 key 位置的元素替换为 value</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'a'</span>, <span class="number">0</span>).toJS()); <span class="comment">// &#123;a: 0, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.set(<span class="string">'e'</span>, <span class="number">99</span>).toJS());  <span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444, e: 99&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 将 index 位置的元素替换为 value，即使索引越界也是安全的, 空位 undefined</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">-1</span>, <span class="number">0</span>).toJS()); <span class="comment">// [1, 2, 0]  注意-1 等效于 $arr1.set($arr1.size + -1, 0)</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.set(<span class="number">4</span>, <span class="number">0</span>).toJS());  <span class="comment">// [ 1, 2, 3, undefined, 0 ]  空位置为了undefined</span></span><br></pre></td></tr></table></figure><p><strong>2、setIn</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">45</span>, <span class="attr">b</span>: <span class="number">64</span>&#125;]).setIn([<span class="string">'3'</span>, <span class="string">'a'</span>], <span class="number">1000</span>).toJS());<span class="comment">//[1, 2, 3, &#123;a: 1000, b: 64&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="List-特有的添加元素"><a href="#List-特有的添加元素" class="headerlink" title="List 特有的添加元素"></a>List 特有的添加元素</h3><p><strong>1、插入元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert(index: number, value: T)</span></span><br><span class="line"><span class="comment">// 向 index 位置插入 value</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).insert(<span class="number">1</span>, <span class="number">1.5</span>).toJS()); <span class="comment">// [ 1, 1.5, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p><strong>2、设置size</strong></p><ul><li>默认值<code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(List([]).setSize(<span class="number">2</span>).toJS()); <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><p><strong>3、pop、push、shift、unshift</strong></p><blockquote><p><code>List</code>数据类型也拥有<code>pop</code>、<code>push</code>、<code>shift</code>、<code>unshift</code>这四种操作方法，和原生<code>Array</code>的四种方法使用方式一致，但唯一区别就是返回新的<code>List</code>，并且不改变原来的数组本身，而原生则是会改变元素本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ImmutableJS：返回新的List，并且不改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test.pop().toJS(), $test.toJS()); <span class="comment">// [1, 2, 3] [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 原生：返回被改变的值，改变元素本身</span></span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(test.pop(), test); <span class="comment">// 4 [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>4、花样插入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interpose</span></span><br><span class="line"><span class="comment">// 插入xxx之间</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interpose(<span class="number">5555</span>).toJS()); <span class="comment">// [1, 5555, 2, 5555, 5, 5555, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interleave</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，每个的第一项、第二项、第三项... 组成新的数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).interleave(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>])).toJS()); <span class="comment">// [1, 555, 2, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// zip</span></span><br><span class="line"><span class="comment">// 被操作的两个数组，抽离第一项和第二项组成新的子数组，放入到一个大数组中，形成二维数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zip(Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ [1, 555], [2, 666]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义插入规则。</span></span><br><span class="line"><span class="comment">// zipWith</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]).zipWith(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, Immutable.fromJS([<span class="number">555</span>, <span class="number">666</span>]).toJS())); <span class="comment">// [ 556, 668]</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><strong>1、delete(key)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// delete(index: number)</span></span><br><span class="line"><span class="comment">// 删除 index 位置的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">1</span>).toJS(), $arr1.toJS());<span class="comment">// [ 1, 3 ] [ 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).delete(<span class="number">77</span>).toJS(), $arr1.toJS(), <span class="string">'超过范围不会强制报错'</span>);<span class="comment">// [ 1, 2, 3] [ 1, 2, 3] 超过范围不会强制报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'c'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, d: 444&#125;  &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).delete(<span class="string">'asdfasfd'</span>).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 1, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、deleteIn</strong></p><blockquote><p>和 <code>setIn</code>使用方式一致</p></blockquote><p><strong>3、清空元素 lear()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).clear().toJS());<span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).clear().toJS());<span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><blockquote><p>修改某一个元素</p></blockquote><p><strong>1、set setIn</strong></p><blockquote><p>上面已经介绍过</p></blockquote><p><strong>2、update</strong></p><blockquote><p>update(key: K, notSetValue: V, updater: (value: V) =&gt; V): Map&lt;K, V&gt;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'2'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 6] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3, undefined, undefined, undefined, 2] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($arr1.update(<span class="string">'6'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $arr1.toJS());<span class="comment">// [1, 2, 3] [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $obj1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'a'</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">// &#123;a: 2, b: 2, c: 3, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">1</span>, (value)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//   &#123;a: 1, b: 2, c: 3, d: 444, e: 2&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($obj1.update(<span class="string">'e'</span>, <span class="number">0</span>, (value)=&gt; &#123; <span class="comment">// 默认值入手是number必须大于0 感觉有BUG，所以还是不要用了。</span></span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS(), $obj1.toJS());<span class="comment">//  &#123;a: 1, b: 2, c: 6, d: 444&#125; &#123;a: 1, b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、updateIn</strong></p><blockquote><p>使用方式和setIn一样。</p></blockquote><h3 id="获取某个元素值"><a href="#获取某个元素值" class="headerlink" title="获取某个元素值"></a>获取某个元素值</h3><p><strong>1、get getIn</strong></p><ul><li>使用方式：<code>get(key: number, notSetValue?: T)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1111111</span>, <span class="number">22222</span>, &#123;<span class="attr">a</span>: <span class="number">888123</span>&#125;]);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">0</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有数组可以用 number 类型 的key</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="number">1</span>), Immutable.fromJS(&#123;<span class="number">1</span>: <span class="string">'abc'</span>&#125;).get(<span class="string">'1'</span>));<span class="comment">// undefined "abc" | 只有数组可以用 number 类型 的key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="number">11</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'a'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 888123</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'2'</span>, <span class="string">'b'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'a'</span>)); <span class="comment">// 1111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notSetValue 默认值，了解</span></span><br><span class="line"><span class="built_in">console</span>.log($test.get(<span class="string">'v'</span>, <span class="string">'no have value'</span>)); <span class="comment">// no have value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getIn</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'a'</span>, <span class="string">'a1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// 222</span></span><br><span class="line"><span class="built_in">console</span>.log($test.getIn([<span class="string">'d'</span>, <span class="string">'b1'</span>], <span class="string">'child no have value'</span>)); <span class="comment">// child no have value</span></span><br></pre></td></tr></table></figure><p><strong>2、获取头、尾元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $arr1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($arr1.first());<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log($arr1.last());<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($obj1.first());<span class="comment">// &#123;a1: 34&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($obj1.last());<span class="comment">// 444</span></span><br></pre></td></tr></table></figure><h3 id="查找某个元素"><a href="#查找某个元素" class="headerlink" title="查找某个元素"></a>查找某个元素</h3><p><strong>1、find() findLast()</strong></p><blockquote><p><code>find()</code>、<code>findLast()</code>返回 <code>value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">56</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).find(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: &#123;b: 111&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).find(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findKey() findLastKey()</strong></p><blockquote><p><code>findKey()</code>、<code>findLastKey()</code> 返回 <code>key</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findKey(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findKey(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// c</span></span><br></pre></td></tr></table></figure><p><strong>3、findEntry() findLastEntry()</strong></p><blockquote><p><code>findEntry()</code>、<code>findLastEntry()</code> 返回 <code>key:value</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findEntry(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index === <span class="number">3</span>;</span><br><span class="line">&#125;));<span class="comment">// [3, Map]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).findEntry(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Immutable.is(value, Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;));</span><br><span class="line">&#125;));<span class="comment">// ["a", Map]</span></span><br></pre></td></tr></table></figure><p><strong>4、keyOf() lastKeyOf()</strong></p><blockquote><p><code>keyOf()</code>、<code>lastKeyOf()</code> 根据 <code>value</code> 返回<code>key</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).keyOf(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(Immutable.fromJS(&#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;))); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).keyOf(<span class="number">2</span>)); <span class="comment">// b</span></span><br></pre></td></tr></table></figure><h3 id="List-特有查找某个元素"><a href="#List-特有查找某个元素" class="headerlink" title="List 特有查找某个元素"></a>List 特有查找某个元素</h3><p><strong>1、indexOf() lastIndexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找不到 返回 -1</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).indexOf(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;))); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>2、findIndex() findLastIndex()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">111</span>&#125;&#125;]).findIndex(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value/<span class="number">3</span> === <span class="number">1</span>;</span><br><span class="line">&#125;)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="查找最大、最小元素"><a href="#查找最大、最小元素" class="headerlink" title="查找最大、最小元素"></a>查找最大、最小元素</h3><blockquote><p><code>max()</code>、<code>maxBy()</code>默认比较规则为<code>&gt;</code>，<code>min()</code>、<code>minBy()</code>默认比较规则为<code>&gt;</code></p></blockquote><p><strong>1、max()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max()); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">301</span>, <span class="number">88</span>]).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max()); <span class="comment">// 8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">8888</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).max(<span class="function">(<span class="params">valueA, valueB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;)); <span class="comment">// 8888</span></span><br></pre></td></tr></table></figure><p><strong>2、maxBy()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">2301</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">222</span>&#125;]).maxBy(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a: 2301&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 自定义比较的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;).toJS());<span class="comment">//  &#123;a1: 54654&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较的元素，和比较规则</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: &#123;<span class="attr">a1</span>: <span class="number">11</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a1</span>: <span class="number">33</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a1</span>: <span class="number">54654</span>&#125;&#125;).maxBy(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a1'</span>);</span><br><span class="line">&#125;, (valueA, valueB) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> valueA &gt; valueB;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;a1: 54654&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、min()</strong></p><ul><li>同<code>max()</code></li></ul><p><strong>4、minBy()</strong></p><ul><li>同<code>maxBy()</code></li></ul><p><strong>5、keys() values() entries()</strong></p><blockquote><p>获取<code>ES6 Iterable</code> 迭代器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = List([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = $test.keys();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> values = $test.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> values) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// &#123;a1: 222&#125; 2 3 444</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = $test.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">// ["a", Map] ["b", 2] ["c", 3] ["d", 444]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p><strong>1、slice()</strong></p><blockquote><p>和原生<code>Array slice()</code>用法一致</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).slice(<span class="number">0</span>).toJS());<span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">0</span>).toJS());<span class="comment">// &#123;a: Object, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">34</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).slice(<span class="number">1</span>).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2、rest() butLast()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ List</span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).rest().rest().toJS()); <span class="comment">// [&#123;a: 1&#125;, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).butLast().toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// rest() 返回删除第一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).rest().rest().toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// butLast() 返回删除最后一个元素后的 Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).butLast().toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>3、skip() skipLast() skipWhile() skipUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skip(<span class="number">2</span>).toJS()); <span class="comment">// [3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [22, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).skipWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// [40, 44, 55, 66]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// skip(number)</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skip(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部按照条件抛出number个元素，对剩余元素进行截取</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: &#123;a1: 222&#125;, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">1</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// skipUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，抛出满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).skipWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">39</span>;<span class="comment">// 抛出直到小于39的元素。</span></span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;d: 444&#125;</span></span><br></pre></td></tr></table></figure><p><strong>4、take() takeLast() takeWhile() takeUntil()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).take(<span class="number">2</span>).toJS()); <span class="comment">// [1, &#123;a: 1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// [5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">111</span>, <span class="number">33</span> , <span class="number">22</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeWhile(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">31</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[111, 33]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">32</span>, <span class="number">33</span> , <span class="number">40</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]).takeUntil(<span class="function">(<span class="params">value, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">41</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//[32, 33 , 40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// take(number)</span></span><br><span class="line"><span class="comment">// 从头获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).take(<span class="number">2</span>).toJS()); <span class="comment">// &#123;a: 5, b: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeLast(number)</span></span><br><span class="line"><span class="comment">// 从尾部获取几个复合条件的元素</span></span><br><span class="line"><span class="comment">// 参数 数量</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeLast(<span class="number">2</span>).toJS()); <span class="comment">// &#123;c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeWhile()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===true 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeWhile(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil()</span></span><br><span class="line"><span class="comment">// 从头开始循环，获取满足 return 条件===false 的元素。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).takeUntil(<span class="function">(<span class="params">value, key, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">39</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">//&#123;a: 5, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><p><strong>1、map() filter() every() some() forEach() reduce() reduceRight()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).map(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).filter(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// [2, 4]</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).every(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).some(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>&#125;]).forEach(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, index, array.toJS(), <span class="string">'forEach'</span>);</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">5</span>;</span><br><span class="line">&#125;)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同原生用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">//1. map()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).map(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;a: 10, b: 4, c: 6, d: 888&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. filter()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).filter(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;).toJS()); <span class="comment">// &#123;b: 2, d: 444&#125;</span></span><br><span class="line"><span class="comment">// filterNot() ...这个没有什么卵用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. every()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).every(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. some()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).some(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. forEach() 返回迭代的条目数（包括返回false的最后一个迭代）</span></span><br><span class="line"><span class="comment">// 与Array 的 forEach不同，如果sideEffect的任何调用返回false，迭代将停止。 返回迭代的条目数（包括返回false的最后一个迭代）。</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).forEach(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">444</span>;</span><br><span class="line">&#125;)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. reduce()</span></span><br><span class="line"><span class="comment">// 同原List用法</span></span><br><span class="line"><span class="comment">//7. reduceRight()</span></span><br><span class="line"><span class="comment">// 同List用法</span></span><br></pre></td></tr></table></figure><h3 id="Map-特有-mapKeys-mapEntries"><a href="#Map-特有-mapKeys-mapEntries" class="headerlink" title="Map 特有 mapKeys() mapEntries()"></a>Map 特有 mapKeys() mapEntries()</h3><blockquote><p>对<code>Map</code>元素进行处理，返回处理后的对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapKeys() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapKeys(<span class="function">(<span class="params">key</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">'hhh'</span>;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// &#123;ahhh: 5, bhhh: 2, chhh: 3, dhhh: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mapEntries() 返回对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).mapEntries(<span class="function">(<span class="params">[key, value]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [key + <span class="string">'aaa'</span>, value+<span class="string">'hhhh'</span>];</span><br><span class="line">&#125;).toJS());<span class="comment">//   &#123;aaaa: "5hhhh", baaa: "2hhhh", caaa: "3hhhh", daaa: "444hhhh"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><strong>merge() mergeDeep() mergeWith() mergeDeepWith()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">55</span>, <span class="attr">c</span>: <span class="number">66</span>&#125;&#125;]);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">333</span>, <span class="attr">d</span>: <span class="number">67</span>&#125;&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test [1, 2, 3, 6, &#123;b: 333, c: 66, d: 67&#125;] [1, 2, 3, 7, &#123;a: &#123;b: 55, c: 66&#125;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a2</span>: <span class="number">234</span>&#125;, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.merge($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"><span class="comment">// 深merge</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeep($test1).toJS(), $test.toJS());</span><br><span class="line"><span class="comment">// $test1 -&gt; $test &#123;a: &#123;a1: 222, a2: 234, a3: 456&#125;, b: 2, c: 3, d: 444&#125; &#123;a: &#123;a1: 222, a3: 456&#125;, b: 2, c: 3, d: 444&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br><span class="line"><span class="comment">// 深merge自定义merge规则</span></span><br><span class="line"><span class="built_in">console</span>.log($test.mergeDeepWith(<span class="function">(<span class="params">prev, next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义转换</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, $test1).toJS(), $test1.toJS());</span><br></pre></td></tr></table></figure><h3 id="jonin-转换为字符串"><a href="#jonin-转换为字符串" class="headerlink" title="jonin() 转换为字符串"></a>jonin() 转换为字符串</h3><blockquote><p>使用方式和原生<code>Array</code>的<code>join()</code>一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).join()); <span class="comment">// 1,2,3,Map &#123; "a": 123, "b": 321 &#125;</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).join()); <span class="comment">// 2,Map &#123; "a1": 222, "a3": 456 &#125;,3,444</span></span><br></pre></td></tr></table></figure><h3 id="isEmpty-判空"><a href="#isEmpty-判空" class="headerlink" title="isEmpty() 判空"></a>isEmpty() 判空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断空List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([]).isEmpty()); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 判断Map是否为空 比原生方便</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;&#125;).isEmpty()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="has-hasIn-检查是否有某个key"><a href="#has-hasIn-检查是否有某个key" class="headerlink" title="has() hasIn() 检查是否有某个key"></a>has() hasIn() 检查是否有某个key</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).has(<span class="string">'0'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="attr">a</span>: <span class="number">123</span>, <span class="attr">b</span>: <span class="number">321</span>&#125;]).hasIn([<span class="number">3</span>, <span class="string">'b'</span>])); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).has(<span class="string">'a'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">444</span>&#125;).hasIn([<span class="string">'a'</span>, <span class="string">'a3'</span>])); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="includes-是否包含某些元素"><a href="#includes-是否包含某些元素" class="headerlink" title="includes() 是否包含某些元素"></a>includes() 是否包含某些元素</h3><blockquote><p><code>includes()</code>、<code>contains()</code>这俩等效</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">89</span>]).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])]).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 对象是否包含某个元素，对Immutable元素使用Immutable.is 进行比较</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">89</span>&#125;).includes(<span class="string">'89'</span>));<span class="comment">// 数组没有字符89，所以返回 false</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="string">'89'</span>&#125;).contains(<span class="string">'89'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])&#125;).contains(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="isSubset-子集判断"><a href="#isSubset-子集判断" class="headerlink" title="isSubset() 子集判断"></a>isSubset() 子集判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]]).isSubset(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>])));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'89'</span>]).isSuperset(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])));<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// isSubset()</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;).isSubset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;)));<span class="comment">// true</span></span><br><span class="line"><span class="comment">// isSuperset 就是 isSubset 参数掉个个儿</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).isSuperset(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;&#125;)));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="reverse-反转"><a href="#reverse-反转" class="headerlink" title="reverse() 反转"></a>reverse() 反转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).reverse().toJS());</span><br><span class="line"><span class="comment">// [6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: <span class="number">222</span>, <span class="attr">a3</span>: <span class="number">456</span>&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).reverse().toJS());</span><br><span class="line"><span class="comment">// &#123;d: 5, c: 3, a: &#123;a1: 222, a3: 456&#125;, b: 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p><code>sort()</code>和<code>sortBy()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// sort(comparator?: (valueA: V, valueB: V) =&gt; number): Iterable&lt;K, V&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]).sort().toJS());</span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">    comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">    comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">    ): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;,</span><br><span class="line">    &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;, &#123;<span class="attr">a</span>: <span class="number">9</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">22</span>&#125;&#125;]).sortBy(<span class="function">(<span class="params">value, index, array</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort().toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// 传入比较函数</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">88</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: 2, c: 3, d: 5, a: 88&#125;</span></span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sortBy&lt;C&gt;(</span></span><br><span class="line"><span class="comment">comparatorValueMapper: (value: T, key: number, iter: Iterable&lt;number, T&gt;) =&gt; C,</span></span><br><span class="line"><span class="comment">comparator?: (valueA: C, valueB: C) =&gt; number</span></span><br><span class="line"><span class="comment">): Iterable&lt;number, T&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="number">88</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;&#125;).sortBy(<span class="function">(<span class="params">value, key, obj</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;,(a, b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).toJS());<span class="comment">// &#123;b: &#123;a: 2&#125;, c: &#123;a: 3&#125;, d: &#123;a: 5&#125;, a: &#123;a: 88&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flatten-平铺"><a href="#flatten-平铺" class="headerlink" title="flatten() 平铺"></a>flatten() 平铺</h3><blockquote><p>参数默认情况下，<code>false</code> 深度平铺，<code>true</code> 浅度平铺1层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten().toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, 777, 888, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">11</span>, <span class="number">111</span>, <span class="number">12344</span>], &#123;<span class="attr">a</span>: <span class="number">1234</span>, <span class="attr">b</span>: &#123;<span class="attr">bb</span>: [<span class="number">777</span>, <span class="number">888</span>]&#125;&#125;, <span class="number">5</span>, <span class="number">6</span>]).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 1, 11, 111, 12344, 1234, Object, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten().toJS());</span><br><span class="line"><span class="comment">// &#123;0: 1, 1: 2, 2: 3, b: 2, a5: 333, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).flatten(<span class="literal">true</span>).toJS());</span><br><span class="line"><span class="comment">// &#123;b: 2, a1: Object, a3: Array[3], c: 3, d: 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="groupBy-分组"><a href="#groupBy-分组" class="headerlink" title="groupBy() 分组"></a>groupBy() 分组</h3><blockquote><p>返回值是<code>OrderedMap</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([&#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: <span class="number">111</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;, &#123;<span class="attr">v</span>: <span class="number">0</span>, <span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;&#125;, &#123;<span class="attr">v</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">333</span>&#125;]).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap &#123;111: Array[1], 333: Array[2], Map &#123; "b": List [ 1, 2, 3 ] &#125;: Array[2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">c</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;, <span class="attr">d</span>: &#123;<span class="attr">a5</span>: <span class="number">334</span>&#125;&#125;).groupBy(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.get(<span class="string">'a5'</span>)</span><br><span class="line">&#125;).toJS());</span><br><span class="line"><span class="comment">// OrderedMap  &#123;333: &#123;b: &#123;a5: 333&#125;, a: &#123;a5: 333&#125;&#125;, 334: &#123;c: &#123;a5: 334&#125;, d: &#123;a5: 334&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="flip-Map-特有翻转"><a href="#flip-Map-特有翻转" class="headerlink" title="flip() Map 特有翻转"></a>flip() Map 特有翻转</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="string">'b1'</span>, <span class="attr">a</span>: <span class="string">'a1'</span>, <span class="attr">c</span>: <span class="string">'c1'</span>, <span class="attr">d</span>: <span class="string">'d1'</span>&#125;).flip().toJS()); <span class="comment">// &#123;b1: "b", a1: "a", c1: "c", d1: "d"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="连接-concat"><a href="#连接-concat" class="headerlink" title="连接 concat()"></a>连接 concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6, 111, 222, 333, 444, 555, 666]</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//[1, 2, 3, 4, 5, 6] [111, 222, 333, 444, 555, 666]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">const</span> $test1 = Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> $test2 = Immutable.fromJS(&#123;<span class="attr">b1</span>: <span class="number">22</span>, <span class="attr">b</span>: <span class="number">34</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($test1.concat($test2).toJS()); <span class="comment">//&#123;b: 34, a: Object, c: 3, d: 5, b1: 22&#125; 属性 b 被覆盖</span></span><br><span class="line"><span class="built_in">console</span>.log($test1.toJS(), $test2.toJS()); <span class="comment">//&#123;b: 2, a: &#123;a1: &#123;a5: 333&#125;, c: 3, d: 5&#125; b1: 22, b: 34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><strong>1、转换为原生类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, Map]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toArray());<span class="comment">// [1, 2, 3, 4, 5, 6, List]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">1234</span>, <span class="number">22</span>]&#125;&#125;]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: Map&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">1234</span>, <span class="number">22</span>]]).toObject());<span class="comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// 浅层</span></span><br><span class="line"><span class="comment">// toArray</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, Map, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toArray());<span class="comment">// [2, List, 3, 5]</span></span><br><span class="line"><span class="comment">// toObject</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: &#123;<span class="attr">a1</span>: &#123;<span class="attr">a5</span>: <span class="number">333</span>&#125;, <span class="attr">a3</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">5</span>&#125;).toObject());<span class="comment">// &#123;b: 2, a: Map, c: 3, d: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Immutable.fromJS(&#123;<span class="attr">b</span>: <span class="number">2</span>, <span class="attr">a</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]&#125;).toObject());<span class="comment">// &#123;b: 2, a: List&#125;</span></span><br><span class="line"><span class="comment">//深层</span></span><br><span class="line"><span class="comment">// 就是一直在用的 toJS(); 不到万不得已，尽量不用。</span></span><br></pre></td></tr></table></figure><p><strong>2、转换为其他ImmutableJS数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toMap()</span></span><br><span class="line"><span class="comment">// toOrderedMap()</span></span><br><span class="line"><span class="comment">// toSet()</span></span><br><span class="line"><span class="comment">// toOrderedSet()</span></span><br><span class="line"><span class="comment">// toList()</span></span><br><span class="line"><span class="comment">// toStack()</span></span><br></pre></td></tr></table></figure><h2 id="七、和React-Redux-架构的结合"><a href="#七、和React-Redux-架构的结合" class="headerlink" title="七、和React Redux 架构的结合"></a>七、和React Redux 架构的结合</h2><blockquote><p>利用 <code>immutable.js</code> 不可变的特性，可以极大的优化<code>React render</code>的冗余执行。<code>React</code> 官方提供的<code>PureRenderMixin</code>是浅比较</p></blockquote><p><strong>1、immutable-pure-render-decorator</strong></p><blockquote><p>专门针对<code>immutable</code>的<code>PureRenderMixin</code>，用来装饰<code>React</code>组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pureRenderDecorator <span class="keyword">from</span> <span class="string">'../../../widgets/libs/immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line">@pureRenderDecorator</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PartA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// 舍弃React.addons.PureRenderMixin</span></span><br><span class="line">        <span class="comment">// this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件PartA，render执行了'</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">this</span>.props.data;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;我是组件PartA&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;p&gt;&#123;data.toJSON ? JSON.stringify(data.toJSON()) : data&#125;&lt;/</span>p&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>section&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、优化shouldComponentUpdate()</strong></p><blockquote><p>我们都知道官方提供的<code>React.addons.PureRenderMixin</code>提供的<code>shouldComponentUpdate()</code>，只能进行浅比较，对于引用类型<code>Object</code>、<code>Array</code>比较无力，而如果使用<code>Immutable</code>的<code>Map</code>和<code>List</code>替换<code>Object</code>、<code>Array</code>，则可以使用<code>Immutable.is()</code>来比较两个引用类型，从而补充了<code>React.addons.PureRenderMixin</code>的漏洞。</p></blockquote><p><strong>3、高阶组件封装</strong></p><blockquote><p>对于使用<code>immutable.js</code>的项目，在应用公共组件的时候，由于公共组件的内部实现一定是原<code>生</code>JS<code>数据，所以我们只能传递原生</code>JS<code>数据到公共组件，但是如果转换成了原生</code>JS<code>数据，就又会出现&quot;</code>React.addons.PureRenderMixin<code>提供的</code>shouldComponentUpdate()`是浅比较”问题，对此可以使用下面的高阶组件进行封装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="comment">// 通过Immutable.is 封装过的 shouldComponentUpdate</span></span><br><span class="line"><span class="keyword">import</span> &#123;shouldComponentUpdate&#125; <span class="keyword">from</span> <span class="string">'../immutable-pure-render-decorator'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ComposedComponent =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.shouldComponentUpdate = shouldComponentUpdate.bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="keyword">this</span>.props.toJS ? <span class="keyword">this</span>.props.toJS() : <span class="keyword">this</span>.props;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ComposedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>3、Demo</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;React&#125; <span class="keyword">from</span> <span class="string">'base'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> highComponent <span class="keyword">from</span> <span class="string">'../../../../widgets/libs/utils/highComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'../../actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共组件</span></span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'@alife/dialog'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import Immutable from 'immutable';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        open: state.getIn([<span class="string">'dialog'</span>, <span class="string">'open'</span>]),</span><br><span class="line">        title: state.getIn([<span class="string">'dialog'</span>, <span class="string">'title'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onPrimaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        onSecondaryTouchTap: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            dispatch(actions.toggleDialog(<span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(highComponent(Dialog))<span class="comment">//通过高阶组件封装</span></span><br></pre></td></tr></table></figure><h2 id="八、思维导图总结API"><a href="#八、思维导图总结API" class="headerlink" title="八、思维导图总结API"></a>八、思维导图总结API</h2><ul><li><a href="https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da" target="_blank" rel="noopener">https://www.processon.com/view/link/5a12c0ede4b0d53d979b33da</a></li></ul><h2 id="九、更多参考"><a href="#九、更多参考" class="headerlink" title="九、更多参考"></a>九、更多参考</h2><ul><li>facebook.github.io/immutable-js/docs/</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;从问题说起：熟悉
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="Immutable" scheme="http://yoursite.com/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>React之React Router 4（十一）</title>
    <link href="http://yoursite.com/2017/11/20/react-study-router-4-xx/"/>
    <id>http://yoursite.com/2017/11/20/react-study-router-4-xx/</id>
    <published>2017-11-19T16:06:10.000Z</published>
    <updated>2018-03-29T15:27:26.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、React-router-V4版本修改内容及一些坑"><a href="#一、React-router-V4版本修改内容及一些坑" class="headerlink" title="一、React-router V4版本修改内容及一些坑"></a>一、React-router V4版本修改内容及一些坑</h2><p><strong>1、所有组件更改为从react-router-dom导入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"><span class="keyword">import</span> &#123;Router,Route,hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.xx写法</span></span><br><span class="line"><span class="comment">//v4</span></span><br><span class="line"><span class="keyword">import</span> &#123;Route,BrowserRouter <span class="keyword">as</span> Router, Switch&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果搭配redux，你还需要使用react-router-redux</span></span><br></pre></td></tr></table></figure><p><strong>2、将所有<router>替换为<browserrouter></browserrouter></router></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2</span></span><br><span class="line"> &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;PCIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;PCNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;PCUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"> &lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在需要更改为<code>BrowserRouter</code></p></blockquote><ul><li>这里的代码不仅仅是将<code>Router</code>替换为<code>BrowserRouter</code>,而且还把所有的<code>Route</code>中用<code>Switch</code>包裹起来.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v4</span></span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">   &lt;Route exact path=<span class="string">"/"</span> component=&#123;MobileIndex&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/details/:uniqueky"</span> component=&#123;MobileNewsDetails&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">   &lt;Route path=<span class="string">"/usercenter"</span> component=&#123;MobileUserCenter&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>BrowserRouter&gt;</span><br></pre></td></tr></table></figure><p><strong>3、<browserrouter>只能有一个子节点</browserrouter></strong></p><blockquote><p><code>&lt;BroserRouter&gt;</code>只能有一个子节点,所以官网建议的是使用<code>&lt;Switch&gt;</code>进行包裹</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line">&lt;Route path=<span class="string">'/'</span> component=&#123;App&#125;&gt;</span><br><span class="line"> &lt;IndexRoute component=&#123;Home&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line"> &lt;Route path=<span class="string">'contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line"> &lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/about'</span> component=&#123;About&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/contact'</span> component=&#123;Contact&#125; /&gt;</span><br><span class="line"> &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p><strong>4、最坑的地方:在当前目录下的文件路径不再使用<code>./</code>, 而是直接用<code>/.</code></strong></p><blockquote><p>在进行文件引用的时候 ,<code>./src/js</code>的写法需要更改文’<code>/src/js</code>‘, 这是更改之后最坑的地方</p></blockquote><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><blockquote><p><code>react-router-dom</code>暴露出<code>react-router</code>中暴露的对象与方法，因此你只需要安装并引用<code>react-router-dom</code>即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><h2 id="三、路由器-Router"><a href="#三、路由器-Router" class="headerlink" title="三、路由器(Router)"></a>三、路由器(Router)</h2><blockquote><p>在你开始项目前，你需要决定你使用的路由器的类型。对于网页项目，存在<code>&lt;BrowserRouter&gt;</code>与<code>&lt;HashRouter&gt;</code>两种组件。当存在服务器来管理动态请求时，需要使用<code>&lt;BrowserRouter&gt;</code>组件，而<code>&lt;HashRouter&gt;</code>被用于静态网站。通常，我们更倾向选择<code>&lt;BrowserRouter&gt;</code>，但如果你的网站仅用来呈现静态文件，那么<code>&lt;HashRouter&gt;</code>将会是一个好选择</p></blockquote><h2 id="四、历史-History"><a href="#四、历史-History" class="headerlink" title="四、历史(History)"></a>四、历史(History)</h2><blockquote><p>每个路由器都会创建一个<code>history</code>对象并用其保持追踪当前location[注1]并且在有变化时对网站进行重新渲染。这个<code>history</code>对象保证了<code>React Router</code>提供的其他组件的可用性，所以其他组件必须在<code>router</code>内部渲染。一个<code>React Router</code>组件如果向父级上追溯却找不到<code>router</code>组件，那么这个组件将无法正常工作</p></blockquote><h2 id="五、渲染"><a href="#五、渲染" class="headerlink" title="五、渲染"></a>五、渲染<router></router></h2><blockquote><p>路由器组件无法接受两个及以上的子元素。基于这种限制的存在，创建一个<code>&lt;App&gt;</code>组件来渲染应用其余部分是一个有效的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line">ReactDOM.render((</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><h2 id="六、-lt-App-gt"><a href="#六、-lt-App-gt" class="headerlink" title="六、&lt;App&gt;"></a>六、<code>&lt;App&gt;</code></h2><blockquote><p>应用通过<code>&lt;App&gt;</code>组件定义。简化一下，我们将应用拆分成两个部分。<code>&lt;Header&gt;</code>组件包含网站的导航链接。<code>&lt;Main&gt;</code>组件则呈现其余内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;Main /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="七、路由-Route"><a href="#七、路由-Route" class="headerlink" title="七、路由(Route)"></a>七、路由(Route)</h2><blockquote><p><code>&lt;Route&gt;</code>组件是<code>React Router</code>中主要的结构单元。在任意位置只要匹配了<code>URL</code>的路径名(<code>pathname</code>)你就可以创建<code>&lt;Route&gt;</code>元素进行渲染</p></blockquote><p><strong>1、路径(Path)</strong></p><blockquote><p><code>&lt;Route&gt;</code>接受一个数为<code>string</code>类型的<code>path</code>，该值路由匹配的路径名的类型。例如：<code>&lt;Route path=&#39;/roster&#39;/&gt;</code>会匹配以<code>/roster</code>开头的路径名。在当前<code>path</code>参数与当前<code>location</code>的路径相匹配时，路由就会开始渲染<code>React</code>元素。若不匹配，路由不会进行任何操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/roster'</span>/&gt;</span><br><span class="line"><span class="comment">// 当路径名为'/'时, path不匹配</span></span><br><span class="line"><span class="comment">// 当路径名为'/roster'或'/roster/2'时, path匹配</span></span><br><span class="line"><span class="comment">// 当你只想匹配'/roster'时，你需要使用"exact"参数</span></span><br><span class="line"><span class="comment">// 则路由仅匹配'/roster'而不会匹配'/roster/2'</span></span><br><span class="line">&lt;Route exact path=<span class="string">'/roster'</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：在匹配路由时，<code>React Router</code>只关注<code>location</code>的路径名。当<code>URL</code>如下时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/my-projects/one?extra=false</span></span><br></pre></td></tr></table></figure><ul><li><code>React Router</code>去匹配的只是<code>&#39;/my-projects/one&#39;</code>这一部分</li></ul><p><strong>2、匹配路径</strong></p><blockquote><p><code>path-to-regexp</code>包用来决定<code>route</code>元素的<code>path</code>参数与当前<code>location</code>是否匹配。它将路径字符串编译成正则表达式，并与当前<code>location</code>的路径名进行匹配比较</p></blockquote><ul><li>当路由地址匹配成功后，会创建一个含有以下属性的<code>match</code>对象：<ul><li><code>url</code> ：与当前<code>location</code>路径名所匹配部分</li><li><code>path</code>：路由的地址</li><li><code>isExact</code> ：<code>path</code> 是否等于 <code>pathname</code></li><li><code>params</code>：从<code>path-to-regexp</code>获取的路径中取出的值都被包含在这个对象中</li></ul></li></ul><p>使用<a href="https://pshrmn.github.io/route-tester/#/" target="_blank" rel="noopener">route tester</a>这款工具来对路由与URL进行检验</p><p><strong>3、创建你的路由</strong></p><blockquote><p>可以在路由器(router)组件中的任意位置创建多个<code>&lt;Route&gt;</code>，但通常我们会把它们放在同一个位置。使用<code>&lt;Switch&gt;</code>组件来包裹一组<code>&lt;Route&gt;</code>。<code>&lt;Switch&gt;</code>会遍历自身的子元素（即路由）并对第一个匹配当前路径的元素进行渲染</p></blockquote><ul><li>我们希望匹配一下路径<ul><li><code>/</code>：主页</li><li><code>/roster</code>： 团体列表</li><li><code>/roster/:number</code>：运动员页面，使用运动员的编号作为标识</li><li><code>/schedule</code>：团队的赛程表</li></ul></li></ul><p>为了在应用中能匹配路径，在创建<code>&lt;Route&gt;</code>元素时必须带有需要匹配的<code>path</code>作为参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &#123;<span class="comment">/* both /roster and /roster/:number begin with /roster */</span>&#125;</span><br><span class="line">  &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、<code>&lt;Route&gt;</code>是如何渲染的？</strong></p><blockquote><p>当一个路由的<code>path</code>匹配成功后，路由用来确定渲染结果的参数有三种。只需要提供其中一个即可</p></blockquote><ul><li><code>component</code> ： 一个<code>React</code>组件。当带有<code>component</code>参数的<code>route</code>匹配成功后，<code>route</code>会返回一个新的元素，其为<code>component</code>参数所对应的<code>React</code>组件（使用<code>React.createElement</code>创建）。</li><li><code>render</code> ： 一个返回<code>React element</code>的函数。当匹配成功后调用该函数。该过程与传入<code>component</code>参数类似，并且对于行级渲染与需要向元素传入额外参数的操作会更有用。</li><li><code>children</code> ： 一个返回<code>React element</code>的函数。与上述两个参数不同，无论<code>route</code>是否匹配当前<code>location</code>，其都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">'/page'</span> component=&#123;Page&#125; /&gt;</span><br><span class="line"><span class="keyword">const</span> extraProps = &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> render=&#123;(props) =&gt; (</span><br><span class="line">  &lt;Page &#123;...props&#125; data=&#123;extraProps&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line">&lt;Route path=<span class="string">'/page'</span> children=&#123;(props) =&gt; (</span><br><span class="line">  props.match</span><br><span class="line">    ? <span class="xml"><span class="tag">&lt;<span class="name">Page</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line">    : &lt;EmptyPage &#123;...props&#125;/&gt;</span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通常<code>component</code>参数与<code>render</code>参数被更经常地使用。<code>children</code>参数偶尔会被使用，它更常用在<code>path</code>无法匹配时呈现的’空’状态。在本例中并不会有额外的状态，所以我们将使用<code>&lt;Route&gt;</code>的<code>component</code>参数</p></blockquote><ul><li>通过<code>&lt;Route&gt;</code>渲染的元素会被传入一些参数。分别是<code>match</code>对象，当前<code>location</code>对象以及<code>history</code>对象（由<code>router</code>创建）</li></ul><p><strong>5、<code>&lt;Main&gt;</code></strong></p><blockquote><p>现在我们清楚了根路由的结构，我们需要实际渲染我们的路由。对于这个应用，我们将会在<code>&lt;Main&gt;</code>组件中渲染<code>&lt;Switch&gt;</code>与<code>&lt;Route&gt;</code>，这一过程会将<code>route</code>匹配生成的<code>HTML</code>放在<code>&lt;main&gt;</code>节点中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Main = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/'</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/roster'</span> component=&#123;Roster&#125;/&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/schedule'</span> component=&#123;Schedule&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/m</span>ain&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：主页路由包含额外参数。该参数用来保证路由能准确匹配<code>path</code></li></ul><p><strong>6、嵌套路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v3</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, Link, browserHistory &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">3</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/user<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &#123;props.children&#125;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;Router history=&#123;browserHistory&#125;&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path="</span>/<span class="string">" component=&#123;PrimaryLayout&#125;&gt;</span></span><br><span class="line"><span class="string">      &lt;IndexRoute component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><ul><li><strong>上面代码中有几个关键的点在 V4 中就不复存在了</strong><ul><li>集中式 <code>router</code></li><li>通过 <code>&lt;Route&gt;</code> 嵌套，实现<code>Layout</code> 和 <code>page</code> 嵌套</li><li><code>Layout</code> 和 <code>page</code>组件 是作为 <code>router</code> 的一部分</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v4</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;header&gt;Our React Router <span class="number">4</span> App&lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to="</span>/User<span class="string">"&gt;User&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;main&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/<span class="string">" exact component=&#123;HomePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/user<span class="string">" component=&#123;UsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const HomePage = () =&gt; &lt;h1&gt;Home Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string">const UsersPage = () =&gt; &lt;h1&gt;User Page&lt;/h1&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const App = () =&gt;</span></span><br><span class="line"><span class="string">  &lt;BrowserRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;PrimaryLayout /&gt;</span></span><br><span class="line"><span class="string">  &lt;/BrowserRouter&gt;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render(&lt;App /&gt;, document.getElementById("</span>root<span class="string">"));</span></span><br></pre></td></tr></table></figure><blockquote><p>首先，<code>V3</code> 中的 <code>router</code> 不在了，在 <code>V3</code> 中，我们是将整个庞大的<code>router</code> 直接丢给 <code>DOM</code>，而在 <code>V4</code> 中，除了 <code>BrowserRouter</code>， 我们丢给 <code>DOM</code> 的是我们的应用程序本身</p></blockquote><ul><li><code>V4</code>中，我们不再使用 <code>{props.children}</code> 来嵌套组件了，替代的 <code>&lt;Route&gt;</code>，当 <code>route</code>匹配时，子组件会被渲染到 <code>&lt;Route&gt;</code>书写的地方</li></ul><ul><li>基本使用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-cec7efc659034ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>react-router 4.0</code> 对于接受参数采用 <code>{ this.props.match.params.id }</code> 如下例子：<code>&lt;Route path=&quot;list/:id&quot;&gt;&lt;/Router&gt;</code>、 <code>&lt;Link to=&quot;list/123456&quot;&gt;&lt;/Link&gt;</code></p></blockquote><ul><li>一个完整的嵌套路由的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#123; Router, Route, Link, Switch &#125; from ‘react-router‘;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  HashRouter,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="keyword">from</span> ‘react-router-dom‘;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;App&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;&lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/about<span class="string">"&gt;About&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;Link to="</span>/inbox<span class="string">"&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const About = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;About&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Home = () =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Home&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Message = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;new messages&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;match.params.id&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Inbox = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Topics&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;Route path=&#123;`$&#123;match.url&#125;/messages/:id`&#125; component=&#123;Message&#125;/&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(</span></span><br><span class="line"><span class="string">  (&lt;HashRouter&gt;</span></span><br><span class="line"><span class="string">    &lt;App&gt;</span></span><br><span class="line"><span class="string">        &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/about<span class="string">" component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/inbox<span class="string">" component=&#123;Inbox&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/App&gt;</span></span><br><span class="line"><span class="string">  &lt;/HashRouter&gt;),</span></span><br><span class="line"><span class="string">  document.getElementById(‘root‘)</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><ul><li>嵌套布局</li></ul><blockquote><p>方式一</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> exact component=&#123;BrowseUsersPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user/:userId"</span> component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> exact component=&#123;BrowseProductsPage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products/:productId"</span> component=&#123;ProductProfilePage&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>userId</code> 通过 <code>props.match.params</code> 获取</li><li><code>props.match</code> 赋予给了 <code>&lt;Route&gt;</code> 中的任何组件。</li><li>除此之外，如果组件不通过<code>&lt;Route&gt;</code> 来渲染，要访问 <code>props.match</code>，可以使用 <code>withRouter()</code>高阶组件来实现</li></ul><blockquote><p>方式二</p></blockquote><ul><li>解决了第一种方式中的生命周期，重复渲染的问题</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">      &lt;PrimaryHeader /&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/user"</span> component=&#123;UserSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/products"</span> component=&#123;ProductSubLayout&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/m</span>ain&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>我们用 <code>2</code>个 <code>routes</code> 替换之前的 <code>4</code>个<code>routes</code></li><li>注意，这里我们没有再使用 <code>exact</code>，因为，我们希望 <code>/user</code> 可以匹配任何以 <code>/user</code> 开始的 <code>route</code>，<code>products</code> 同理</li></ul><blockquote><p>使用这种策略，子布局也开始承担起了渲染 <code>routes</code> 的责任，现在，<code>UserSubLayout</code> 长这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/u</span>ser<span class="string">" exact component=&#123;BrowseUsersPage&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/user/:userId<span class="string">" component=&#123;UserProfilePage&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>但有一点值得注意的是，<code>routes</code> 需要识别它的完整路径才能匹配，为了减少我们的重复输入，我们可以使用 <code>props.match.path</code>来代替</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path=&#123;props.match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&#123;<span class="string">`<span class="subst">$&#123;props.match.path&#125;</span>/:userId`</span>&#125;</span><br><span class="line">          component=&#123;UserProfilePage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><p><strong>7、路径参数</strong></p><p>有时路径名中存在我们需要获取的参数。例如，在运动员界面，我们需要获取运动员的编号。我们可以向<code>route</code>的路径字符串中添加<code>path</code>参数</p><ul><li>如<code>&#39;/roster/:number&#39;</code>中<code>:number</code>这种写法意味着<code>/roster/</code>后的路径名将会被获取并存在<code>match.params.number</code>中。例如，路径名<code>&#39;/roster/6&#39;</code>会获取到一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">number</span>: <span class="string">'6'</span> &#125; <span class="comment">// 注获取的值是字符串类型的</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Player&gt;</code>组件可以使用<code>props.match.params</code>对象来确定需要被渲染的运动员的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回运动员对象的API</span></span><br><span class="line"><span class="keyword">import</span> PlayerAPI <span class="keyword">from</span> <span class="string">'./PlayerAPI'</span></span><br><span class="line"><span class="keyword">const</span> Player = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> player = PlayerAPI.get(</span><br><span class="line">    <span class="built_in">parseInt</span>(props.match.params.number, <span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span> (!player) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Sorry, but the player was not found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;player.name&#125; (#&#123;player.number&#125;)&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;player.position&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>除了<code>&lt;Player&gt;</code>组件，我们的页面还包含<code>&lt;FullRoster&gt;</code>, <code>&lt;Schedule&gt;</code>以及 <code>&lt;Home&gt;</code>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FullRoster = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        PlayerAPI.all().map(<span class="function"><span class="params">p</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;p.number&#125;&gt;</span><br><span class="line">            &lt;Link to=&#123;<span class="string">`/roster/<span class="subst">$&#123;p.number&#125;</span>`</span>&#125;&gt;&#123;p.name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>li&gt;</span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> Schedule = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;<span class="number">6</span>/<span class="number">5</span> @ Evergreens&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">8</span> vs Kickers&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;6/</span><span class="number">14</span> @ United&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">const Home = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1&gt;Welcome to the Tornadoes Website!&lt;/</span>h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="八、inclusive-routing"><a href="#八、inclusive-routing" class="headerlink" title="八、inclusive routing"></a>八、inclusive routing</h2><blockquote><p>当访问 <code>/user</code> 时，两个组价都会被渲染</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const PrimaryLayout = () =&gt;</span><br><span class="line">  &lt;div className=&quot;primary-layout&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Our React Router 4 App</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersMenu&#125; /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;/user&quot; component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;;</span><br></pre></td></tr></table></figure><h2 id="九、Exclusive-Routing"><a href="#九、Exclusive-Routing" class="headerlink" title="九、Exclusive Routing"></a>九、Exclusive Routing</h2><blockquote><p>如果你只想匹配一个 <code>route</code>，那么你也可以使用 <code>&lt;Switch&gt;</code> 来 <code>exclusive routing</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrimaryLayout = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"primary-layout"</span>&gt;</span><br><span class="line">    &lt;PrimaryHeader /&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user/add"</span> component=&#123;UserAddPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/user"</span> component=&#123;UsersPage&#125; /&gt;</span><br><span class="line">        &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/m</span>ain&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><ul><li>在 <code>&lt;Switch&gt;</code> 中只有一个 <code>&lt;Route&gt;</code> 会被渲染，另外，我们还是要给 <code>HomePage</code>所在 <code>&lt;Route&gt;</code>添加 <code>exact</code>，否则，在访问 <code>/user</code> 或 <code>/user/add</code>的时候还是会匹配到 <code>/</code>，从而，只渲染 H<code>omePage</code></li><li>我们将 <code>/user/add</code>放在 <code>/user</code> 前面是保证正确匹配的很有策略性的一步，因为，<code>/user/add</code>会同时匹配 <code>/user</code>和 <code>/user/add</code></li><li>如果我们给每一个 <code>&lt;Route&gt;</code>都添加一个 <code>exact</code>，那就不用考虑上面的 策略 了，但不管怎样，现在至少知道了我们还有其它选择</li><li><code>&lt;Redirect&gt;</code>组件不用多说，执行浏览器重定向，但它在 <code>&lt;Switch&gt;</code> 中时，<code>&lt;Redirect&gt;</code>组件只会在 <code>routes</code> 匹配不成功的情况下渲染</li></ul><h2 id="十、Index-Routes”-和-“Not-Found”"><a href="#十、Index-Routes”-和-“Not-Found”" class="headerlink" title="十、Index Routes” 和 “Not Found”"></a>十、Index Routes” 和 “Not Found”</h2><blockquote><p><code>V4</code> 中也没有 <code>&lt;IndexRoute&gt;</code>，但 <code>&lt;Route exact&gt;</code>可以实现相同的功能，或者 <code>&lt;Switch&gt;</code>和 <code>&lt;Redirect&gt;</code> 重定向到默认的有效路径，甚至一个找不到的页面</p></blockquote><h2 id="十一、Link"><a href="#十一、Link" class="headerlink" title="十一、Link"></a>十一、Link</h2><blockquote><p>现在，我们应用需要在各个页面间切换。如果使用锚点元素（就是）实现，在每次点击时页面将被重新加载。<code>React Router</code>提供了<code>&lt;Link&gt;</code>组件用来避免这种状况的发生。当你点击<code>&lt;Link&gt;</code>时，<code>URL</code>会更新，组件会被重新渲染，但是页面不会重新加载</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/roster'</span>&gt;</span>Roster<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/schedule'</span>&gt;</span>Schedule<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>nav&gt;</span><br><span class="line">  &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Link&gt;</code>使用<code>&#39;to&#39;</code>参数来描述需要定位的页面。它的值即可是字符串也可是<code>location</code>对象（包含<code>pathname</code>，<code>search</code>，<code>hash</code>与<code>state</code>属性）。如果其值为字符床将会被转换为<code>location</code>对象。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> '/<span class="attr">roster</span>/<span class="attr">7</span>' &#125;&#125;&gt;</span>Player #7<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十二、Match"><a href="#十二、Match" class="headerlink" title="十二、Match"></a>十二、Match</h2><blockquote><p>正如我们上面看到的那样，<code>props.match</code> 可以帮我们获取 <code>userId</code> 和 <code>routes</code></p></blockquote><ul><li><code>match</code> 对象为我们提供了 <code>match.params</code>，<code>match.path</code>，和 <code>match.url</code> 等属性</li></ul><p><strong>1、match.path vs match.url</strong></p><blockquote><p>最开始，可能觉得这两者的区别并不明显，控制台经常出现相同的输出，比如，访问 /user</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayout = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match.url)   <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="built_in">console</span>.log(match.path)  <span class="comment">// output: "/user"</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">      &lt;aside&gt;</span><br><span class="line">        &lt;UserNav /&gt;</span><br><span class="line">      &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path=&#123;match.path&#125; exact component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">          &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>match</code> 在组件的参数中被解构，意思就是我们可以使用 <code>match.path</code> 代替 <code>props.match.path</code></li><li>虽然我们看不到什么明显的差异，但需要明白的是 <code>match.url</code> 是浏览器 <code>URL</code> 的一部分，<code>match.path</code> 是我们为 <code>router</code> 书写的路径</li></ul><p><strong>2、如何选择</strong></p><ul><li>如果我们是构建 route 路径，那么肯定使用 match.path</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserComments = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    UserId: &#123;match.params.userId&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const UserSettings = (&#123; match &#125;) =&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    UserId: &#123;match.params.userId&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserProfilePage = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    User Profile:</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>/comments`</span>&#125; component=&#123;UserComments&#125; /&gt;</span><br><span class="line">    &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/settings`</span>&#125; component=&#123;UserSettings&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后，我们按下面方式来访问</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/<span class="number">5</span>/comments</span><br><span class="line">/user/<span class="number">5</span>/settings</span><br></pre></td></tr></table></figure><ul><li>实践后，我们发现，访问 comments 返回 undefined，访问 settings 返回 5</li></ul><p><strong>3、避免 Match 冲突</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSubLayou = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span></span><br><span class="line">  &lt;div className=<span class="string">"user-sub-layout"</span>&gt;</span><br><span class="line">    &lt;aside&gt;</span><br><span class="line">      &lt;UserNav /&gt;</span><br><span class="line">    &lt;<span class="regexp">/aside&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="primary-content"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route exact path=&#123;match.path&#125; component=&#123;BrowseUsersPage&#125; /</span>&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/add`</span>&#125; component=&#123;AddUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId/edit`</span>&#125; component=&#123;EditUserPage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;match.path&#125;</span>/:userId`</span>&#125; component=&#123;UserProfilePage&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们使用 <code>${match.path}/:userId(\\d+)</code>作为 <code>UserProfilePage</code> 对应的 <code>path</code>，保证 <code>:userId</code> 是一个数字，可以避免与 <code>/users/add</code>的冲突，这样，将其所在的 <code>&lt;Route&gt;</code> 丢到最前面去也能正常访问 <code>add</code> 页面  </p></blockquote><h2 id="十三、Authorized-Route"><a href="#十三、Authorized-Route" class="headerlink" title="十三、Authorized Route"></a>十三、Authorized Route</h2><blockquote><p>在应用程序中限制未登录的用户访问某些路由是非常常见的，还有对于授权和未授权的用户 UI 也可能大不一样，为了解决这样的需求，我们可以考虑为应用程序设置一个主入口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Switch&gt;</span><br><span class="line">            &lt;Route path=<span class="string">"/auth"</span> component=&#123;UnauthorizedLayout&#125; /&gt;</span><br><span class="line">            &lt;AuthorizedRoute path=<span class="string">"/app"</span> component=&#123;PrimaryLayout&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>BrowserRouter&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，我们首先会去选择应用程序在哪个顶级布局中，比如，<code>/auth/login</code> 和 <code>/auth/forgot-password</code> 肯定在 <code>UnauthorizedLayout</code> 中，另外，当用户登陆时，我们将判断所有的路径都有一个 /app 前缀以确保是否登录。如果用户访问 <code>/app</code> 开头的页面但并没有登录，我们将会重定向到登录页面</p></blockquote><h2 id="十四、-lt-Link-gt"><a href="#十四、-lt-Link-gt" class="headerlink" title="十四、&lt;Link&gt;"></a>十四、<code>&lt;Link&gt;</code></h2><blockquote><p>和之前版本没太大区别，重点看下组件属性</p></blockquote><ul><li><code>to（string/object）</code>：要跳转的路径或地址；</li><li><code>replace（bool）</code>：为 <code>true</code> 时，点击链接后将使用新地址替换掉访问历史记录里面的原地址；为 <code>false</code> 时，点击链接后将在原有访问历史记录的基础上添加一个新的纪录。默认为<code>false</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Link组件示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// to为string</span></span><br><span class="line">&lt;Link to=<span class="string">"/about"</span>&gt;关于&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ to为obj</span></span><br><span class="line"><span class="regexp">&lt;Link to=&#123;&#123;</span></span><br><span class="line"><span class="regexp">  pathname: '/</span>courses<span class="string">',</span></span><br><span class="line"><span class="string">  search: '</span>?sort=name<span class="string">',</span></span><br><span class="line">  hash: '#the-hash',</span><br><span class="line">  state: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace </span></span><br><span class="line">&lt;Link to=<span class="string">"/courses"</span> replace /&gt;</span><br></pre></td></tr></table></figure><p><strong><code>&lt;NavLink&gt;</code></strong></p><blockquote><p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code> 的一个特定版本, 会在匹配上当前 <code>URL</code> 的时候会给已经渲染的元素添加样式参数，组件属性</p></blockquote><ul><li><code>activeClassName（string）</code>：设置选中样式，默认值为<code>active</code>；</li><li><code>activeStyle（object）</code>：当元素被选中时, 为此元素添加样式；</li><li><code>exact（bool）</code>：为 <code>true</code> 时, 只有当地址完全匹配 <code>class</code> 和 <code>style</code> 才会应用；</li><li><code>strict（bool）</code>：为 <code>true</code> 时，在确定位置是否与当前 <code>URL</code> 匹配时，将考虑位置 - <code>pathname</code> 后的斜线；</li><li><code>isActive（func）</code>：判断链接是否激活的额外逻辑的功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// activeClassName选中时样式为selected</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/faq"</span></span><br><span class="line">  activeClassName=<span class="string">"selected"</span></span><br><span class="line">&gt;FAQs&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 选中时样式为activeStyle的样式设置</span></span><br><span class="line"><span class="regexp">&lt;NavLink</span></span><br><span class="line"><span class="regexp">  to="/</span>faq<span class="string">"</span></span><br><span class="line"><span class="string">  activeStyle=&#123;&#123;</span></span><br><span class="line"><span class="string">    fontWeight: 'bold',</span></span><br><span class="line"><span class="string">    color: 'red'</span></span><br><span class="line"><span class="string">   &#125;&#125;</span></span><br><span class="line"><span class="string">&gt;FAQs&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 当event id为奇数的时候，激活链接</span></span><br><span class="line"><span class="string">const oddEvent = (match, location) =&gt; &#123;</span></span><br><span class="line"><span class="string">  if (!match) &#123;</span></span><br><span class="line"><span class="string">    return false</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  const eventID = parseInt(match.params.eventID)</span></span><br><span class="line"><span class="string">  return !isNaN(eventID) &amp;&amp; eventID % 2 === 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;NavLink</span></span><br><span class="line"><span class="string">  to="</span>/events/<span class="number">123</span><span class="string">"</span></span><br><span class="line"><span class="string">  isActive=&#123;oddEvent&#125;</span></span><br><span class="line"><span class="string">&gt;Event 123&lt;/NavLink&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十五、-lt-Switch-gt"><a href="#十五、-lt-Switch-gt" class="headerlink" title="十五、&lt;Switch&gt;"></a>十五、<code>&lt;Switch&gt;</code></h2><blockquote><p>该组件用来渲染匹配地址的第一个<code>&lt;Route&gt;</code>或者<code>&lt;Redirect&gt;</code>。那么它与使用一堆<code>route</code>又有什么区别呢</p></blockquote><ul><li><code>&lt;Switch&gt;</code>的独特之处是独它仅仅渲染一个路由。相反地，每一个包含匹配地址(<code>location</code>)的<code>&lt;Route&gt;</code>都会被渲染</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/:user"</span> component=&#123;User&#125;/&gt;</span><br><span class="line">  &lt;Route component=&#123;NoMatch&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在，如果我们处于<code>/about</code>，<code>&lt;Switch&gt;</code>将开始寻找匹配的<code>&lt;Route&gt;</code>。<code>&lt;Route path=&quot;/about&quot;/&gt;</code> 将被匹配， <code>&lt;Switch&gt;</code>将停止寻找匹配并渲染<code>&lt;About&gt;</code>。同样，如果我们处于<code>/michael</code>，<code>&lt;User&gt;</code>将被渲染</p></blockquote><h2 id="十六、更多参考"><a href="#十六、更多参考" class="headerlink" title="十六、更多参考"></a>十六、更多参考</h2><ul><li><a href="https://reacttraining.com/react-router/web/guides/philosophy" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/guides/philosophy</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、React-router-V4版本修改内容及一些坑&quot;&gt;&lt;a href=&quot;#一、React-router-V4版本修改内容及一些坑&quot; class=&quot;headerlink&quot; title=&quot;一、React-router V4版本修改内容及一些坑&quot;&gt;&lt;/a&gt;一、Rea
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="Router" scheme="http://yoursite.com/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>Redux之react结合redux实战篇（十）</title>
    <link href="http://yoursite.com/2017/11/19/redux-study-combine-react-and-redux/"/>
    <id>http://yoursite.com/2017/11/19/redux-study-combine-react-and-redux/</id>
    <published>2017-11-19T08:40:24.000Z</published>
    <updated>2018-03-22T11:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以<code>TODO</code>为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。</p></blockquote><h2 id="一、定义constants"><a href="#一、定义constants" class="headerlink" title="一、定义constants"></a>一、定义constants</h2><blockquote><p>这一步不是必须的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量统一保存，便于管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOGGLE_TODO = <span class="string">'TOGGLE_TODO'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_VISIBILITY = <span class="string">'SET_VISIBILITY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//controll todo wheher show or hide</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ALL = <span class="string">'SHOW_ALL'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_ACTIVE = <span class="string">'SHOW_ACTIVE'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SHOW_COMPLETED = <span class="string">'SHOW_COMPLETED'</span>;</span><br></pre></td></tr></table></figure><h2 id="二、定义actionCreator"><a href="#二、定义actionCreator" class="headerlink" title="二、定义actionCreator"></a>二、定义actionCreator</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义action creator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextTodo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>)=&gt;</span>(&#123;</span><br><span class="line">  type:actionType.ADD_TODO,</span><br><span class="line">  id:nextTodo++,</span><br><span class="line">  text</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toggleTodo = <span class="function">(<span class="params">id</span>)=&gt;</span>(&#123;</span><br><span class="line">  type:actionType.TOGGLE_TODO,</span><br><span class="line">  id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setVisibilityFilter = <span class="function">(<span class="params">filter</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type:actionType.SET_VISIBILITY,</span><br><span class="line">    filter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、定义reducer"><a href="#三、定义reducer" class="headerlink" title="三、定义reducer"></a>三、定义reducer</h2><p><strong>拆分reducer</strong></p><ul><li><code>SetVisibility.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理TODO可见与不可见的reducer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始状态是自己设置的 后面的状态会转化</span></span><br><span class="line"><span class="comment">// 接收当前状态(设置默认的过滤SHOW_ALL，如设置某些选项卡的active一样)，和action返回新的state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> visibilityFilter = <span class="function">(<span class="params">state=<span class="string">'SHOW_ALL'</span>,action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionType.SET_VISIBILITY:</span><br><span class="line">      <span class="keyword">return</span> action.filter;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addTodo.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义处理action的reducers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入当前的状态空数、action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [],action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123; <span class="comment">// 匹配用户触发的actionType</span></span><br><span class="line">    <span class="keyword">case</span> actionType.ADD_TODO:</span><br><span class="line">    <span class="comment">// 合并上一次的状态和当前的状态 返回todos数组</span></span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,<span class="comment">//把数组展开合并</span></span><br><span class="line">        &#123;</span><br><span class="line">          id:action.id,</span><br><span class="line">          text:action.text,</span><br><span class="line">          completed:<span class="literal">false</span><span class="comment">//用户控制TODO是否处于点击完成的状态 默认false 没点击</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      <span class="comment">// TODO列表来回切换 遍历add_todo返回的数组 通过completed来判断</span></span><br><span class="line">    <span class="keyword">case</span> actionType.TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span>=&gt;</span>(todo.id===action.id)?&#123;...todo,<span class="attr">completed</span>:!todo.completed&#125;:todo)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;<span class="comment">//匹配不到返回state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并reducer</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并reducers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;todos&#125; <span class="keyword">from</span> <span class="string">'./addTodo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;visibilityFilter&#125; <span class="keyword">from</span> <span class="string">'./SetVisibility'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  todos, <span class="comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、定义store"><a href="#四、定义store" class="headerlink" title="四、定义store"></a>四、定义store</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../reducers/index'</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store 用来存储状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(logger) <span class="comment">//处理日志中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="五、结合react-redux"><a href="#五、结合react-redux" class="headerlink" title="五、结合react-redux"></a>五、结合react-redux</h2><blockquote><p>这里忽略展示组件，完成源码看文章结尾</p></blockquote><ul><li>首先我们在<code>container</code>组件中处理好之前分解合并的那些<code>reducer</code>的键，然后在通过<code>connect</code>链接，传递给展示组件的属性使用</li></ul><p><strong>容器组件处理</strong></p><blockquote><p>react-todos/src/container/FilterLink.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理数组过滤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../components/Link'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setVisibilityFilter &#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的ownProps指的是 FilterLink</span></span><br><span class="line"><span class="comment">// 这里的state其实就是之前分解的todos，visibilityFilter</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    active:ownProps.filter === state.visibilityFilter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="comment">// 这里处理对应的事件，传递给展示组件的属性</span></span><br><span class="line">  onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(setVisibilityFilter(ownProps.filter))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Link);</span><br></pre></td></tr></table></figure><ul><li>分析<ul><li>这里通过<code>connect</code>组件把之前<code>reducer</code>处理的那些状态链接</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  todos, <span class="comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span><br><span class="line">  visibilityFilter</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>react-todos/src/container/VisibilityTodoList.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理可见于不可见组件的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;toggleTodo&#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionType <span class="keyword">from</span> <span class="string">'../constant/index'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(toggleTodo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// todos是返回的数组，filter是过滤的选项如SHOW_ALL SHOW_ACTIVE.</span></span><br><span class="line"><span class="keyword">const</span> getVisibilityTodos = <span class="function">(<span class="params">todos,filter</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(filter) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_ALL:</span><br><span class="line">      <span class="keyword">return</span> todos;</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_ACTIVE:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed);</span><br><span class="line">    <span class="keyword">case</span> actionType.SHOW_COMPLETED:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未知的'</span>+filter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把状态转化为展示组件的属性转递过去</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; state 也就是</span></span><br><span class="line"><span class="comment"> * export default CombineReducers(&#123;</span></span><br><span class="line"><span class="comment">  Todos,</span></span><br><span class="line"><span class="comment">  SetVisibility</span></span><br><span class="line"><span class="comment">  *&#125;);</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; ownProps 返回的容器组件本身的参数 如&lt;Filter name="poetries"&gt;此时的ownProps就是name了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: getVisibilityTodos(state.todos,state.visibilityFilter),</span><br><span class="line">    count:state.todos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果mapDispatchToProps是一个对象，它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，会被当作 Action creator ，返回的 Action 会由 Redux 自动发出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    onTodoClick: toggleTodo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><blockquote><p>react-todos/src/container/addTodos.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Addtodo的处逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;addTodo&#125; <span class="keyword">from</span> <span class="string">'../actions/index'</span>;</span><br><span class="line"><span class="keyword">import</span> AddTask <span class="keyword">from</span> <span class="string">'../components/addTodo'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> (&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  addTodo:addTodo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(AddTask);</span><br></pre></td></tr></table></figure><blockquote><p>到此分析完毕，展示组件就不分析了，展示组件本身是没有数据的，需要container处理传递</p></blockquote><p><strong>完整的源码</strong></p><blockquote><p><a href="https://github.com/poetries/react-todos" target="_blank" rel="noopener">https://github.com/poetries/react-todos</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以&lt;code&gt;TODO&lt;/code&gt;为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、定义constants&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Front-End" scheme="http://yoursite.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之源码分析（九）</title>
    <link href="http://yoursite.com/2017/11/19/redux-study-source-code-analysis/"/>
    <id>http://yoursite.com/2017/11/19/redux-study-source-code-analysis/</id>
    <published>2017-11-19T08:35:24.000Z</published>
    <updated>2018-03-22T11:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、index-js"><a href="#一、index-js" class="headerlink" title="一、index.js"></a>一、index.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/index.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/index.js</a></p></blockquote><ul><li>暴露了几个核心<code>API</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span>;</span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./utils/combineReducers'</span>;</span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./utils/bindActionCreators'</span>;</span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./utils/applyMiddleware'</span>;</span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./utils/compose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、createStore-js"><a href="#二、createStore-js" class="headerlink" title="二、createStore.js"></a>二、createStore.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/createStore.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/createStore.js</a></p></blockquote><ul><li><code>redux.createStore(reducer, initialState)</code> 传入了<code>reducer</code>、<code>initialState</code>，并返回一个<code>store</code>对象</li><li><code>store</code>对象对外暴露了<code>dispatch</code>、<code>getStat</code>e、<code>subscribe</code>方法</li><li><code>store</code>对象通过<code>getState()</code> 获取内部状态</li><li><code>initialState</code>为 <code>store</code> 的初始状态，如果不传则为undefined</li><li><code>store</code>对象通过<code>reducer</code>来修改内部状态</li><li><code>store</code>对象创建的时候，内部会主动调用<code>dispatch({ type: ActionTypes.INIT })</code>;来对内部状态进行初始化。通过断点或者日志打印就可以看到，<code>store</code>对象创建的同时，<code>reducer</code>就会被调用进行初始化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'./utils/isPlainObject'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * These are private action types reserved by Redux.</span></span><br><span class="line"><span class="comment"> * For any unknown actions, you must return the current state.</span></span><br><span class="line"><span class="comment"> * If the current state is undefined, you must return the initial state.</span></span><br><span class="line"><span class="comment"> * Do not reference these action types directly in your code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 初始化的时候(redux.createStore(reducer, initialState)时),传的action.type 就是这货啦</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> ActionTypes = &#123;</span><br><span class="line">  INIT: <span class="string">'@@redux/INIT'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a Redux store that holds the state tree.</span></span><br><span class="line"><span class="comment"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There should only be a single store in your app. To specify how different</span></span><br><span class="line"><span class="comment"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class="line"><span class="comment"> * into a single reducer function by using `combineReducers`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; reducer A function that returns the next state tree, given</span></span><br><span class="line"><span class="comment"> * the current state tree and the action to handle.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; [initialState] The initial state. You may optionally specify it</span></span><br><span class="line"><span class="comment"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class="line"><span class="comment"> * previously serialized user session.</span></span><br><span class="line"><span class="comment"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class="line"><span class="comment"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Store&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class="line"><span class="comment"> * and subscribe to changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentReducer = reducer;</span><br><span class="line">  <span class="keyword">var</span> currentState = initialState;</span><br><span class="line">  <span class="keyword">var</span> listeners = [];</span><br><span class="line">  <span class="keyword">var</span> isDispatching = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reads the state tree managed by the store.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;any&#125; The current state tree of your application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 这个方法没什么好讲的,返回当前的state</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class="line"><span class="comment">   * and some part of the state tree may potentially have changed. You may then</span></span><br><span class="line"><span class="comment">   * call `getState()` to read the current state tree inside the callback.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; listener A callback to be invoked on every dispatch.</span></span><br><span class="line"><span class="comment">   * @returns &#123;Function&#125; A function to remove this change listener.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 很常见的监听函数添加方式,当store.dispatch 的时候被调用</span></span><br><span class="line">  <span class="comment">// store.subscribe(listener) 返回一个方法(unscribe),可以用来取消监听</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">var</span> isSubscribed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">var</span> index = listeners.indexOf(listener);</span><br><span class="line">      listeners.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The `reducer` function, used to create the store, will be called with the</span></span><br><span class="line"><span class="comment">   * current state tree and the given `action`. Its return value will</span></span><br><span class="line"><span class="comment">   * be considered the **next** state of the tree, and the change listeners</span></span><br><span class="line"><span class="comment">   * will be notified.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The base implementation only supports plain object actions. If you want to</span></span><br><span class="line"><span class="comment">   * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class="line"><span class="comment">   * wrap your store creating function into the corresponding middleware. For</span></span><br><span class="line"><span class="comment">   * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class="line"><span class="comment">   * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Object&#125; action A plain object representing “what changed”. It is</span></span><br><span class="line"><span class="comment">   * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class="line"><span class="comment">   * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class="line"><span class="comment">   * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class="line"><span class="comment">   * string constants for action types.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;Object&#125; For convenience, the same action object you dispatched.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class="line"><span class="comment">   * return something else (for example, a Promise you can await).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 以下情况会报错</span></span><br><span class="line">  <span class="comment">// 1. 传入的action不是一个对象</span></span><br><span class="line">  <span class="comment">// 2. 传入的action是个对象,但是action.type 是undefined</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">        <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">        <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 就是这一句啦, 将 currentState 设置为 reducer(currentState, action) 返回的值</span></span><br><span class="line">      currentState = currentReducer(currentState, action);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有监听函数,就顺序调用</span></span><br><span class="line">    listeners.slice().forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后,返回传入的action</span></span><br><span class="line">    <span class="keyword">return</span> action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You might need this if your app implements code splitting and you want to</span></span><br><span class="line"><span class="comment">   * load some of the reducers dynamically. You might also need this if you</span></span><br><span class="line"><span class="comment">   * implement a hot reloading mechanism for Redux.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; nextReducer The reducer for the store to use instead.</span></span><br><span class="line"><span class="comment">   * @returns &#123;void&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    currentReducer = nextReducer;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When a store is created, an "INIT" action is dispatched so that every</span></span><br><span class="line">  <span class="comment">// reducer returns their initial state. This effectively populates</span></span><br><span class="line">  <span class="comment">// the initial state tree.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// redux.createStore(reducer, initialState) 的时候, 内部会 自己调用 dispatch(&#123; type: ActionTypes.INIT &#125;);</span></span><br><span class="line">  <span class="comment">// 来完成state的初始化</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的就是这个东东了,只有四个方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、combineReducers-js"><a href="#三、combineReducers-js" class="headerlink" title="三、combineReducers.js"></a>三、combineReducers.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/combineReducers.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/combineReducers.js</a></p></blockquote><ul><li><p><code>redux.combineReducers(reducerMap)</code> 的作用在于合并多个<code>reducer</code>函数，并返回一个新的<code>reducer</code>函数。因此可以看到，<code>combineReducers</code> 返回了一个函数，并且该函数的参数同样是<code>state</code>、<code>reducer</code></p></li><li><p>最终 <code>store.getState()</code>返回的<code>state</code>，大概会是这么个样子<code>{todos: xx, filter: xx}</code>。简单的说，<code>state</code>被拆分成了两份，<code>TodoReducer</code>的返回值赋值给了<code>state.todos</code>，<code>FilterReducer</code>的返回值赋值给了<code>state.filter</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoReducer</span>(<span class="params">state, action</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FilterReducer</span>(<span class="params">state, action</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> finalReducers = redux.combineReducers(&#123;</span><br><span class="line">    todos: TodoReducer,</span><br><span class="line">    filter: FilterReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>combineReducers(reducerMap)</code> 传入一个对象，并返回一个全新的<code>reducer</code>。调用方式跟跟普通的<code>reducer</code>一样，也是传入<code>state</code>、<code>action</code></li><li>通过<code>combineReducers</code>，对 <code>store</code> 的状态<code>state</code>进行拆分</li><li><code>reducerMap的key</code>，就是 <code>state</code> 的<code>key</code>，而 调用对应的<code>reducer</code>返回的值，则是这个<code>key</code>对应的值。如上面的例子，<code>state.todos == TodoReducer(state, action)</code></li><li><code>redux.createStore(finalReducers, initialState)</code> 调用时，同样会对 <code>state</code>进行初始化。这个初始化跟通过普通的<code>reducer</code>进行初始化没多大区别。举例来说，如果 <code>initialState.todos = undefined</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>undefined</code>；如果<code>initialState.todos = []</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>[]</code></li><li><code>store.dispatch(action)</code>，<code>finalReducers</code> 里面，会遍历整个<code>reducerMap</code>，依次调用每个<code>reducer</code>，并将每个<code>reducer</code>返回的子<code>state</code>赋给<code>state</code>对应的<code>key</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActionTypes &#125; <span class="keyword">from</span> <span class="string">'../createStore'</span>;</span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'../utils/isPlainObject'</span>;</span><br><span class="line"><span class="keyword">import</span> mapValues <span class="keyword">from</span> <span class="string">'../utils/mapValues'</span>;</span><br><span class="line"><span class="keyword">import</span> pick <span class="keyword">from</span> <span class="string">'../utils/pick'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-console */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUndefinedStateErrorMessage</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actionType = action &amp;&amp; action.type;</span><br><span class="line">  <span class="keyword">var</span> actionName = actionType &amp;&amp; <span class="string">`"<span class="subst">$&#123;actionType.toString()&#125;</span>"`</span> || <span class="string">'an action'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined handling <span class="subst">$&#123;actionName&#125;</span>. `</span> +</span><br><span class="line">    <span class="string">`To ignore an action, you must explicitly return the previous state.`</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnexpectedStateKeyWarningMessage</span>(<span class="params">inputState, outputState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reducerKeys = <span class="built_in">Object</span>.keys(outputState);</span><br><span class="line">  <span class="keyword">var</span> argumentName = action &amp;&amp; action.type === ActionTypes.INIT ?</span><br><span class="line">    <span class="string">'initialState argument passed to createStore'</span> :</span><br><span class="line">    <span class="string">'previous state received by the reducer'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reducerKeys.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">'Store does not have a valid reducer. Make sure the argument passed '</span> +</span><br><span class="line">      <span class="string">'to combineReducers is an object whose values are reducers.'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(inputState)) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`The <span class="subst">$&#123;argumentName&#125;</span> has unexpected type of "`</span> +</span><br><span class="line">      (&#123;&#125;).toString.call(inputState).match(<span class="regexp">/\s([a-z|A-Z]+)/</span>)[<span class="number">1</span>] +</span><br><span class="line">      <span class="string">`". Expected argument to be an object with the following `</span> +</span><br><span class="line">      <span class="string">`keys: "<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>"`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> unexpectedKeys = <span class="built_in">Object</span>.keys(inputState).filter(</span><br><span class="line">    key =&gt; reducerKeys.indexOf(key) &lt; <span class="number">0</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (unexpectedKeys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">`Unexpected <span class="subst">$&#123;unexpectedKeys.length &gt; <span class="number">1</span> ? <span class="string">'keys'</span> : <span class="string">'key'</span>&#125;</span> `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;unexpectedKeys.join(<span class="string">'", "'</span>)&#125;</span>" found in <span class="subst">$&#123;argumentName&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Expected to find one of the known reducer keys instead: `</span> +</span><br><span class="line">      <span class="string">`"<span class="subst">$&#123;reducerKeys.join(<span class="string">'", "'</span>)&#125;</span>". Unexpected keys will be ignored.`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对reducer做合法性检测</span></span><br><span class="line"><span class="comment">// store = Redux.createStore(reducer, initialState) --&gt;</span></span><br><span class="line"><span class="comment">// currentState = initialState</span></span><br><span class="line"><span class="comment">// currentState = currentReducer(currentState, action);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 从调用关系,调用时机来看, store.getState() 的初始值(currentState)</span></span><br><span class="line"><span class="comment">// 为 currentReducer(initialState, &#123; type: ActionTypes.INIT &#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. 在初始化阶段,reducer 传入的 state 值是 undefined,此时,需要返回初始state,且初始state不能为undefined</span></span><br><span class="line"><span class="comment">// 2. 当传入不认识的 actionType 时, reducer(state, &#123;type&#125;) 返回的不能是undefined</span></span><br><span class="line"><span class="comment">// 3. redux/ 这个 namespace 下的action 不应该做处理,直接返回 currentState 就行 (谁运气这么差会去用这种actionType...)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerSanity</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> reducer = reducers[key];</span><br><span class="line">    <span class="keyword">var</span> initialState = reducer(<span class="literal">undefined</span>, &#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">        <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">        <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">        <span class="string">`not be undefined.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">'@@redux/PROBE_UNKNOWN_ACTION_'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">7</span>).split(<span class="string">''</span>).join(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123; type &#125;) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">        <span class="string">`Don't try to handle <span class="subst">$&#123;ActionTypes.INIT&#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">        <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">        <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">        <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">        <span class="string">`action type. The initial state may not be undefined.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are different reducer functions, into a single</span></span><br><span class="line"><span class="comment"> * reducer function. It will call every child reducer, and gather their results</span></span><br><span class="line"><span class="comment"> * into a single state object, whose keys correspond to the keys of the passed</span></span><br><span class="line"><span class="comment"> * reducer functions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; reducers An object whose values correspond to different</span></span><br><span class="line"><span class="comment"> * reducer functions that need to be combined into one. One handy way to obtain</span></span><br><span class="line"><span class="comment"> * it is to use ES6 `import * as reducers` syntax. The reducers may never return</span></span><br><span class="line"><span class="comment"> * undefined for any action. Instead, they should return their initial state</span></span><br><span class="line"><span class="comment"> * if the state passed to them was undefined, and the current state for any</span></span><br><span class="line"><span class="comment"> * unrecognized action.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A reducer function that invokes every reducer inside the</span></span><br><span class="line"><span class="comment"> * passed object, and builds a state object with the same shape.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个对象, key =&gt; value 且value是function(其实就是过滤掉非function)</span></span><br><span class="line">  <span class="keyword">var</span> finalReducers = pick(reducers, (val) =&gt; <span class="keyword">typeof</span> val === <span class="string">'function'</span>);</span><br><span class="line">  <span class="keyword">var</span> sanityError;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 对所有的子reducer 做一些合法性断言,如果没有出错再继续下面的处理</span></span><br><span class="line">    <span class="comment">// 合法性断言的内容,见API注释</span></span><br><span class="line">    assertReducerSanity(finalReducers);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    sanityError = e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 所有的 key: value,将value置成了undefined,费解...</span></span><br><span class="line">  <span class="comment">// 总而言之, 初始state 就是 类似 &#123;hello: undefined, world: undefined&#125; 的东东</span></span><br><span class="line">  <span class="comment">// TODO 确认这里的逻辑</span></span><br><span class="line">  <span class="keyword">var</span> defaultState = mapValues(finalReducers, () =&gt; <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sanityError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> sanityError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hasChanged = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 这段代码,简单的说,就是循环一遍 finalState[key] = fn(reducer, key)</span></span><br><span class="line">    <span class="keyword">var</span> finalState = mapValues(finalReducers, (reducer, key) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> previousStateForKey = state[key];</span><br><span class="line">      <span class="keyword">var</span> nextStateForKey = reducer(previousStateForKey, action);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// 其他一个reducer返回的是undefined,于是挂啦...抛出错误</span></span><br><span class="line">        <span class="keyword">var</span> errorMessage = getUndefinedStateErrorMessage(key, action);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这段代码有些费解,从redux的设计理念上来讲,除了不认识的action type,其他情况都应该返回全新的state</span></span><br><span class="line">      <span class="comment">// 也就是说</span></span><br><span class="line">      <span class="comment">// 1. action type 认识,返回新的state,于是这里 hasChanged 为 true</span></span><br><span class="line">      <span class="comment">// 2. action type 不认识,返回原来的state,于是这里 hasChanged 为 false</span></span><br><span class="line">      <span class="comment">// 3. 不管action type 是否认识, 在原来的state上修改,但是返回的是修改后的state(没有返回拷贝),那么,hasChanged还是为false</span></span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;</span><br><span class="line">      <span class="keyword">return</span> nextStateForKey;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发环境中(于是记得在生产环境去掉)</span></span><br><span class="line">    <span class="comment">// 后面再研究这段代码,毕竟不是主线路...</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> warningMessage = getUnexpectedStateKeyWarningMessage(state, finalState, action);</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(warningMessage);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hasChanged ? finalState : state;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、bindActionCreator-js"><a href="#四、bindActionCreator-js" class="headerlink" title="四、bindActionCreator.js"></a>四、bindActionCreator.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/bindActionCreators.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/bindActionCreators.js</a></p></blockquote><ul><li>先看个简单例子可能方便理解一些</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTodo = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addTodos = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todos'</span>,</span><br><span class="line">        items: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todos'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.items);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"><span class="comment">// 注意,关键代码在这里</span></span><br><span class="line"><span class="keyword">var</span> actions = redux.bindActionCreators(&#123;</span><br><span class="line">    addTodo: addTodo,</span><br><span class="line">    addTodos: addTodos</span><br><span class="line">&#125;, store.dispatch);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todos'</span>, <span class="attr">items</span>: [<span class="string">'阅读'</span>, <span class="string">'睡觉'</span>]&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉</span></span><br><span class="line"></span><br><span class="line">actions.addTodo(<span class="string">'看电影'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉,看电影</span></span><br><span class="line"></span><br><span class="line">actions.addTodos([<span class="string">'刷牙'</span>, <span class="string">'洗澡'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,阅读,睡觉,看电影,刷牙,洗澡</span></span><br></pre></td></tr></table></figure><ul><li>直接看代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mapValues <span class="keyword">from</span> <span class="string">'../utils/mapValues'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(actionCreator(...args));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Turns an object whose values are action creators, into an object with the</span></span><br><span class="line"><span class="comment"> * same keys, but with every function wrapped into a `dispatch` call so they</span></span><br><span class="line"><span class="comment"> * may be invoked directly. This is just a convenience method, as you can call</span></span><br><span class="line"><span class="comment"> * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For convenience, you can also pass a single function as the first argument,</span></span><br><span class="line"><span class="comment"> * and get a function in return.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function|Object&#125; actionCreators An object whose values are action</span></span><br><span class="line"><span class="comment"> * creator functions. One handy way to obtain it is to use ES6 `import * as`</span></span><br><span class="line"><span class="comment"> * syntax. You may also pass a single function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; dispatch The `dispatch` function available on your Redux</span></span><br><span class="line"><span class="comment"> * store.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function|Object&#125; The object mimicking the original object, but with</span></span><br><span class="line"><span class="comment"> * every action creator wrapped into the `dispatch` call. If you passed a</span></span><br><span class="line"><span class="comment"> * function as `actionCreators`, the return value will also be a single</span></span><br><span class="line"><span class="comment"> * function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 假设 actionCreators === &#123;addTodo: addTodo, removeTodo: removeTodo&#125;</span></span><br><span class="line"><span class="comment">// 简单的来说 bindActionCreators(actionCreators, dispatch)</span></span><br><span class="line"><span class="comment">// 最后返回的是:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   addTodo: function(text)&#123;</span></span><br><span class="line"><span class="comment">//      dispatch( actionCreators.addTodo(text) );</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   removeTodo: function(text)&#123;</span></span><br><span class="line"><span class="comment">//      dispatch( actionCreators.removeTodo(text) );</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  或者说 actionCreators === addTodo (addTodo 为 actionCreator)</span></span><br><span class="line"><span class="comment">//  最后返回的是</span></span><br><span class="line"><span class="comment">//  function() &#123;</span></span><br><span class="line"><span class="comment">//     dispatch(actionCreators());</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span> || actionCreators === <span class="literal">undefined</span>) &#123;  <span class="comment">// eslint-disable-line no-eq-null</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators&#125;</span>. `</span> +</span><br><span class="line">      <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mapValues(actionCreators, actionCreator =&gt;</span><br><span class="line">    bindActionCreator(actionCreator, dispatch)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、applyMiddleware-js"><a href="#五、applyMiddleware-js" class="headerlink" title="五、applyMiddleware.js"></a>五、applyMiddleware.js</h2><blockquote><p><a href="https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js" target="_blank" rel="noopener">https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js</a></p></blockquote><ul><li>中间件应该是<code>redux</code>源码里面最绕的一部分</li></ul><p><strong>例子：redux-thunk</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt;</span><br><span class="line">    <span class="keyword">typeof</span> action === <span class="string">'function'</span> ?</span><br><span class="line">      action(dispatch, getState) :</span><br><span class="line">      next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">store</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dispatch = store.dispatch;</span><br><span class="line">  <span class="keyword">var</span> getState = store.getState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> action === <span class="string">'function'</span> ? action(dispatch, getState) : next(action);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义中间件：logger</strong></p><ul><li>先看<code>logger</code>的实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本看出中间件声明的模版来了，就是下面这个样子。下面结合<code>applyMiddleware</code>的调用，来说明<code>store</code>、<code>next</code>、<code>action</code> 几个参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applyMiddleware调用例子</strong></p><ul><li><code>applyMiddleware</code> 的调用方式为 <code>applyMiddleware(...middlewares)(react.createStore)</code>。其实这里直接先创建 <code>store</code>，然后<code>applyMiddleware(...middlewares)(store)</code> 也很容易实现相同的效果，不过作者是故意这样设计的，为了避免在同一个store上多次应用同一个<code>middlerware</code></li><li>中间件顶层的<code>store</code>参数，并不是常规的<code>store</code>，虽然它也有 <code>getState</code>、<code>dispatch</code> 两个方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的store参数，其实就是这个对象</span></span><br><span class="line"><span class="comment">// 其中，store 为内部的store，我们在外面 storeWithMiddleWare.dipatch的时候，内部实现是转成 store.dispatch</span></span><br><span class="line"><span class="comment">// 此外，可以看到 middlewareAPI.dispatch 方法，是最终封装后的dispatch（千万注意，如果在中间件内部 调用 store.dispatch，可能导致死循环 ）</span></span><br><span class="line"><span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">  getState: store.getState,</span><br><span class="line">  <span class="comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span><br><span class="line">  dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>第二层的next函数，其实是一个“dispatch”方法</li><li>storeWithMiddleWare.dispatch(action) 的时候，会顺序进入各个中间件（按照定义时的顺序）。从当前的例子来看，大约如下，其实就是柯里化啦</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storeWithMiddleWare.dispatch(action) --&gt; logger(store)(next)(action) --&gt; timer(store)(next)(action) --&gt; store.dispatch(action)</span><br></pre></td></tr></table></figure><p><strong>完整的示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> state===<span class="string">'undefined'</span>) state = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 store，并不是 redux.createStore(reducer, initialState) 出来的 store</span></span><br><span class="line"><span class="comment">// 而是 &#123;getState: store.getState, dispatch: function() &#123; store.dispatch(action); &#125;&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span>(<span class="params">store</span>)</span>&#123;    </span><br><span class="line">    <span class="comment">//     </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'logger: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'timer: dispatching '</span> + action.type);</span><br><span class="line">            <span class="keyword">var</span> result = next(action);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'timer: next state '</span> + result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createStoreWidthMiddleware = redux.applyMiddleware(</span><br><span class="line">    logger, </span><br><span class="line">    timer</span><br><span class="line">    )(redux.createStore);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storeWithMiddleWare = createStoreWidthMiddleware(reducer);</span><br><span class="line">storeWithMiddleWare.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'subscribe: state is : '</span> + storeWithMiddleWare.getState());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( storeWithMiddleWare.dispatch(addTodo(<span class="string">'reading'</span>)) );</span><br></pre></td></tr></table></figure><p><strong>源码解析</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a store enhancer that applies middleware to the dispatch method</span></span><br><span class="line"><span class="comment"> * of the Redux store. This is handy for a variety of tasks, such as expressing</span></span><br><span class="line"><span class="comment"> * asynchronous actions in a concise manner, or logging every action payload.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See `redux-thunk` package as an example of the Redux middleware.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Because middleware is potentially asynchronous, this should be the first</span></span><br><span class="line"><span class="comment"> * store enhancer in the composition chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that each middleware will be given the `dispatch` and `getState` functions</span></span><br><span class="line"><span class="comment"> * as named arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;...Function&#125; middlewares The middleware chain to be applied.</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A store enhancer applying the middleware.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  从调用方法 applyMiddleware(...middlewares)(Redux.createStore) 可以看出</span></span><br><span class="line"><span class="comment">  next 参数实际上是 Redux.createStore. 而 Redux.createStore 的调用方式为 Redux.createStore(reducer, initialState)</span></span><br><span class="line"><span class="comment">  所以 applyMiddleware(...middlewares)</span></span><br><span class="line"><span class="comment">  1. 参数: Redux.createStore</span></span><br><span class="line"><span class="comment">  2. 返回值:一个function, 跟 Redux.createStore 接受的参数一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">next</span>) =&gt;</span> (reducer, initialState) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 内部先创建一个store (相当于直接调用 Redux.createStore(reducer, initialState))</span></span><br><span class="line">    <span class="keyword">var</span> store = next(reducer, initialState);</span><br><span class="line">    <span class="comment">// 保存最初始的store.dispatch</span></span><br><span class="line">    <span class="keyword">var</span> dispatch = store.dispatch;</span><br><span class="line">    <span class="keyword">var</span> chain = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      <span class="comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span><br><span class="line">      dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回一个数组</span></span><br><span class="line">    <span class="comment">// 贴个例子在这里做参考,redux-thunk</span></span><br><span class="line">    <span class="comment">// function thunkMiddleware(store) &#123;</span></span><br><span class="line">    <span class="comment">//  var dispatch = store.dispatch;</span></span><br><span class="line">    <span class="comment">//  var getState = store.getState;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  这里的next其实就是dispatch</span></span><br><span class="line">    <span class="comment">//  return function (next) &#123;</span></span><br><span class="line">    <span class="comment">//    return function (action) &#123;</span></span><br><span class="line">    <span class="comment">//      return typeof action === 'function' ? action(dispatch, getState) : next(action);</span></span><br><span class="line">    <span class="comment">//    &#125;;</span></span><br><span class="line">    <span class="comment">//  &#125;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      chain 是个数组, 参考上面的 middlleware (redux-thunk),可以看到,chain的每个元素为如下形式的function</span></span><br><span class="line"><span class="comment">      并且, 传入的 store.getState 为原始的 store.getState,而 dispatch则是包装后的 dispatch(不是原始的store.dispatch)</span></span><br><span class="line"><span class="comment">      似乎是为了确保, 在每个middleware里调用 dispatch(action), 最终都是 用原始的 store.dispatch(action)</span></span><br><span class="line"><span class="comment">      避免 store.dispatch 被覆盖, 导致middleware 顺序调用的过程中, store.dispatch的值变化 --&gt; store.dispatch 返回的值可能会有不同</span></span><br><span class="line"><span class="comment">      违背 redux 的设计理念</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      这里的 next 则为 原始的 store.dispatch (见下面 compose(...chain)(store.dispatch) )</span></span><br><span class="line"><span class="comment">      function (next) &#123;</span></span><br><span class="line"><span class="comment">        return function (action) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compose(...chain)(store.dispatch) 返回了一个function</span></span><br><span class="line">    <span class="comment">// 伪代码如下,</span></span><br><span class="line">    <span class="comment">// function (action) &#123;</span></span><br><span class="line">    <span class="comment">//   middleware(store)(store.dispatch);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch);  <span class="comment">// 从右到左, middleware1( middleware2( middleware3(dispatch) ) )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 于是,最终调用 applyMiddleware(...middlewares)(Redux.createStore)</span></span><br><span class="line">    <span class="comment">// 返回的 store, getState,subscribe 方法都是原始的那个 store.getState, store.subscribe</span></span><br><span class="line">    <span class="comment">// 至于dispatch是封装过的</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、index-js&quot;&gt;&lt;a href=&quot;#一、index-js&quot; class=&quot;headerlink&quot; title=&quot;一、index.js&quot;&gt;&lt;/a&gt;一、index.js&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://yoursite.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之浅析中间件（八）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-middleware/"/>
    <id>http://yoursite.com/2017/11/19/react-study-middleware/</id>
    <published>2017-11-19T08:30:24.000Z</published>
    <updated>2018-03-29T15:27:26.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>在<code>redux</code>里，<code>middleware</code>是发送<code>action</code>和<code>action</code>到达<code>reducer</code>之间的第三方扩展，也就是中间层。也可以这样说，<code>middleware</code>是架在<code>action</code>和<code>store</code>之间的一座桥梁</li><li>在<code>redux</code>里，<code>action</code>仅仅是携带了数据的普通<code>js</code>对象</li></ul><blockquote><p><code>Reducer</code> 拆分可以使组件获取其最小属性(<code>state</code>)，而不需要整个<code>Store</code>。中间件则可以在<code>Action Creator</code> 返回最终可供 <code>dispatch</code> 调用的 <code>action</code> 之前处理各种事情，如异步<code>API</code>调用、日志记录等，是扩展 <code>Redux</code> 功能的一种推荐方式</p></blockquote><ul><li><code>Redux</code> 提供了 <code>applyMiddleware(...middlewares)</code> 来将中间件应用到 <code>createStore</code>。<code>applyMiddleware</code> 会返回一个函数，该函数接收原来的 <code>creatStore</code> 作为参数，返回一个应用了 <code>middlewares</code> 的增强后的 <code>creatStore</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</span><br><span class="line">    <span class="comment">//接收createStore参数</span></span><br><span class="line">    <span class="keyword">var</span> store = createStore(reducer, preloadedState, enhancer)</span><br><span class="line">    <span class="keyword">var</span> dispatch = store.dispatch</span><br><span class="line">    <span class="keyword">var</span> chain = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传递给中间件的参数</span></span><br><span class="line">    <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册中间件调用链</span></span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回经middlewares增强后的createStore</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>未应用中间价之前，创建 <code>store</code> 的方式如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> store = createStore(reducers);</span><br></pre></td></tr></table></figure><blockquote><p>应用中间价之后，创建 <code>store</code>的方式如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore，applyMiddleware&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createStoreWithMiddleware = applyMiddleware(...middleware)(createStore);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> store = createStoreWithMiddleware(reducers);</span><br></pre></td></tr></table></figure><h2 id="二、为什么要引入middleware"><a href="#二、为什么要引入middleware" class="headerlink" title="二、为什么要引入middleware"></a>二、为什么要引入middleware</h2><ul><li><code>action creator</code>返回的值是这个<code>action</code>类型的对象。然后通过<code>store.dispatch()</code>进行分发</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action ---&gt; dispatcher ---&gt; reducers</span><br></pre></td></tr></table></figure><blockquote><p>如果遇到异步情况，比如点击一个按钮，希望2秒之后更新视图，显示消息“Hi”。我们可能这么写<code>ActionCreator</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asyncSayActionCreator = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            type: <span class="string">'SAY'</span>,</span><br><span class="line">            message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这会报错，因为这个<code>asyncSayActionCreator</code>返回的不是一个<code>action</code>，而是一个<code>function</code>。这个返回值无法被<code>reducer</code>识别</p></blockquote><ul><li>也就是说，正常来说，<code>action</code>返回的是一个对象，而不是一个函数。如果返回函数，会出现错误</li><li>　而异步操作呢，需要<code>action</code>的返回值是一个函数。那么咋办呢，所以需要引入中间件<code>middleware</code>,它在中间起到了桥梁的作用，让<code>action</code>的返回值可以是一个函数，从而传到<code>reducer</code>那里。也就是说，中间件是用在<code>action</code>发起之后，<code>reducer</code>接收到之前的这个时间段</li><li>也可以这么说，<code>Middleware</code> 主要是负责改变<code>Store</code>中的<code>dispatch</code>方法，从而能处理不同类型的 <code>action</code> 输入，得到最终的 <code>Javascript Plain Object</code> 形式的 <code>action</code> 对象</li></ul><blockquote><p>因此，上面那个<code>ActionCreator</code>就可以改写为这样：因为<code>action</code>的返回值是一个函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> asyncSayActionCreator = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                type: <span class="string">'SAY'</span>,</span><br><span class="line">                message</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-ce57255f3fd73efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>上图表达的是 <code>redux</code> 中一个简单的同步数据流动的场景，点击<code>button</code> 后，在回调中 <code>dispatch</code> 一个 <code>action</code>，<code>reducer</code> 收到<code>action</code> 后，更新 <code>state</code> 并通知 <code>view</code> 重新渲染</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-195f2150c8aebccb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>上面这张图展示了应用<code>middleware</code> 后 <code>redux</code> 处理事件的逻辑，每一个 <code>middleware</code> 处理一个相对独立的业务需求，通过串联不同的 <code>middleware</code>，实现变化多样的的功能。那么问题来了：<ul><li><code>middleware</code> 怎么写？</li><li><code>redux</code>是如何让 <code>middlewares</code> 串联并跑起来的？</li></ul></li></ul><h2 id="三、中间件是如何工作的"><a href="#三、中间件是如何工作的" class="headerlink" title="三、中间件是如何工作的"></a>三、中间件是如何工作的</h2><blockquote><p><code>Middleware</code>的中间件有很多，不过我的这个案例只引用了其中的一个，那就是<code>redux-thunk</code></p></blockquote><ul><li><code>redux-thunk</code>源码如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">thunkMiddleware</span>(<span class="params">&#123; dispatch, getState &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt;</span><br><span class="line">    <span class="keyword">typeof</span> action === <span class="string">'function'</span> ?</span><br><span class="line">      action(dispatch, getState) :</span><br><span class="line">      next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>意思是如果<code>action</code>是一个函数，执行这个<code>action</code>函数，如果不是函数，执行<code>next</code>函数</p></blockquote><h2 id="四、自定义中间件"><a href="#四、自定义中间件" class="headerlink" title="四、自定义中间件"></a>四、自定义中间件</h2><blockquote><p>中间件的签名如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123; getState, dispatch &#125;) =&gt; <span class="function"><span class="params">next</span> =&gt;</span> action</span><br></pre></td></tr></table></figure><blockquote><p>根据<code>applyMiddleware</code> 源码，每个中间件接收 <code>getState &amp; dispatch</code>作为参数，并返回一个函数，该函数会被传入下一个中间件的 dispatch 方法，并返回一个接收 <code>action</code> 的新函数</p></blockquote><ul><li>应用多个中间件时，中间件调用链中任何一个缺少 <code>next(action)</code> 的调用，都会导致<code>action</code> 执行失败</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callTraceMiddleware</span> (<span class="params">&#123;dispatch,getState&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">next</span>=&gt;</span> action =&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.trace();</span><br><span class="line">        <span class="keyword">return</span> next(action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后在调用中间件部分添加中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</span><br><span class="line">  thunkMiddleware,</span><br><span class="line">  loggerMiddleware,</span><br><span class="line">  callTraceMiddleware</span><br><span class="line">)(createStore);</span><br></pre></td></tr></table></figure><blockquote><p><code>redux</code>的<code>middleware</code>是对<code>action</code>进行扩展处理，这样丰富了应用需求</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;redux&lt;/code&gt;里，&lt;code&gt;middleware&lt;/code&gt;是发送&lt;code&gt;act
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之action、store、reducer分析（六）</title>
    <link href="http://yoursite.com/2017/11/19/redux-study-action-store-reducer/"/>
    <id>http://yoursite.com/2017/11/19/redux-study-action-store-reducer/</id>
    <published>2017-11-19T08:10:24.000Z</published>
    <updated>2018-03-22T11:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redux的核心概念就是store、action、reducer，从调用关系来看如下所示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action) --&gt; reducer(state, action) --&gt; final state</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer方法, 传入的参数有两个</span></span><br><span class="line"><span class="comment">// state: 当前的state</span></span><br><span class="line"><span class="comment">// action: 当前触发的行为, &#123;type: 'xx'&#125;</span></span><br><span class="line"><span class="comment">// 返回值: 新的state</span></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store, 传入两个参数</span></span><br><span class="line"><span class="comment">// 参数1: reducer 用来修改state</span></span><br><span class="line"><span class="comment">// 参数2(可选): [], 默认的state值,如果不传, 则为undefined</span></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.getState() 可以获取当前store的状态(state)</span></span><br><span class="line"><span class="comment">// 默认的值是 createStore 传入的第二个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.dispatch(action) 来达到修改 state 的目的</span></span><br><span class="line"><span class="comment">// 注意: 在redux里,唯一能够修改state的方法,就是通过 store.dispatch(action)</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br><span class="line"><span class="comment">// 打印出修改后的state</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书</span></span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'写作'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is: 读书,写作</span></span><br></pre></td></tr></table></figure><h2 id="一、store、reducer、action关联"><a href="#一、store、reducer、action关联" class="headerlink" title="一、store、reducer、action关联"></a>一、store、reducer、action关联</h2><p><strong>store</strong></p><ul><li><code>store</code>在这里代表的是数据模型，内部维护了一个<code>state</code>变量</li><li><code>store</code>有两个核心方法，分别是<code>getState</code>、<code>dispatch</code>。前者用来获取<code>store</code>的状态（<code>state</code>），后者用来修改<code>store</code>的状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建store, 传入两个参数</span></span><br><span class="line"><span class="comment">// 参数1: reducer 用来修改state</span></span><br><span class="line"><span class="comment">// 参数2(可选): [], 默认的state值,如果不传, 则为undefined</span></span><br><span class="line"><span class="keyword">var</span> store = redux.createStore(reducer, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.getState() 可以获取当前store的状态(state)</span></span><br><span class="line"><span class="comment">// 默认的值是 createStore 传入的第二个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'state is: '</span> + store.getState());  <span class="comment">// state is:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 store.dispatch(action) 来达到修改 state 的目的</span></span><br><span class="line"><span class="comment">// 注意: 在redux里,唯一能够修改state的方法,就是通过 store.dispatch(action)</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'add_todo'</span>, <span class="attr">text</span>: <span class="string">'读书'</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>action</strong></p><ul><li>对行为（如用户行为）的抽象，在<code>redux</code>里是一个普通的<code>js</code>对象</li><li><code>action</code>必须有一个<code>type</code>字段来标识这个行为的类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'读书'</span>&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'写作'</span>&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">'add_todo'</span>, <span class="attr">text</span>:<span class="string">'睡觉'</span>, <span class="attr">time</span>:<span class="string">'晚上'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>reducer</strong></p><ul><li>一个普通的函数，用来修改<code>store</code>的状态。传入两个参数 <code>state</code>、<code>action</code></li><li>其中，<code>state</code>为当前的状态（可通过<code>store.getState()</code>获得），而<code>action</code>为当前触发的行为（通过<code>store.dispatch(action)</code>调用触发）</li><li><code>reducer(state, action)</code> 返回的值，就是<code>store</code>最新的<code>state</code>值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer方法, 传入的参数有两个</span></span><br><span class="line"><span class="comment">// state: 当前的state</span></span><br><span class="line"><span class="comment">// action: 当前触发的行为, &#123;type: 'xx'&#125;</span></span><br><span class="line"><span class="comment">// 返回值: 新的state</span></span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">state, action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add_todo'</span>:</span><br><span class="line">            <span class="keyword">return</span> state.concat(action.text);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、关于actionCreator"><a href="#二、关于actionCreator" class="headerlink" title="二、关于actionCreator"></a>二、关于actionCreator</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actionCreator(args) =&gt; action</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTodo = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'add_todo'</span>,</span><br><span class="line">        text: text</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addTodo(<span class="string">'睡觉'</span>);  <span class="comment">// 返回：&#123;type: 'add_todo', text: '睡觉'&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;redux的核心概念就是store、action、reducer，从调用关系来看如下所示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://yoursite.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之组件的生命周期以及属性状态（三）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-life-props-state/"/>
    <id>http://yoursite.com/2017/11/19/react-study-life-props-state/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-29T15:27:26.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是生命周期"><a href="#一、什么是生命周期" class="headerlink" title="一、什么是生命周期"></a>一、什么是生命周期</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-2921ad93a9b5c407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>组件本质是状态机，输入确定，输出一定确定</li><li>一个<code>state</code>对应一个<code>render</code>，状态转换的时候会触发不同的函数，从而让开发者有机会做出响应，可以用事件的思路理解状态，但是事件与事件之间没有关联，而状态与状态之间可能会有关联</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-2835e57db9951056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、初始化阶段"><a href="#二、初始化阶段" class="headerlink" title="二、初始化阶段"></a>二、初始化阶段</h2><p><strong>设置初始的属性与状态</strong></p><ul><li><code>getDefaultProps</code>：设置初始的属性，只在第一次调用，实例之间共享引用</li><li><code>getInitialState</code>：设置初始的状态</li><li><code>componentWillMount</code>：组件将要加载，<code>render</code>之前最后一次修改状态的机会</li><li><code>render</code>：只能访问<code>this.props</code>与<code>this.state</code>，只有一个顶层标签（组件），不允许修改状态和<code>DOM</code>输出</li><li><code>componentDidMount</code>：成功<code>render</code>并渲染完成真实<code>DOM</code>之后出发，可以修改<code>DOM</code>，要操作<code>DOM</code>也必须在这个阶段完成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 第一步执行顺序：设置初始的属性，指执行一次</span></span><br><span class="line">    getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">'一个盒子'</span>,</span><br><span class="line">            title:<span class="string">'box'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第二步执行顺序：设置初始的状态</span></span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            sss: <span class="keyword">this</span>.props.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第三步执行：组件将要加载的时候，最后一次可以修改状态的机会</span></span><br><span class="line">    componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sss:<span class="string">'修改状态'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// alert('componentWillMount')</span></span><br><span class="line">        <span class="comment">// 这里是没有办法获取到这个节点的</span></span><br><span class="line">        <span class="comment">// var box = this.refs.box;</span></span><br><span class="line">        <span class="comment">// alert(box.clientWidth)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第四步：render渲染</span></span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(this)</span></span><br><span class="line">        <span class="keyword">var</span> styles = &#123;</span><br><span class="line">            position:<span class="string">'absolute'</span>,</span><br><span class="line">            width: <span class="string">'100px'</span>,</span><br><span class="line">            height: <span class="string">'100px'</span>,</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">            background: <span class="string">'lime'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span>&gt;</span>&#123;this.props.title&#125;&#123;this.state.sss&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 第五步：组件加载完成，只有在这一个阶段，我们才可以操作DOM节点</span></span><br><span class="line">    componentDidMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// alert('componentDidMount')</span></span><br><span class="line">        <span class="comment">// 下面的this指向组件</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">var</span> box = <span class="keyword">this</span>.refs.box;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">        box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 这个this指向box</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">var</span> This = <span class="keyword">this</span>;</span><br><span class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 这个this指向window</span></span><br><span class="line">                <span class="comment">// console.log(this)</span></span><br><span class="line">                n++;</span><br><span class="line">                This.style.left = n + <span class="string">'px'</span>;</span><br><span class="line">                This.style.top = n + <span class="string">'px'</span>;</span><br><span class="line">            &#125;,<span class="number">60</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="三、运行中阶段"><a href="#三、运行中阶段" class="headerlink" title="三、运行中阶段    "></a>三、运行中阶段    </h2><ul><li><code>componentWillReceiveProps</code>：父组件修改属性触发，可以修改新属性，修改状态</li><li><code>shouldCompoenntUpdate</code>：组件是否更新，返回<code>false</code>会阻止<code>render</code>调用，<code>render</code>后面的函数都不会执行</li><li><code>componentWillUpdate</code>：不能修改属性与状态，用于日志打印与数据获取</li><li><code>reder</code>：只能访问<code>this.props与this.state</code>，只有一个顶层标签（组件），不允许修改状态和<code>DOM</code>输出</li><li><code>componentDidUpdate</code>：可以修改<code>DOM</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloReact = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 组件将要接收新的属性</span></span><br><span class="line">    componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">newProps</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componnetWillReceiveProps'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否允许组件更新，返回true或者false，一般不会改变它的默认值：true</span></span><br><span class="line">    shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">newProps,newState</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps,newState)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件将要更新</span></span><br><span class="line">    componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;this.props.name?this.props.name:'React'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件更新完毕</span></span><br><span class="line">    componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>,<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;HelloReact name=&#123;<span class="keyword">this</span>.state.name&#125;/&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Demo/</span>&gt;,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="四、销毁阶段"><a href="#四、销毁阶段" class="headerlink" title="四、销毁阶段"></a>四、销毁阶段</h2><ul><li><code>componentWillUnmount</code>：组件将要卸载</li><li>在<code>ReactDOM</code>中提供一个方法<code>unmountComponentAtNode</code>(删除节点的名字)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloReact = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 组件将要接收新的属性</span></span><br><span class="line">    componentWillReceiveProps:<span class="function"><span class="keyword">function</span>(<span class="params">newProps</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componnetWillReceiveProps'</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否允许组件更新，返回true或者false，一般不会改变它的默认值：true</span></span><br><span class="line">    shouldComponentUpdate:<span class="function"><span class="keyword">function</span>(<span class="params">newProps,newState</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(newProps,newState)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件将要更新</span></span><br><span class="line">    componentWillUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>,<span class="number">3</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;this.props.name?this.props.name:'React'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件更新完毕</span></span><br><span class="line">    componentDidUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>,<span class="number">5</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUnmount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'BOOOOOOOOOOOOOOOOOM'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 利用input输入的内容来卸载组件</span></span><br><span class="line">        <span class="keyword">if</span>(e.target.value == <span class="string">'1234'</span>)&#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br><span class="line">            <span class="comment">// 写上这个return是为了不执行下面的语句，减少代码执行时间</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name:e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过判断state的状态来卸载组件</span></span><br><span class="line">       <span class="comment">/* if( this.state.name == '1234')&#123;</span></span><br><span class="line"><span class="comment">            return &lt;div&gt;1234&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;HelloReact name=&#123;<span class="keyword">this</span>.state.name&#125;/&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Demo/</span>&gt;,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="五、属性状态"><a href="#五、属性状态" class="headerlink" title="五、属性状态"></a>五、属性状态</h2><p><strong>属性的含义与用法</strong></p><ul><li>含义：<code>props = properties</code></li><li>属性：一个事物的性质与关系，属性往往是与生俱来，无法自己改变的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件传递props</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">title</span>=<span class="string">&#123;</span>"<span class="attr">Demo</span>"&#125;/&gt;</span>,document.getElementById("app"))</span></span><br><span class="line"><span class="xml">``` </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">```javascript</span></span><br><span class="line"><span class="xml">/*</span></span><br><span class="line"><span class="xml">    ...this.props</span></span><br><span class="line"><span class="xml">    props的一个语法糖，可以将父组件中的全部属性复制给子组件，</span></span><br><span class="line"><span class="xml">    如果是这个标签本身拥有的这个属性</span></span><br><span class="line"><span class="xml">*/</span></span><br><span class="line"><span class="xml">var Demo = React.createClass(&#123;</span></span><br><span class="line"><span class="xml">    render:function()&#123;</span></span><br><span class="line">        return (&lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">            &lt;a &#123;...this.props&#125;&gt;&#123;this.props.title&#125;&lt;/a&gt;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">var props = &#123;</span></span><br><span class="line"><span class="xml">    title:'百度',</span></span><br><span class="line"><span class="xml">    href:'http://www.baidu.com'</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line">ReactDOM.render(&lt;Demo &#123;...props&#125;/&gt;,document.getElementById("app"))</span><br></pre></td></tr></table></figure><ul><li><code>this.props.chilidren</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    this.props.children</span></span><br><span class="line"><span class="comment">    children没有与组件的属性一一对应，表示组件的所有子节点</span></span><br><span class="line"><span class="comment">    一般用于列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(React)</span><br><span class="line"><span class="keyword">var</span> List = React.createClass(&#123;</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                /*</span></span><br><span class="line"><span class="xml">                    列表项的数量以及内容不确定，在创建模板的时候需确定</span></span><br><span class="line"><span class="xml">                    利用this.props.chilidren从父组件获取需要的内容</span></span><br><span class="line"><span class="xml">                    利用React.Children.map方法进行children的遍历</span></span><br><span class="line"><span class="xml">                */</span></span><br><span class="line"><span class="xml">                React.Children.map(this.props.children,function(child)&#123;</span></span><br><span class="line"><span class="xml">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;List&gt;</span><br><span class="line">        &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;http:<span class="comment">//www.baidu.com&lt;/a&gt;</span></span><br><span class="line">    &lt;<span class="regexp">/List&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById("app")</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li><code>PropTypes</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性验证：PropTypes   </span></span><br><span class="line"><span class="comment">// 验证组件的属性是否符合要求</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    PropTypes:&#123;</span><br><span class="line">        <span class="comment">// 要求title的类型必须是一个字符串</span></span><br><span class="line">        title:React.PropTypes.string.isRequired</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">title</span>=<span class="string">&#123;</span>'<span class="attr">title</span>'&#125; /&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><p><strong>属性的两种用法</strong></p><ul><li><code>&lt;Demo   title=?  /&gt;</code> <strong><code>？</code>中的内容可以是</strong><ul><li>字符串</li><li>对象<code>{}</code></li><li>数组<code>{[1,2,3]}</code></li><li>变量<code>{var}</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo  &#123;…props&#125; /&gt;</span><br><span class="line"><span class="keyword">var</span>  props = &#123;</span><br><span class="line">one:”<span class="number">123</span>”,</span><br><span class="line">two:”<span class="number">456</span>”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>状态的含义与用法</strong></p><ul><li><code>state</code></li><li>状态：事物所处的状况</li><li>状态是由事物自行处理，不断变化的。父组件与子组件都无法改变他的状态</li></ul><h2 id="状态的用法"><a href="#状态的用法" class="headerlink" title="状态的用法"></a>状态的用法</h2><ul><li><code>getInitialState</code>：初始化状态</li><li><code>setState</code>：更新状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    state 状态的意思，一般在页面中存在状态的变化以及涉及到与状态相关的</span></span><br><span class="line"><span class="comment">        东西的时候会用他</span></span><br><span class="line"><span class="comment">    作用：根据不同的状态显示不同的UI界面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 设置初始的状态</span></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的值可以是一个boolean，string，function</span></span><br><span class="line">            onOff: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 通过点击事件来修改状态值，原来的状态值需要使用this.state获取</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            onOff: !<span class="keyword">this</span>.state.onOff</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 每一个更新状态的时候，这个render函数都会重新被调用</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.onOff?'data1':'data2'&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 设置默认的属性</span></span><br><span class="line">    getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">'现在的时间是：'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置初始的状态</span></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    changTime:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 在定时器中使用this.setState的时候需要将这个this变保存起来</span></span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            that.setState(&#123;</span><br><span class="line">                time:<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 每一个更新状态的时候，这个render函数都会重新被调用</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changTime()&#125;</span>&gt;</span>&#123;this.props.name&#125;&#123;this.state.time&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">'北京时间'</span>/&gt;</span>,document.getElementById("app"))</span></span><br></pre></td></tr></table></figure><p><strong>属性与状态的对比</strong></p><ul><li>都是纯<code>JS</code>对象，使用<code>｛｝</code>创建的对象</li><li>都会触发<code>render</code>更新</li><li>都具有确定性，给定相同的属性或者是相同的状态，结果是相同的</li></ul><p><strong>属性与状态的区分</strong></p><ul><li>组件在运行时需要修改的数据就是状态</li><li>所有的数据都可以变成状态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是生命周期&quot;&gt;&lt;a href=&quot;#一、什么是生命周期&quot; class=&quot;headerlink&quot; title=&quot;一、什么是生命周期&quot;&gt;&lt;/a&gt;一、什么是生命周期&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
               
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之JSX语法及非DOM操作属性（二）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-jsx-dom/"/>
    <id>http://yoursite.com/2017/11/19/react-study-jsx-dom/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-29T15:27:25.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JSX是什么"><a href="#一、JSX是什么" class="headerlink" title="一、JSX是什么"></a>一、JSX是什么</h2><ul><li>一个语法或者说是语法糖</li><li>基于<code>ECMAScript</code>一种新的特性</li><li>一种定义带属性（<code>DOM</code>节点）树结构（<code>DOM</code>结构）的语法</li></ul><p><strong>JSX不是</strong></p><ul><li>一门新的语言</li><li><code>XML</code>或者<code>HTML</code></li><li>一种限制，可以不使用<code>JSX</code></li></ul><h2 id="二、JSX的特点"><a href="#二、JSX的特点" class="headerlink" title="二、JSX的特点"></a>二、JSX的特点</h2><ul><li>类<code>XML</code>语法，易于接受</li><li>增强<code>JS</code>语义，在<code>js</code>中编辑<code>HTML</code></li><li>结构清晰</li><li>抽象程度高（核心）：避免手<code>动DOM</code>操作，跨平台</li><li>代码模块化</li></ul><h2 id="三、JSX语法"><a href="#三、JSX语法" class="headerlink" title="三、JSX语法"></a>三、JSX语法</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-8f3a88ee90738d7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    JSX（javaScriptXML）语法入门：</span></span><br><span class="line"><span class="comment">        1、不是一门语言，是一个语法或者说是语法糖</span></span><br><span class="line"><span class="comment">        2、JSX标签其实就是HTML标签，只不过在javascript中这些标签的时候，</span></span><br><span class="line"><span class="comment">            不使用“”,遇到HTML标签（以&lt;开始），就用HTML规则解析，遇到代码块</span></span><br><span class="line"><span class="comment">            （以&#123;开始），就用javascript规则解析</span></span><br><span class="line"><span class="comment">        3、JSX语法浏览器无法解析，需要使用插件将其转化为js代码</span></span><br><span class="line"><span class="comment">        4、代码更加直观</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1、首字母必须大写</span></span><br><span class="line"><span class="comment">    2、驼峰命名</span></span><br><span class="line"><span class="comment">    3、使用className与htmlFor代替class和for</span></span><br><span class="line"><span class="comment">    4、组件与组件之间是可以嵌套的</span></span><br><span class="line"><span class="comment">    5、在JSX语法中只能使用求值表达式，不能使用语句</span></span><br><span class="line"><span class="comment">    6、只有一个顶层标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    change:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'demo'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// this指向整个（当前的组件）组件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"demo"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>这是一个&#123;this.change()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(Demo)</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span>,document.getElementById('app'))</span></span><br></pre></td></tr></table></figure><h2 id="四、JSX的注释"><a href="#四、JSX的注释" class="headerlink" title="四、JSX的注释"></a>四、JSX的注释</h2><ul><li>在<code>JSX</code>语法中，添加注释需要写在 <code>{ }</code> 中</li><li>可以使用多行注释与单行注释</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 现在这里是属于js的部分,不属于JSX语法的部分</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"box"</span> <span class="comment">// class名字</span></span><br><span class="line">            &gt;</span><br><span class="line">                &#123;<span class="comment">/*这是一个标题*/</span>&#125;</span><br><span class="line">                &lt;h1 className=<span class="string">"title"</span>&gt;Hello World&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &#123;/</span>*这是说明*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;你好世界！&lt;/</span>p&gt;</span><br><span class="line">                &lt;div className=<span class="string">"box2"</span>&gt;你好&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="五、JSX中使用样式"><a href="#五、JSX中使用样式" class="headerlink" title="五、JSX中使用样式"></a>五、JSX中使用样式</h2><ul><li>内联样式</li><li>对象样式</li><li>选择器样式（<code>CSS</code>样式）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">组件的样式:</span></span><br><span class="line"><span class="comment">    1、行内样式：写行内样式的时候需要使用两个&#123;&#125;  ==&gt;&#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">    2、对象样式：在return前面定义一个样式对象，注意样式的写法，与HTML的不同点</span></span><br><span class="line"><span class="comment">    3、CSS样式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项，在HTML5中与在React中的样式的书写区别：</span></span><br><span class="line"><span class="comment">    1、HTML5中以;结束</span></span><br><span class="line"><span class="comment">        在React中以,结束</span></span><br><span class="line"><span class="comment">    2、在HTML5中属性与值都不需要加上引号</span></span><br><span class="line"><span class="comment">        在React中，属于javascript对象，key中不能存在 - ,</span></span><br><span class="line"><span class="comment">        需要使用驼峰命名，如果是value值，需要加上引号</span></span><br><span class="line"><span class="comment">    3、在HTML中，设置带数字的值，宽度，高度==，需要带上单位</span></span><br><span class="line"><span class="comment">        在React中可以不用带单位，直接写数字</span></span><br><span class="line"><span class="comment">        这里是指那些规定了默认单位的值。比如说像素px，如果要使用em或者是rem则需要加上单位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;&#125; 插值符号</span></span><br><span class="line"><span class="comment">在使用插值符号的是有，里面需要时一个对象或者是一个表达式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</span><br><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> styles = &#123;</span><br><span class="line">        color: <span class="string">'blue'</span>,</span><br><span class="line">        fontSize: <span class="string">'30'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"box"</span>&gt;</span><br><span class="line">            &lt;h3 className=<span class="string">"title"</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>,<span class="attr">backgroundColor</span>:<span class="string">'lime'</span>&#125;&#125;&gt;默认标题&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p className="subtitle" style=&#123;styles&#125;&gt;说明&lt;/</span>p&gt;</span><br><span class="line">            &lt;p className=<span class="string">"details"</span>&gt;这个是用来教学的案例&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">"app"</span>))</span><br></pre></td></tr></table></figure><h2 id="六、条件判断的四种写法"><a href="#六、条件判断的四种写法" class="headerlink" title="六、条件判断的四种写法"></a>六、条件判断的四种写法</h2><ul><li>三元表达式        ?    :</li><li>使用变量，通过函数使用条件判断语句，返回一个字符串</li><li>直接在<code>{}</code>中调用函数</li><li>使用比较运算符    <code>&amp;&amp;</code>   <code>||</code>！`</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、三元表达式?:</span></span><br><span class="line"><span class="comment">2、使用变量，通过函数使用条件判断语句，返回一个字符串</span></span><br><span class="line"><span class="comment">3、直接在&#123;&#125;中调用函数</span></span><br><span class="line"><span class="comment">4、使用比较运算符&amp;&amp;   ||  ！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 设置初始的状态</span></span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            onOff:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义一个点击事件</span></span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            onOff:!<span class="keyword">this</span>.state.onOff</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;this.state.onOff?</span>"<span class="attr">box2</span>"<span class="attr">:</span>"<span class="attr">box1</span>"&#125; <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>我是一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><h2 id="七、非DOM（元素）属性"><a href="#七、非DOM（元素）属性" class="headerlink" title="七、非DOM（元素）属性"></a>七、非DOM（元素）属性</h2><ul><li><code>dangerouslySetInnerHTML</code>：在<code>JSX</code>中直接插入<code>HTML</code>代码，动态的添加<code>HTML</code>内容，由用户添加。需要使用属性，<code>__html</code></li><li><code>ref</code>：父组件引用子组件    <code>this.refs.name</code></li><li><code>key</code>：目的提高渲染性能 ，涉及到<code>React diff</code>算法，<code>React</code>通过<code>key</code>值判断是否重新渲染</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JSX是什么&quot;&gt;&lt;a href=&quot;#一、JSX是什么&quot; class=&quot;headerlink&quot; title=&quot;一、JSX是什么&quot;&gt;&lt;/a&gt;一、JSX是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个语法或者说是语法糖&lt;/li&gt;
&lt;li&gt;基于&lt;code&gt;ECMAScript&lt;
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之事件（四）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-event/"/>
    <id>http://yoursite.com/2017/11/19/react-study-event/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-29T15:27:25.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、编写事件处理函数"><a href="#一、编写事件处理函数" class="headerlink" title="一、编写事件处理函数"></a>一、编写事件处理函数</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-f2421cc3f2723b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>在函数体中进行一些操作，常见的有：更新页面内容，更新组件状态，与后台交互</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-269c34a011f83c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>书写方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;&#125;,</span><br><span class="line">handleChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>上面的代码中有的有参数<code>event</code>，有的没有，这个根据自己的需求</li></ul><h2 id="二、绑定事件处理函数"><a href="#二、绑定事件处理函数" class="headerlink" title="二、绑定事件处理函数"></a>二、绑定事件处理函数</h2><ul><li><code>onClick={this,handleClick}</code></li><li>需要注意的是：不要在事件后面添加上一个<code>（）</code></li></ul><p><strong>其他的事件</strong></p><ul><li>触摸事件：<code>onTouchCancel</code>，<code>onTouchEnd</code>，<code>onTouchMove</code>，<code>onTouchStart</code></li><li>键盘事件：<code>onKeyDown</code>，<code>onKeyUp</code>， <code>onKeyPress</code>（前两者的组合）</li><li>表单时间：<code>onChange</code>，<code>onInput</code>，<code>onSubmit</code></li><li>焦点事件：<code>onFocus</code>，<code>onBlur</code></li><li>UI元素事件：<code>onScroll</code></li><li>滚动事件：<code>onWhell</code>（鼠标滚动）</li><li>鼠标事件：<code>onClick</code>，<code>onContextMenu</code>，<code>onDoubleClick</code>……</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    handleClick:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">        <span class="built_in">console</span>.log(e.target)</span><br><span class="line">        <span class="built_in">console</span>.log(e.nativeEvent)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            backgroundColor: <span class="string">'#DDDDDD'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*handleWheel:function(e)&#123;</span></span><br><span class="line"><span class="comment">        var newColor = (parseInt(this.state.backgroundColor.substr(1),16) + e.deltaY).toString(16)</span></span><br><span class="line"><span class="comment">        newColor = '#' + newColor.toUpperCase()</span></span><br><span class="line"><span class="comment">        console.log(newColor)</span></span><br><span class="line"><span class="comment">        this.setState(&#123;</span></span><br><span class="line"><span class="comment">            backgroundColor:newColor</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;,*/</span></span><br><span class="line">    randomColor:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+r+<span class="string">','</span>+g+<span class="string">','</span>+b+<span class="string">')'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleWheel:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            backgroundColor:<span class="keyword">this</span>.randomColor()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onWheel</span>=<span class="string">&#123;this.handleWheel&#125;</span> <span class="attr">style</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span>这是一个案例，鼠标滚动实现背景颜色的变化<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>))</span><br></pre></td></tr></table></figure><h2 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h2><p><strong>事件对象的使用</strong></p><ul><li>通用：所有的事件都有事件属性</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-321747a6085cf459.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>键盘：键盘事件拥有的事件属性</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-96f7e6afef18b063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>鼠标：鼠标事件拥有的事件属性</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-7d4749b26ef496d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>滚动：滚动事件拥有的事件属性<ul><li>为什么会有三个，因为有的设备可以实现三个方向的移动</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-10a91549777446a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="四、事件与状态关联"><a href="#四、事件与状态关联" class="headerlink" title="四、事件与状态关联"></a>四、事件与状态关联</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inputChange:function(event)&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">    inputText:event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总的来说就是使用<code>this.setState</code>来更新状态，而状态的值因为事件的不同会不同</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、编写事件处理函数&quot;&gt;&lt;a href=&quot;#一、编写事件处理函数&quot; class=&quot;headerlink&quot; title=&quot;一、编写事件处理函数&quot;&gt;&lt;/a&gt;一、编写事件处理函数&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
           
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux之异步Action及操作（七）</title>
    <link href="http://yoursite.com/2017/11/19/redux-study-async-operation/"/>
    <id>http://yoursite.com/2017/11/19/redux-study-async-operation/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-22T11:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建同步Action"><a href="#一、创建同步Action" class="headerlink" title="一、创建同步Action"></a>一、创建同步Action</h2><blockquote><p><code>Action</code>是数据从应用传递到 <code>store</code>/<code>state</code> 的载体，也是开启一次完成数据流的开始</p></blockquote><p><strong>普通的action对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">name:<span class="string">'poetries'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(action)</span><br></pre></td></tr></table></figure><p><strong>封装action creator</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actionCreator</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">    data:data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch(actionCreator(<span class="string">'poetries'</span>))</span><br></pre></td></tr></table></figure><p><strong>bindActionCreators合并</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">name,id</span>)</span>&#123;</span><br><span class="line">reurn &#123;</span><br><span class="line">type:<span class="string">'a'</span>,</span><br><span class="line">name,</span><br><span class="line">id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">name,id</span>)</span>&#123;</span><br><span class="line">reurn &#123;</span><br><span class="line">type:<span class="string">'b'</span>,</span><br><span class="line">name,</span><br><span class="line">id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = Redux.bindActionCreators(&#123;a,b&#125;,store.dispatch)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">actions.a(<span class="string">'poetries'</span>,<span class="string">'id001'</span>)</span><br><span class="line">actions.b(<span class="string">'jing'</span>,<span class="string">'id002'</span>)</span><br></pre></td></tr></table></figure><p><strong>action创建的标准</strong></p><blockquote><p>在Flux的架构中，一个Action要符合 FSA(Flux Standard Action) 规范，需要满足如下条件</p></blockquote><ul><li>是一个纯文本对象</li><li>只具备 <code>type</code> 、<code>payload</code>、<code>error</code> 和 <code>meta</code>中的一个或者多个属性。<code>type</code> 字段不可缺省，其它字段可缺省</li><li>若 <code>Action</code> 报错，<code>error</code> 字段不可缺省，切必须为 <code>true</code></li></ul><blockquote><p><code>payload</code> 是一个对象，用作Action携带数据的载体</p></blockquote><p><strong>标准action示例</strong></p><ul><li>A basic Flux Standard Action:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    text: <span class="string">'Do something.'</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>An FSA that represents an error, analogous to a rejected Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="keyword">new</span> <span class="built_in">Error</span>(),</span><br><span class="line">  error: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="noopener">https://github.com/acdlite/flux-standard-action</a></p></blockquote><ul><li>可以采用如下一个简单的方式检验一个<code>Action</code>是否符合FSA标准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every有一个匹配不到返回false</span></span><br><span class="line"><span class="keyword">let</span> isFSA = <span class="built_in">Object</span>.keys(action).every(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  [<span class="string">'payload'</span>,<span class="string">'type'</span>,<span class="string">'error'</span>,<span class="string">'meta'</span>].indexOf(item) &gt;  <span class="number">-1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="二、创建异步action的多种方式"><a href="#二、创建异步action的多种方式" class="headerlink" title="二、创建异步action的多种方式"></a>二、创建异步action的多种方式</h2><blockquote><p>最简单的方式就是使用同步的方式来异步，将原来同步时一个<code>action</code>拆分成多个异步的<code>action</code>的，在异步开始前、异步请求中、异步正常返回（异常）操作分别使用同步的操作，从而模拟出一个异步操作了。这样的方式是比较麻烦的，现在已经有<code>redux-saga</code>等插件来解决这些问题了</p></blockquote><p><strong>异步action的实现方式一：setTimeout</strong></p><blockquote><p><code>redux-thunk</code>中间处理解析</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkAction</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    reutrn (dispatch)=&gt;&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            dispatch(&#123;</span><br><span class="line">                type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">                data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步action的实现方式二：promise实现异步action</strong></p><blockquote><p><code>redux-promise</code>中间处理这种<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseAction</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">            resolve(&#123;</span><br><span class="line">                type:<span class="string">'ADD_TODO'</span>,</span><br><span class="line">                name</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">        dispatch(action(<span class="string">"action2"</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">param</span>)=&gt;</span>&#123;</span><br><span class="line">        dispatch(action(<span class="string">"action3"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、redux异步流程"><a href="#三、redux异步流程" class="headerlink" title="三、redux异步流程"></a>三、redux异步流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-7ada60211c8b6262.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>首先发起一个action，然后通过中间件，这里为什么要用中间件呢，因为这样<code>dispatch</code>的返回值才能是一个函数。</li><li>通过<code>store.dispatch</code>，将状态的的改变传给<code>store</code>的小弟<code>reducer</code>，<code>reducer</code>根据<code>action</code>的改变，传递新的状态<code>state</code>。</li><li>最后将所有的改变告诉给它的大哥，<code>store</code>。<code>store</code>保存着所有的数据，并将数据注入到组件的顶部，这样组件就可以获得它需要的数据了</li></ul><h2 id="四、Redux异步方案选型"><a href="#四、Redux异步方案选型" class="headerlink" title="四、Redux异步方案选型"></a>四、Redux异步方案选型</h2><p><strong>redux-thunk</strong></p><blockquote><p><code>Redux</code>本身只能处理同步的<code>Action</code>，但可以通过中间件来拦截处理其它类型的<code>action</code>，比如函数(<code>Thunk</code>)，再用回调触发普通<code>Action</code>，从而实现异步处理</p></blockquote><ul><li>发送异步的<code>action</code>其实是被中间件捕获的，函数类型的action就被<code>middleware</code>捕获。至于怎么定义异步的<code>action</code>要看你用哪个中间件，根据他们的实例来定义，这样才会正确解析<code>action</code></li></ul><blockquote><p><code>Redux</code> 本身不处理异步行为，需要依赖中间件。结合 <code>redux-actions</code> 使用，<code>Redux</code> 有两个推荐的异步中间件</p></blockquote><ul><li><code>redux-thunk</code></li><li><code>redux-promise</code></li></ul><blockquote><p><code>redux-thunk</code> 的源码如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><blockquote><p>源码可知，<code>action creator</code> 需要返回一个函数给 <code>redux-thunk</code> 进行调用，示例如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> addTodoWithThunk = <span class="function">(<span class="params">val</span>) =&gt;</span> <span class="keyword">async</span> (dispatch, getState)=&gt;&#123;</span><br><span class="line">    <span class="comment">//请求之前的一些处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(val + <span class="string">' thunk'</span>);</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">        type:CONSTANT.ADD_TO_DO_THUNK,</span><br><span class="line">        payload:&#123;</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>而它使用起来最大的问题，就是重复的模板代码太多</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>,</span><br><span class="line">    GET_DATA_SUCCESS = <span class="string">'GET_DATA_SUCCESS'</span>,</span><br><span class="line">    GET_DATA_FAILED = <span class="string">'GET_DATA_FAILED'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getDataAction = <span class="function">(<span class="params">id</span>) =&gt;</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">            type: GET_DATA, </span><br><span class="line">            payload: id</span><br><span class="line">        &#125;)</span><br><span class="line">        api.getData(id) <span class="comment">//注：本文所有示例的api.getData都返回promise对象</span></span><br><span class="line">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: GET_DATA_SUCCESS,</span><br><span class="line">                    payload: response</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;</span><br><span class="line">                    type: GET_DATA_FAILED,</span><br><span class="line">                    payload: error</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">oldState, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA : </span><br><span class="line">        <span class="keyword">return</span> oldState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_SUCCESS : </span><br><span class="line">        <span class="keyword">return</span> successState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_FAILED : </span><br><span class="line">        <span class="keyword">return</span> errorState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这已经是最简单的场景了，请注意：我们甚至还没写一行业务逻辑，如果每个异步处理都像这样，重复且无意义的工作会变成明显的阻碍</p></blockquote><ul><li>另一方面，像<code>GET_DATA_SUCCESS</code>、<code>GET_DATA_FAILED</code>这样的字符串声明也非常无趣且易错<br>上例中，<code>GET_DATA</code>这个<code>action</code>并不是多数场景需要的</li></ul><p><strong>redux-promise</strong></p><blockquote><p>由于<code>redux-thunk</code>写起来实在是太麻烦了，社区当然会有其它轮子出现。<code>redux-promise</code>则是其中比较知名的</p></blockquote><ul><li>它自定义了一个<code>middleware</code>，当检测到有<code>action</code>的<code>payload</code>属性是<code>Promise</code>对象时，就会<ul><li>若<code>resolve</code>，触发一个此<code>action</code>的拷贝，但<code>payload</code>为<code>promise</code>的<code>value</code>，并设<code>status</code>属性为<code>&quot;success&quot;</code></li><li>若<code>reject</code>，触发一个此<code>action</code>的拷贝，但<code>payload</code>为<code>promise</code>的<code>reason</code>，并设<code>status</code>属性为<code>&quot;error&quot;</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_DATA,</span><br><span class="line">        payload: api.getData(id) <span class="comment">//payload为promise对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">oldState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> GET_DATA: </span><br><span class="line">            <span class="keyword">if</span> (action.status === <span class="string">'success'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> successState</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> errorState</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>redux-promise</code>为了精简而做出的妥协非常明显：无法处理乐观更新</p></blockquote><p><strong>场景解析之：乐观更新</strong></p><blockquote><p>多数异步场景都是悲观更新的，即等到请求成功才渲染数据。而与之相对的乐观更新，则是不等待请求成功，在发送请求的同时立即渲染数据</p></blockquote><ul><li>由于乐观更新发生在用户操作时，要处理它，意味着必须有action表示用户的初始动作</li><li>在上面<code>redux-thunk</code>的例子中，我们看到了<code>GET_DATA</code>, <code>GET_DATA_SUCCESS</code>、<code>GET_DATA_FAILED</code>三个<code>action</code>，分别表示初始动作、异步成功和异步失败，其中第一个<code>action</code>使得<code>redux-thunk</code>具备乐观更新的能力</li><li>而在<code>redux-promise</code>中，最初触发的action被中间件拦截然后过滤掉了。原因很简单，<code>redux</code>认可的<code>action</code>对象是 <code>plain JavaScript objects</code>，即简单对象，而在<code>redux-promise</code>中，初始<code>action</code>的<code>payload</code>是个<code>Promise</code></li></ul><p><strong>redux-promise-middleware</strong></p><blockquote><p><code>redux-promise-middleware</code>相比<code>redux-promise</code>，采取了更为温和和渐进式的思路，保留了和<code>redux-thunk</code>类似的三个<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//action types</span></span><br><span class="line"><span class="keyword">const</span> GET_DATA = <span class="string">'GET_DATA'</span>,</span><br><span class="line">    GET_DATA_PENDING = <span class="string">'GET_DATA_PENDING'</span>,</span><br><span class="line">    GET_DATA_FULFILLED = <span class="string">'GET_DATA_FULFILLED'</span>,</span><br><span class="line">    GET_DATA_REJECTED = <span class="string">'GET_DATA_REJECTED'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//action creator</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: GET_DATA,</span><br><span class="line">        payload: &#123;</span><br><span class="line">            promise: api.getData(id),</span><br><span class="line">            data: id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span>(<span class="params">oldState, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_PENDING :</span><br><span class="line">        <span class="keyword">return</span> oldState; <span class="comment">// 可通过action.payload.data获取id</span></span><br><span class="line">    <span class="keyword">case</span> GET_DATA_FULFILLED : </span><br><span class="line">        <span class="keyword">return</span> successState;</span><br><span class="line">    <span class="keyword">case</span> GET_DATA_REJECTED : </span><br><span class="line">        <span class="keyword">return</span> errorState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、redux异步操作代码演示"><a href="#五、redux异步操作代码演示" class="headerlink" title="五、redux异步操作代码演示"></a>五、redux异步操作代码演示</h2><ul><li>根据官网的async例子分析 <a href="https://github.com/lewis617/react-redux-tutorial/tree/master/redux-examples/async" target="_blank" rel="noopener">https://github.com/lewis617/react-redux-tutorial/tree/master/redux-examples/async</a></li></ul><p><strong>action/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'isomorphic-fetch'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_POSTS = <span class="string">'RECEIVE_POSTS'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取新闻成功的action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receivePosts</span>(<span class="params">reddit, json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: RECEIVE_POSTS,</span><br><span class="line">    reddit: reddit,</span><br><span class="line">    posts: json.data.children.map(<span class="function"><span class="params">child</span> =&gt;</span>child.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchPosts</span>(<span class="params">subreddit</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">`http://www.subreddit.com/r/<span class="subst">$&#123;subreddit&#125;</span>.json`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span></span><br><span class="line">        dispatch(receivePosts(subreddit, json))</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要则开始获取文章</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchPostsIfNeeded</span>(<span class="params">subreddit</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> dispatch(fetchPosts(subreddit))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>fetchPostsIfNeeded</code>这里就是一个中间件。<code>redux-thunk</code>会拦截<code>fetchPostsIfNeeded</code>这个<code>action</code>，会先发起数据请求，如果成功，就将数据传给<code>action</code>从而到达<code>reducer</code>那里</p></blockquote><p><strong>reducers/index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  RECEIVE_POSTS</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params">state = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  items: []</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> RECEIVE_POSTS:</span><br><span class="line">      <span class="comment">// Object.assign是ES6的一个语法。合并对象，将对象合并为一个，前后相同的话，后者覆盖强者。详情可以看这里</span></span><br><span class="line">      <span class="comment">//  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        items: action.posts <span class="comment">//数据都存在了这里</span></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有的reducer结合为一个,传给store</span></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  postsByReddit</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure><blockquote><p>这个跟正常的<code>reducer</code>差不多。判断<code>action</code>的类型，从而根据<code>action</code>的不同类型，返回不同的数据。这里将数据存储在了<code>items</code>这里。这里的<code>reducer</code>只有一个。最后结合成<code>rootReducer</code>,传给<code>store</code></p></blockquote><p><strong>store/configureStore.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(</span><br><span class="line">  thunkMiddleware,  </span><br><span class="line">  createLogger()  </span><br><span class="line">)(createStore)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = createStoreWithMiddleware(rootReducer, initialState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="comment">// Enable Webpack hot module replacement for reducers</span></span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'../reducers'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> nextRootReducer = <span class="built_in">require</span>(<span class="string">'../reducers'</span>)</span><br><span class="line">      store.replaceReducer(nextRootReducer)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们是如何在 <code>dispatch</code> 机制中引入 <code>Redux Thunk middleware</code> 的呢？<br>我们使用了<code>applyMiddleware()</code></li><li>通过使用指定的 <code>middleware</code>，<code>action creator</code> 除了返回 <code>action</code> 对象外还可以返回函数</li><li>这时，这个 <code>action creator</code> 就成为了 <code>thunk</code></li></ul><p><strong>界面上的调用：在containers/App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化渲染后触发</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 这里可以传两个值，一个是 reactjs 一个是 frontend</span></span><br><span class="line">    dispatch(fetchPostsIfNeeded(<span class="string">'frontend'</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>改变状态的时候也是需要通过<code>dispatch</code>来传递的</p></blockquote><ul><li>数据的获取是通过<code>provider</code>,将<code>store</code>里面的数据注入给组件。让顶级组件提供给他们的子孙组件调用。代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-core/polyfill'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/App'</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configureStore'</span></span><br><span class="line"><span class="keyword">const</span> store = configureStore()</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><blockquote><p>这样就完成了<code>redux</code>的异步操作。其实最主要的区别还是<code>action</code>里面还有中间件的调用，其他的地方基本跟同步的<code>redux</code>差不多的。搞懂了中间件，就基本搞懂了<code>redux</code>的异步操作</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-7937f0072593a955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建同步Action&quot;&gt;&lt;a href=&quot;#一、创建同步Action&quot; class=&quot;headerlink&quot; title=&quot;一、创建同步Action&quot;&gt;&lt;/a&gt;一、创建同步Action&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Action&lt;/cod
      
    
    </summary>
    
      <category term="Front-End" scheme="http://yoursite.com/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之环境的搭建（一）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-build-env/"/>
    <id>http://yoursite.com/2017/11/19/react-study-build-env/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-29T15:27:25.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是react"><a href="#一、什么是react" class="headerlink" title="一、什么是react"></a>一、什么是react</h2><ul><li>react是由Facebook开发的一个JavaScript库，而不是一个框架。当时Facebook需要解决一个问题，开发（或者说是构建）一个数据不断变化的大型应用。而数据变化会带来两个很严重的问题</li></ul><h2 id="二、react的特点"><a href="#二、react的特点" class="headerlink" title="二、react的特点"></a>二、react的特点</h2><ul><li>简单：学习简单，代码简单</li><li>声明式（编程）：自动<code>DOM</code>操作</li></ul><blockquote><p><code>React</code>的核心是组件，组件的设计目的是提升代码的复用率、降低测试难度和代码复杂度。</p></blockquote><ul><li>提高代码复用率：组件将数据与逻辑封装</li><li>降低测试难度：组件高内聚低耦合，很容易对单个组件进行测试</li><li>降低代码复杂度：使用<code>JSX</code>语法，更直观的在js文件中看<code>HTML</code>代码，提高可读性</li></ul><h2 id="三、react的开发环境的配置"><a href="#三、react的开发环境的配置" class="headerlink" title="三、react的开发环境的配置"></a>三、react的开发环境的配置</h2><blockquote><p>如果是要直接在<code>HTML</code>上编辑，需要下载<code>react.js</code>与<code>react-dom.js</code>。如果要使用JSX语法，则需要使用转换<code>JSX</code>语法的插件。这里使用<code>brower.js</code>。在线地址：<a href="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js</a></p></blockquote><ul><li><code>react.js</code>：<code>react</code>的核心库</li><li><code>react-dom.js</code>：提供操作<code>DOM</code>相关的功能</li><li><code>brower,js</code>：将使用的<code>JSX</code>语法转换成<code>JavaScript</code>语法</li></ul><blockquote><p>注意：三者引用顺序必须是<code>react</code>、<code>react-dom</code>、<code>brower</code></p></blockquote><h2 id="四、React、ReactDOM中有什么"><a href="#四、React、ReactDOM中有什么" class="headerlink" title="四、React、ReactDOM中有什么"></a>四、React、ReactDOM中有什么</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-57b13a4de85f4636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-5139d73619a38b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="五、yeoman环境"><a href="#五、yeoman环境" class="headerlink" title="五、yeoman环境"></a>五、yeoman环境</h2><blockquote><p><code>yeoman</code>前端脚手架工具</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g yeoman</span><br></pre></td></tr></table></figure><ul><li><a href="http://yeoman.io/" target="_blank" rel="noopener">http://yeoman.io/</a></li></ul><blockquote><p><a href="https://github.com/react-webpack-generators/generator-react-webpack#readme" target="_blank" rel="noopener">https://github.com/react-webpack-generators/generator-react-webpack#readme</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Make sure both is installed globally</span><br><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-react-webpack</span><br><span class="line"></span><br><span class="line"># Create a new directory, and `cd` into it:</span><br><span class="line">mkdir my-<span class="keyword">new</span>-project &amp;&amp; cd my-<span class="keyword">new</span>-project</span><br><span class="line"></span><br><span class="line"># Run the generator</span><br><span class="line">yo react-webpack</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Start for development</span><br><span class="line">npm start # or</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line"># Start the dev-server with the dist version</span><br><span class="line">npm run serve:dist</span><br><span class="line"></span><br><span class="line"># Just build the dist version and copy static files</span><br><span class="line">npm run dist</span><br><span class="line"></span><br><span class="line"># Run unit tests</span><br><span class="line">npm test</span><br><span class="line"></span><br><span class="line"># Auto-run unit tests on file changes</span><br><span class="line">npm run test:watch</span><br><span class="line"></span><br><span class="line"># Lint all files in src (also automatically done AFTER tests are run)</span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"># Clean up the dist directory</span><br><span class="line">npm run clean</span><br><span class="line"></span><br><span class="line"># Just copy the static assets</span><br><span class="line">npm run copy</span><br></pre></td></tr></table></figure><h2 id="六、React脚手架搭建"><a href="#六、React脚手架搭建" class="headerlink" title="六、React脚手架搭建"></a>六、React脚手架搭建</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app your-app-name &amp;&amp; cd your-app-name</span><br><span class="line"></span><br><span class="line">npm install </span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是react&quot;&gt;&lt;a href=&quot;#一、什么是react&quot; class=&quot;headerlink&quot; title=&quot;一、什么是react&quot;&gt;&lt;/a&gt;一、什么是react&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;react是由Facebook开发的一个JavaScript库，
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React之组件的协同及（不）可控组件（五）</title>
    <link href="http://yoursite.com/2017/11/19/react-study-component-corp-and-uncontrol/"/>
    <id>http://yoursite.com/2017/11/19/react-study-component-corp-and-uncontrol/</id>
    <published>2017-11-18T17:10:24.000Z</published>
    <updated>2018-03-29T15:27:25.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么要进行组件的协同"><a href="#一、为什么要进行组件的协同" class="headerlink" title="一、为什么要进行组件的协同"></a>一、为什么要进行组件的协同</h2><ul><li>我们在实际的开发项目的时候，不会只用几个组件，有时候遇到大型的项目，可能会有成千上百的组件，难免会遇到有功能重复的组件。要进行修改，就会修改大部分的文件。所以我们需要进行组件的协同开发。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-ca3cbaafe961fa83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、什么是组件的协同使用？"><a href="#二、什么是组件的协同使用？" class="headerlink" title="二、什么是组件的协同使用？"></a>二、什么是组件的协同使用？</h2><ul><li>组件的协同本质上是对组件的一种组织、管理的方式。</li><li>目的：<ul><li>逻辑清晰：这是组件与组件之间的逻辑</li><li>代码模块化</li><li>封装细节：像面向对象一样将常用的方法以及数据封装起来</li><li>提高代码的复用性：因为是组件，相当于一个封装好的东西，用的时候直接调用</li></ul></li></ul><h2 id="三、如何实现组件的协同使用"><a href="#三、如何实现组件的协同使用" class="headerlink" title="三、如何实现组件的协同使用"></a>三、如何实现组件的协同使用</h2><ul><li>第一种：增加一个父组件，将其他的组件进行嵌套，更多的是实现代码的封装</li><li>第二种：通过一些操作从后台获取数据，<code>React</code>中的<code>Mixin</code>，更多的是实现代码的复用</li></ul><h2 id="四、组件嵌套的含义"><a href="#四、组件嵌套的含义" class="headerlink" title="四、组件嵌套的含义"></a>四、组件嵌套的含义</h2><ul><li>组件嵌套的本质是父子关系</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-dc00c2b2c9ac3807.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="五、组件嵌套的优缺点"><a href="#五、组件嵌套的优缺点" class="headerlink" title="五、组件嵌套的优缺点"></a>五、组件嵌套的优缺点</h2><ul><li>优点：<ul><li>逻辑清晰：父子关系类似于人类中的父子关系</li><li>模块化开发：每个模块对应一个功能，不同的模块可以同步开发</li><li>封装细节：开发者必须要关注组件的功能，不需要了解细节</li></ul></li><li>缺点：<ul><li>编写难度高：父子组件的关系需要经过深思熟虑，贸然编写可能导致关系混乱，代码难以维护</li><li>无法掌握所有细节：使用者只知道组件的用法，不知道实现细节，遇到问题难以修复</li></ul></li></ul><h2 id="六、Mixin"><a href="#六、Mixin" class="headerlink" title="六、Mixin"></a>六、Mixin</h2><p><strong>Mixin的含义</strong></p><ul><li><code>Mixin=一组方法</code>。</li><li>他的目的是横向抽离出组件的相似代码，把组件的共同作用以及效果的代码提出来</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-ceca4b322b820239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>Mixin的优缺点</strong></p><ul><li>优点<ul><li>代码复用：抽离出通用的代码，减少开发成本，提高开发效率</li><li>即插即用：可以使用许多现有的<code>Mixin</code>来开发自己的代码</li><li>适应性强：改动一次代码，影响多个组件</li></ul></li><li>缺点<ul><li>编写难度高：<code>Mixin</code>可能被用在各种环境中，想要兼容多种环境就需要更多的  - 码与逻辑，通用的代价是提高复杂度</li><li>降低代码的可读性：组件的优势在于将逻辑与是界面直接结合在一起，<code>Mixin</code>本质上会分散逻辑，理解起来难度大</li></ul></li></ul><h2 id="七、不可控组件"><a href="#七、不可控组件" class="headerlink" title="七、不可控组件"></a>七、不可控组件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-34b3ac31175733e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li>上图：<code>defaultValue</code>的值是固定的，这就是一个不可控组件</li><li>如果要获取<code>input</code>的<code>value</code>值，只有使用<code>ref</code>获取节点来获取值</li></ul><h2 id="八、可控组件"><a href="#八、可控组件" class="headerlink" title="八、可控组件"></a>八、可控组件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-daeeefc5cd7c054d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><code>defaultValue</code>的值是根据状态确定了，只需要拿到<code>this.state.value</code>的值就可以了</li><li>这里需要注意一下：使用<code>value</code>的值是不可修改的，<code>defaultValue</code>的值是可以修改的</li></ul><p><strong>可控组件的优点</strong></p><ul><li>符合<code>React</code>的数据流</li><li>数据存储在<code>state</code>中，便于获取</li><li>便于处理数据</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、为什么要进行组件的协同&quot;&gt;&lt;a href=&quot;#一、为什么要进行组件的协同&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要进行组件的协同&quot;&gt;&lt;/a&gt;一、为什么要进行组件的协同&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们在实际的开发项目的时候，不会只用几个
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>浅谈styled-components</title>
    <link href="http://yoursite.com/2017/11/08/react-styled-components/"/>
    <id>http://yoursite.com/2017/11/08/react-styled-components/</id>
    <published>2017-11-08T08:55:24.000Z</published>
    <updated>2018-03-29T15:27:26.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p><code>styled components</code>一种全新的控制样式的编程方式，它能解决<code>CSS</code>全局作用域的问题，而且移除了样式和组件间的映射关系</p></blockquote><ul><li>我们要理清一件事情：<code>styled-components</code> 只是 <code>CSS</code> 层面的高度抽象。它只是解析定义在 <code>JavaScript</code>中的 <code>CSS</code>，然后生成对应 <code>CSS</code> 的 <code>JSX</code>元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> Title = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">    font-size: 1.5em;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: palevioletred;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">WrapSearchBox=styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    width : 200px;</span></span><br><span class="line"><span class="string">    // 媒体查询</span></span><br><span class="line"><span class="string">    @media (max-width : 800px)&#123;</span></span><br><span class="line"><span class="string">    width : 100%;</span></span><br><span class="line"><span class="string">    padding-left:15px;</span></span><br><span class="line"><span class="string">    margin-top:-14px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &gt;div&#123;</span></span><br><span class="line"><span class="string">    @media (max-width : 800px)&#123;</span></span><br><span class="line"><span class="string">    width : 100%  !important;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &gt;div&gt;input &#123;</span></span><br><span class="line"><span class="string">    width:200px !important;</span></span><br><span class="line"><span class="string">    padding-left:25px !important;</span></span><br><span class="line"><span class="string">    @media (max-width : 800px)&#123;</span></span><br><span class="line"><span class="string">    width : 100%  !important;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Title&gt;Hello world&lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">render(</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>styled.h1</code>是一个标签模板函数</li></ul><blockquote><p><code>styled.h1</code>函数返回一个<code>React Component</code>，<code>styled components</code>会为这个<code>React Component</code>添加一个<code>class</code>，该<code>class</code>的值为一个随机字符串。传给styled.h1的模板字符串参数的值实际上是CSS语法，这些CSS会附加到该<code>React Component</code>的<code>class</code>中，从而为<code>React Component</code>添加样式</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-1c0b2f09980a8a0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="二、基于-props-定制主题"><a href="#二、基于-props-定制主题" class="headerlink" title="二、基于 props 定制主题"></a>二、基于 props 定制主题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">'palevioletred'</span> : <span class="string">'white'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">'white'</span> : <span class="string">'palevioletred'</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Button&gt;Normal&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button primary&gt;Primary&lt;/</span>Button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> StyledSlider = styled(Slider)<span class="string">`</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;props =&gt; &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="keyword">const</span> theme = props.theme.slider;</span></span></span><br><span class="line"><span class="string"><span class="subst"></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="keyword">return</span> css<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">div.rc-slider-track &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">background-color: <span class="subst">$&#123;theme.themeColor&#125;</span>;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">div.rc-slider-handle &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">border: 2px solid <span class="subst">$&#123;theme.themeColor&#125;</span>;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">span.rc-slider-dot-active &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">border-color: <span class="subst">$&#123;theme.themeColor&#125;</span>;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">`</span>;</span></span></span><br><span class="line"><span class="string"><span class="subst">&#125;</span>&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SmallSelectWrapper = styled.div <span class="string">`</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  // div下面的类样式</span></span><br><span class="line"><span class="string">  .Select-control &#123;</span></span><br><span class="line"><span class="string">    height: 30px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .Select-input &#123;</span></span><br><span class="line"><span class="string">    height: 28px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .Select-value,</span></span><br><span class="line"><span class="string">  .Select-placeholder &#123;</span></span><br><span class="line"><span class="string">    line-height: 28px !important;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .Select-menu-outer &#123;</span></span><br><span class="line"><span class="string">    max-height: 270px;</span></span><br><span class="line"><span class="string">    .Select-option.is-disabled &#123;</span></span><br><span class="line"><span class="string">      cursor: default;</span></span><br><span class="line"><span class="string">      padding-left: .5em;</span></span><br><span class="line"><span class="string">      font-weight: bold;</span></span><br><span class="line"><span class="string">      color: #333;</span></span><br><span class="line"><span class="string">      background: #f8f8f8;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .Select-menu &#123;</span></span><br><span class="line"><span class="string">    max-height:268px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  text-align: left;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><blockquote><p>我们在组件中传入的所有 <code>props</code> 都可以在定义组件时获取到，这样就可以很容易实现组件主题的定制。如果没有 <code>styled-components</code>的情况下，需要使用组件 <code>style</code> 属性或者定义多个 <code>class</code> 的方式来实现</p></blockquote><h2 id="三、组件样式继承"><a href="#三、组件样式继承" class="headerlink" title="三、组件样式继承"></a>三、组件样式继承</h2><blockquote><p>通常在 <code>css</code> 中一般会通过给 <code>class</code>传入多个 <code>name</code> 通过空格分隔的方式来复用 <code>class</code> 定义，类似 <code>class=&quot;button tomato&quot;</code>。在 <code>styled-components</code>中利用了 <code>js</code> 的继承实现了这种样式的复用：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TomatoButton = Button.extend<span class="string">`</span></span><br><span class="line"><span class="string">  color: tomato;</span></span><br><span class="line"><span class="string">  border-color: tomato;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><blockquote><p>子组件中的属性会覆盖父组件中同名的属性</p></blockquote><h2 id="四、组件内部使用-className"><a href="#四、组件内部使用-className" class="headerlink" title="四、组件内部使用 className"></a>四、组件内部使用 className</h2><blockquote><p>在日常开发中总会出现覆盖组件内部样式的需求，你可能想在 <code>styled-components</code> 中使用 <code>className</code>，或者在使用第三方组件时。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Wrapper&gt;</span><br><span class="line">  &lt;h4&gt;Hello Word&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div className="detail"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/Wrapper&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、组件中维护其他属性"><a href="#五、组件中维护其他属性" class="headerlink" title="五、组件中维护其他属性"></a>五、组件中维护其他属性</h2><blockquote><p><code>styled-components</code> 同时支持为组件传入 <code>html</code> 元素的其他属性，比如为 <code>input</code> 元素指定一个 <code>type</code> 属性，我们可以使用 <code>attrs</code> 方法来完成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Password = styled.input.attrs(&#123;</span><br><span class="line">  type: <span class="string">'password'</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>在实际开发中，这个方法还有一个有用处，用来引用第三方类库的 <code>css</code>样式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = styled.button.attrs(&#123;</span><br><span class="line">  className: <span class="string">'small'</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  background: black;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid black;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><ul><li>编译后的 <code>html</code> 结构如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"sc-gPEVay small gYllyG"</span>&gt;</span><br><span class="line">  Styled Components</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以用这种方式来使用在别处定义的 <code>small</code> 样式，或者单纯为了识别自己定义的 <code>class</code>，因为正常情况下我们得到的 <code>class</code>名是不可读的编码</p></blockquote><h2 id="六、CSS-动画支持"><a href="#六、CSS-动画支持" class="headerlink" title="六、CSS 动画支持"></a>六、CSS 动画支持</h2><ul><li><code>styled-components</code> 同样对 <code>css</code> 动画中的 <code>@keyframe</code> 做了很好的支持。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">const</span> fadeIn = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  0% &#123;</span></span><br><span class="line"><span class="string">    opacity: 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  100% &#123;</span></span><br><span class="line"><span class="string">    opacity: 1;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FadeInButton = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  animation: 1s <span class="subst">$&#123;fadeIn&#125;</span> ease-out;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="七、兼容现在已有的-react-components-和-css-框架"><a href="#七、兼容现在已有的-react-components-和-css-框架" class="headerlink" title="七、兼容现在已有的 react components 和 css 框架"></a>七、兼容现在已有的 react components 和 css 框架</h2><blockquote><p><code>styled-components</code> 采用的 <code>css-module</code> 的模式有另外一个好处就是可以很好的与其他的主题库进行兼容。因为大部分的 <code>css</code> 框架或者<code>css</code>主题都是以 <code>className</code> 的方式进行样式处理的，额外的 <code>className</code> 和主题的 <code>className</code> 并不会有太大的冲突</p></blockquote><ul><li><code>styled-components</code> 的语法同样支持对一个 <code>React</code>组件进行扩展</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StyledDiv = styled(Row)<span class="string">`</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  height: 100%;</span></span><br><span class="line"><span class="string">  .image img &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .content &#123;</span></span><br><span class="line"><span class="string">    min-height: 30em;</span></span><br><span class="line"><span class="string">    overflow: auto;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .content h2 &#123;</span></span><br><span class="line"><span class="string">    font-size: 1.8em;</span></span><br><span class="line"><span class="string">    color: black;</span></span><br><span class="line"><span class="string">    margin-bottom: 1em;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="八、实战篇"><a href="#八、实战篇" class="headerlink" title="八、实战篇"></a>八、实战篇</h2><p><strong>extend与styled</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*基础组件button*/</span></span><br><span class="line">export const Button = styled.button`</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">padding</span>: 0<span class="selector-class">.25em</span> 1<span class="selector-tag">em</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: 0 1<span class="selector-tag">em</span>;</span><br><span class="line">    background: $&#123;props=&gt;props.primary?"palevioletred":"transparent"&#125;;</span><br><span class="line">    color: $&#123;props=&gt;props.primary?"white":"palevioletred"&#125;;</span><br><span class="line">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">palevioletred</span>;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩展按钮的属性，不再原来基础上修改 如在&lt;button class="abc con"&gt;上添加一个con类一样*/</span></span><br><span class="line">export const AButton = styled(Button)`</span><br><span class="line">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩展的结果*/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.25em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">color</span>: palevioletred;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid palevioletred;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**添加的扩展属性**/</span></span><br><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*继承按钮的样式并且在原来基础上修改  如在&lt;button class="con"&gt;.con类上叠加属性一样**/</span></span><br><span class="line">export const TomatoButton = Button.extend`</span><br><span class="line">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:10</span>%;</span><br><span class="line">`</span><br><span class="line"><span class="comment">/*继承的结果  子组件中的属性会覆盖父组件中同名的属性*/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.25em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">color</span>: palevioletred;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid palevioletred;</span><br><span class="line">    <span class="comment">/*添加的继承属性*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Button = styled.button`</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">`;</span><br><span class="line">const TomatoButton = Button.extend`</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#f00</span>;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** css写法 **/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.tomato-button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传递属性的两中写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">secondary</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span> <span class="attr">active</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对单个属性的值做判断赋值*/</span></span><br><span class="line"><span class="selector-tag">styled</span><span class="selector-class">.Button</span>`</span><br><span class="line">  background: $&#123;props =&gt; props.primary ? '#f00' : props.secondary ? '#0f0' : '#00f'&#125;;</span><br><span class="line">  color: $&#123;props =&gt; props.primary ? '#fff' : props.secondary ? '#fff' : '#000'&#125;;</span><br><span class="line">  opacity: $&#123;props =&gt; props.active ? 1 : 0&#125;;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Button = styled.button`</span><br><span class="line"><span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding</span>: 0<span class="selector-class">.25em</span> 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 0 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">palevioletred</span>;</span><br><span class="line"><span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">palevioletred</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*可以写一堆属性*/</span></span><br><span class="line">$&#123;props =&gt; props.primary &amp;&amp; css`</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">palevioletred</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">white</span>;</span><br><span class="line">`&#125;</span><br><span class="line">`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**css写法**/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00f</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span>,</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.seconary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.secondary</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">primary</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><ul><li>提出了 <code>container</code> 和 <code>components</code> 的概念，移除了组件和样式之间的映射关系，符合关注度分离的模式；</li><li>可以在样式定义中直接引用到 <code>js</code> 变量，共享变量，非常便利；</li><li>支持组件之间继承，方便代码复用，提升可维护性；</li><li>兼容现有的 <code>className</code> 方式，升级无痛；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;styled components&lt;/code&gt;一种全新的控制样式的编程方式，它能解决
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react知识点回顾</title>
    <link href="http://yoursite.com/2017/11/07/react-summary/"/>
    <id>http://yoursite.com/2017/11/07/react-summary/</id>
    <published>2017-11-07T11:55:24.000Z</published>
    <updated>2018-03-29T15:27:26.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、npm的配置"><a href="#一、npm的配置" class="headerlink" title="一、npm的配置"></a>一、npm的配置</h2><blockquote><p>切换淘宝镜像源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><blockquote><p>使用npm安装react</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install react react-dom --save</span><br></pre></td></tr></table></figure><h2 id="二、开发环境配置"><a href="#二、开发环境配置" class="headerlink" title="二、开发环境配置"></a>二、开发环境配置</h2><blockquote><p>这里使用<code>create-react-app</code>初始化项目</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br></pre></td></tr></table></figure><blockquote><p>安装完成之后就可以在命令行使用 <code>create-react-app</code> 了，首先选择一个合适的目录，然后只需要简单地输入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app yourfilename</span><br></pre></td></tr></table></figure><h2 id="三、认识JSX"><a href="#三、认识JSX" class="headerlink" title="三、认识JSX"></a>三、认识JSX</h2><h3 id="3-1-JSX-简介"><a href="#3-1-JSX-简介" class="headerlink" title="3.1 JSX 简介"></a>3.1 JSX 简介</h3><blockquote><p><code>JSX</code> 其是一个语法扩展，它既不是单纯的字符串，也不是<code>HTML</code>，虽然长得和 <code>HTML</code> 很像甚至基本上看起来一样。但事实上它是 <code>React</code> 内部实现的一种，允许我们直接在 <code>JS</code> 里书写 <code>UI</code> 的方式</p></blockquote><h3 id="3-2-JSX-属性"><a href="#3-2-JSX-属性" class="headerlink" title="3.2 JSX 属性"></a>3.2 JSX 属性</h3><blockquote><p><code>JSX</code> 的标签同样可以拥有自己的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span>React Learning<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意是 className 而不是 class</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span>React Learning<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-3-JSX-嵌套"><a href="#3-3-JSX-嵌套" class="headerlink" title="3.3 JSX 嵌套"></a>3.3 JSX 嵌套</h3><blockquote><p><code>JSX</code> 的标签也可以像 <code>HTML</code> 一样相互嵌套，一般有嵌套解构的 <code>JSX</code> 元素外面，我们习惯于为它加上一个小括号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;Let's learn JSX&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<code>JSX</code> 在嵌套时，最外层有且只能有一个标签，否则就会出错</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个错误示例</span></span><br><span class="line"><span class="keyword">const</span> title = (            </span><br><span class="line">    &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Let's learn JSX&lt;/</span>p&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-4-JSX表达式"><a href="#3-4-JSX表达式" class="headerlink" title="3.4 JSX表达式"></a>3.4 JSX表达式</h3><blockquote><p>在 <code>JSX</code> 元素中，我们同样可以使用 <code>JavaScript</code> 表达式，在 <code>JSX</code> 当中的表达式需要用一个大括号括起来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayhi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hi,'</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">"main"</span>&gt;React Learning&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;Let's learn JSX. &lt;span&gt;&#123;sayhi('you')&#125;&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="四、组件类型"><a href="#四、组件类型" class="headerlink" title="四、组件类型"></a>四、组件类型</h2><h3 id="4-1-函数定义与类定义组件"><a href="#4-1-函数定义与类定义组件" class="headerlink" title="4.1 函数定义与类定义组件"></a>4.1 函数定义与类定义组件</h3><blockquote><p>第一种函数定义组件，非常简单啦，我们只需要定义一个接收<code>props</code>传值，返回<code>React</code>元素的方法即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Title</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 甚至使用ES6的箭头函数简写之后可以变成这样</span></span><br><span class="line"><span class="keyword">const</span> Title = <span class="function"><span class="params">props</span> =&gt;</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第二种是类定义组件，也就是使用<code>ES6</code>中新引入的类的概念来定义<code>React</code>组件</p></blockquote><ul><li>组件在定义好之后，可以通过<code>JSX</code>描述的方式被引用，组件之间也可以相互嵌套和组合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-展示与容器组件"><a href="#4-2-展示与容器组件" class="headerlink" title="4.2 展示与容器组件"></a>4.2 展示与容器组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示组件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderComment(&#123;body, author&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;body&#125;—&#123;author&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> &#123;this.props.comments.map(this.renderComment)&#125; <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentListContainer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">comments</span>: [] &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"/my-comments.json"</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">comments</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">comments</span>: comments&#125;)</span><br><span class="line">      &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CommentList</span> <span class="attr">comments</span>=<span class="string">&#123;this.state.comments&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>展示组件</strong></p><ul><li>主要负责组件内容如何展示</li><li>从<code>props</code>接收父组件传递来的数据</li><li>大多数情况可以通过函数定义组件声明</li></ul><p><strong>容器组件</strong></p><ul><li>主要关注组件数据如何交互</li><li>拥有自身的<code>state</code>，从服务器获取数据，或与<code>redux</code>等其他数据处理模块协作</li><li>需要通过类定义组件声明，并包含生命周期函数和其他附加方法</li></ul><p><strong>那么这样写具体有什么好处呢？</strong></p><ul><li>解耦了界面和数据的逻辑</li><li>更好的可复用性，比如同一个回复列表展示组件可以套用不同数据源的容器组件</li><li>利于团队协作，一个人负责界面结构，一个人负责数据交互</li></ul><h3 id="4-3-有状态与无状态组件"><a href="#4-3-有状态与无状态组件" class="headerlink" title="4.3 有状态与无状态组件"></a>4.3 有状态与无状态组件</h3><p><strong>有状态组件</strong></p><blockquote><p>这个组件能够获取储存改变应用或组件本身的状态数据，在<code>React</code>当中也就是<code>state</code>，一些比较明显的特征是我们可以在这样的组件当中看到对<code>this.state</code>的初始化，或<code>this.setState</code>方法的调用</p></blockquote><p><strong>无状态组件</strong></p><blockquote><p>这样的组件一般只接收来自其他组件的数据。一般这样的组件中只能看到对<code>this.props</code>的调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      active: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      active: !<span class="keyword">this</span>.state.active</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> </span></span></span><br><span class="line"><span class="xml">          style=&#123;&#123; color: this.state.active ? 'red' : 'black' &#125;&#125;</span></span><br><span class="line"><span class="xml">          onClick=&#123;this.handleClick.bind(this)&#125;</span></span><br><span class="line"><span class="xml">         &gt;</span></span><br><span class="line"><span class="xml">           Stateful Link</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.handleClick(<span class="keyword">this</span>.props.router)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> active = <span class="keyword">this</span>.props.activeRouter === <span class="keyword">this</span>.props.router</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a </span><br><span class="line">              style=&#123;&#123; <span class="attr">color</span>: active ? <span class="string">'red'</span> : <span class="string">'black'</span> &#125;&#125;</span><br><span class="line">              onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">             &gt;</span><br><span class="line">                Stateless Link</span><br><span class="line">            &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>React</code>的实际开发当中，我们编写的组件大部分都是无状态组件。毕竟<code>React</code>的主要作用是编写用户界面。再加上<code>ES6</code>的新特性，绝大多数的无状态组件都可以通过箭头函数简写成类似下面这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SimpleButton = <span class="function"><span class="params">props</span> =&gt;</span> &lt;button&gt;&#123;props.text&#125;&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-受控与非受控组件"><a href="#4-4-受控与非受控组件" class="headerlink" title="4.4 受控与非受控组件"></a>4.4 受控与非受控组件</h3><p><strong>受控组件</strong></p><blockquote><p>比如说设置了<code>value</code>的<code>&lt;input&gt;</code> 是一个受控组件。对于受控的<code>&lt;input&gt;</code>，渲染出来的<code>html</code>元素始终保持着<code>value</code>属性的值，如以下代码</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-5bc310822e0895fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><ul><li>此时如果想要更新用户的值。需要使用<code>onChange</code>事件</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-448f6f21ba0df9b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p><strong>非受控组件</strong></p><blockquote><p>即没有设置<code>value</code>或者设置为<code>null</code>的是一个非受控组件，对于非受控的<code>input</code>组件，用户的输入会直接反映在页面上</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-90c6f85dc75ef3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><ul><li>上面的代码渲染出一个空值的输入框，用户的输入立即会反映在元素上</li><li>和受控组件一样，使用<code>onChange</code>事件来监听值的变化，如果想要给组件设置一个非空的初始值。可以使用<code>defaultValue</code>属</li><li>通常情况下，<code>React</code>当中所有的表单控件都需要是受控组件</li></ul><h3 id="4-5-组合与继承"><a href="#4-5-组合与继承" class="headerlink" title="4.5 组合与继承"></a>4.5 组合与继承</h3><ul><li><code>React</code>当中的组件是通过嵌套或组合的方式实现组件代码复用的</li><li>通过<code>props</code>传值和组合使用组件几乎可以满足所有场景下的需求。这样也更符合组件化的理念，就好像使用互相嵌套的<code>DOM</code>元素一样使用<code>React</code>的组件，并不需要引入继承的概念</li></ul><blockquote><p>继承的写法并不符合<code>React</code>的理念。在<code>React</code>当中<code>props</code>其实是非常强大的，<code>props</code>几乎可以传入任何东西，变量、函数、甚至是组件本身</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>React官方也希望我们通过组合的方式来使用组件，如果你想实现一些非界面类型函数的复用，可以单独写在其他的模块当中在引入组件进行使用</p></blockquote><h2 id="五、组件数据"><a href="#五、组件数据" class="headerlink" title="五、组件数据"></a>五、组件数据</h2><hr><h3 id="5-1-props"><a href="#5-1-props" class="headerlink" title="5.1 props"></a>5.1 props</h3><ul><li>传入变量</li><li>传入函数</li><li>传入组件</li><li><code>props.children</code></li></ul><blockquote><ul><li>在形式上，<code>props</code>之于<code>JSX</code>就相当于<code>attributes</code>之于<code>HTML</code>。从写法上来看呢，我们为组件传入<code>props</code>就可以像为<code>HTML</code>标签添加属性一样</li><li>在概念上，props对于组件就相当于JS中参数之于函数。我们可以抽象出这样一个函数来解释</li></ul></blockquote><ul><li><code>props</code> 几乎可以传递所有的内容，包括变量、函数、甚至是组件本身</li></ul><p><strong>props是只读的</strong></p><ul><li>在<code>React</code>中，<code>props</code>都是自上向下传递，从父组件传入子组件</li><li>并且<code>props</code>是只读的，我们不能在组件中直接修改<code>props</code>的内容</li><li>也即是说组件只能根据传入的<code>props</code>渲染界面，而不能在其内部对<code>props</code>进行修改</li></ul><p><strong>props类型检查</strong></p><blockquote><p>正是因为<code>props</code>的强大，什么类型的内容都可以传递，所以在开发过程中，为了避免错误类型的内容传入，我们可以为<code>props</code>添加类型检查</p></blockquote><p><strong>props默认值</strong></p><blockquote><p>由于<code>props</code>是只读的，我们不能直接为<code>props</code>赋值。<code>React</code>专门准备了一个方法定义<code>props</code>的默认值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Title = <span class="function"><span class="params">props</span> =&gt;</span> &lt;h1&gt;&#123;props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Title.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  title: 'Wait for parent to pass props.'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Title.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  title: PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-state"><a href="#5-2-state" class="headerlink" title="5.2 state"></a>5.2 state</h3><ul><li>初始化</li><li><code>setState</code>方法</li><li>向下传递数据</li></ul><blockquote><ul><li>在<code>React</code>中<code>state</code>也是我们进行数据交互的地方，又或者叫做<code>state management</code>状态管理。</li><li>一个应用需要进行数据交互，比如同服务器之间的交互，同用户输入进行交互。话反过来，从<code>API</code>获取数据，处理用户输入也就是我们需要用到<code>state</code>的时候</li></ul></blockquote><ul><li>在新版本的<code>React</code>当中，我们通过类定义组件来声明一个有状态组件，之后在它的构造方法中初始化组件的<code>state</code>，我们可以先赋予它默认值。</li><li>之后就可以在组件中通过<code>this.state</code>来访问它，既然是<code>state</code>那么肯定涉及到数据的改变，因此我们还需额外定义一个负责处理<code>state</code>变化的函数，这样的函数中一般都会包含<code>this.setState</code>这个方法</li><li>和之前的<code>props</code>一样，初始化<code>state</code>之后，如果我们想改变它，是不可以直接对其赋值的，直接修改<code>state</code>的值没有任何意义，因为这样的操作脱离了<code>React</code>运行的逻辑，不会触发组件的重新渲染。所以需要<code>this.setState</code>这个方法，在改变<code>state</code>的同时，触发<code>React</code>内部的一系列函数，最后在页面上重新渲染出组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  addOne() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span>(&#123;</span><br><span class="line">      counter: prevState.counter + <span class="number">1</span></span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123; <span class="keyword">this</span>.state.counter &#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button</span></span><br><span class="line"><span class="regexp">          onClick=&#123;() =&gt; this.addOne()&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Increment</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、组件生命周期"><a href="#六、组件生命周期" class="headerlink" title="六、组件生命周期"></a>六、组件生命周期</h2><h3 id="6-1-React是如何渲染组件的"><a href="#6-1-React是如何渲染组件的" class="headerlink" title="6.1 React是如何渲染组件的"></a>6.1 React是如何渲染组件的</h3><blockquote><ul><li>在新版本的<code>React</code>当中，<code>React</code>的底层被重写了。<code>React</code>换上了一个新的引擎，这个引擎叫做<code>React Fiber.React Fiber</code> 作用的也即是<code>React</code>最核心的功能，它将<code>React</code>应用界面更新的过程分为了两个主要的部分：</li></ul></blockquote><ul><li>调度过程</li><li>执行过程</li></ul><blockquote><p>在调度过程中，有4个生命周期函数会被触发</p></blockquote><ul><li><code>componentWillMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li></ul><blockquote><p>在执行过程中，有3个生命周期函数会被触发：</p></blockquote><ul><li><code>componentDidMount</code></li><li><code>componentDidUpdate</code></li><li><code>componentWillUnmount</code></li></ul><h3 id="6-2-React组件生命周期方法"><a href="#6-2-React组件生命周期方法" class="headerlink" title="6.2 React组件生命周期方法"></a>6.2 React组件生命周期方法</h3><blockquote><p><code>React</code>为了方便我们更好地控制自己的应用，提供了许多预置的生命周期方法。这些固定的生命周期方法分别会在组件的挂载流程、更新流程、卸载流程中触发</p></blockquote><ul><li><code>componentWillMount</code> 开始插入真实DOM</li><li><code>componentDidMount</code> 插入真实<code>DOM</code>完成</li><li><code>componentWillUpdate</code> 开始重新渲染</li><li><code>componentDidUpdate</code> 重新渲染完成</li><li><code>componentWillUnmount</code>已移出真实 <code>DOM</code></li><li><code>componentWillReceiveProps</code> 已加载组件收到新的参数时调用</li><li><code>shouldComponentUpdate</code>组件判断是否重新渲染时调用</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-2921ad93a9b5c407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-5c75fb0760cf0c1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p><strong>componentDidMount</strong></p><blockquote><p>在此方法中可进行</p></blockquote><ul><li>与其他 <code>JavaScript</code> 框架集成，如初始化 <code>jQuery</code> 插件；</li><li>使用 <code>setTimeout</code>/<code>setInterval</code> 设置定时器；</li><li>通过 <code>Ajax</code>/<code>Fetch</code> 获取数据；</li><li>绑定 <code>DOM</code> 事件</li></ul><h3 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h3><ul><li>React组件渲染包含三个流程：挂载流程、更新流程、卸载流程</li><li>各个生命周期函数会在特定的时刻触发并适用于不同的使用场景</li><li>通过使用生命周期函数我们可以对应用进行更精准的控制</li><li>如果你需要发起网络请求，将其安排在合适的生命周期函数中是值得推荐的做法</li><li>了解掌握<code>React</code>组件渲染的流程和原理对我们更深入掌握<code>React</code>非常有帮助</li></ul><h2 id="七、表单及事件处理"><a href="#七、表单及事件处理" class="headerlink" title="七、表单及事件处理"></a>七、表单及事件处理</h2><h3 id="7-1-表单"><a href="#7-1-表单" class="headerlink" title="7.1 表单"></a>7.1 表单</h3><blockquote><p>受控与非受控组件就是专门适用于React当中的表单元素的</p></blockquote><ul><li>只要是有表单出现的地方，就会有用户输入，就会有表单事件触发，就会涉及的数据处理</li><li>在我们用<code>React</code>开发应用时，为了更好地管理应用中的数据，响应用户的输入，编写组件的时候呢，我们就会运用到受控组件与非受控组件这两个概念。</li></ul><h3 id="7-2-表单元素"><a href="#7-2-表单元素" class="headerlink" title="7.2 表单元素"></a>7.2 表单元素</h3><blockquote><p>我们在组件中声明表单元素时，一般都要为表单元素传入应用状态中的值，可以通过<code>state</code>也可以通过<code>props</code>传递，之后需要为其绑定相关事件，例如表单提交，输入改变等。在相关事件触发的处理函数中，我们需要根据表单元素中用户的输入，对应用数据进行相应的操作和改变</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlledInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: event.target.value</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="xml">              type="text" </span></span><br><span class="line"><span class="xml">              value=&#123;this.state.value&#125; </span></span><br><span class="line"><span class="xml">              onChange=&#123;() =&gt; this.handleChange()&#125; </span></span><br><span class="line"><span class="xml">            /&gt;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>受控组件的输入数据是一直和我们的应用状态绑定的，事件处理函数中一定要有关<code>state</code>的更新操作，这样表单组件才能及时正确响应用户的输入</p></blockquote><p><strong>textarea</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">  Hello there, this is some text in a text area</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"grapefruit"</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lime"</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"coconut"</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-事件"><a href="#7-3-事件" class="headerlink" title="7.3 事件"></a>7.3 事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"activateLasers()"</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsx--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;activateLasers&#125;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、redux-router"><a href="#八、redux-router" class="headerlink" title="八、redux-router"></a>八、redux-router</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-cae1c4d6de6642de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="react-router" title="">                </div>                <div class="image-caption">react-router</div>            </figure><h3 id="8-1、基本用法"><a href="#8-1、基本用法" class="headerlink" title="8.1、基本用法"></a>8.1、基本用法</h3><blockquote><p>使用时，路由器<code>Router</code>就是<code>React</code>的一个组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Router</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><blockquote><p><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route</code>组件定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line">render((</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问根路由<code>/</code>，组件APP就会加载到<code>document.getElementById(&#39;app&#39;)</code></p></blockquote><ul><li><code>Router</code>组件有一个参数<code>history</code>，它的值<code>hashHistory</code>表示，路由的切换由<code>URL</code>的<code>hash</code>变化决定，即<code>URL</code>的<code>#</code>部分发生变化</li><li><code>Route</code>组件定义了<code>URL</code>路径与组件的对应关系。你可以同时使用多个<code>Route</code>组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/repos"</span> component=&#123;Repos&#125;/&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/Router&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问<code>/repos</code>（比如<code>http://localhost:8080/#/repos</code>）时，加载<code>Repos</code>组件；访问<code>/about（http://localhost:8080/#/about）</code>时，加载<code>About</code>组件</p></blockquote><h3 id="8-2、嵌套路由"><a href="#8-2、嵌套路由" class="headerlink" title="8.2、嵌套路由"></a>8.2、嵌套路由</h3><blockquote><p><code>Route</code>组件还可以嵌套</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/repos"</span> component=&#123;Repos&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，用户访问<code>/repos</code>时，会先加载<code>App</code>组件，然后在它的内部再加载<code>Repos</code>组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Repos/&gt;</span><br><span class="line">&lt;<span class="regexp">/App&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>App</code>组件要写成下面的样子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>App</code>组件的<code>this.props.children</code>属性就是子组件</p></blockquote><h3 id="8-3、-path-属性"><a href="#8-3、-path-属性" class="headerlink" title="8.3、 path 属性"></a>8.3、 path 属性</h3><blockquote><p><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件</p></blockquote><ul><li><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">   &lt;Route path=<span class="string">"messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当用户访问<code>/inbox/messages/:id</code>时，会加载下面的组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Inbox&gt;</span><br><span class="line">  &lt;Message/&gt;</span><br><span class="line">&lt;<span class="regexp">/Inbox&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果省略外层<code>Route</code>的<code>path</code>参数，写成下面的样子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route component=&#123;Inbox&#125;&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"inbox/messages/:id"</span> component=&#123;Message&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在用户访问<code>/inbox/messages/:id</code>时，组件加载还是原来的样子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Inbox&gt;</span><br><span class="line">  &lt;Message/&gt;</span><br><span class="line">&lt;<span class="regexp">/Inbox&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4、通配符"><a href="#8-4、通配符" class="headerlink" title="8.4、通配符"></a>8.4、通配符</h3><blockquote><p><code>path</code>属性可以使用通配符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/hello/:name"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /hello/michael</span></span><br><span class="line"><span class="comment">// 匹配 /hello/ryan</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/hello(/:name)"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /hello</span></span><br><span class="line"><span class="comment">// 匹配 /hello/michael</span></span><br><span class="line"><span class="comment">// 匹配 /hello/ryan</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/files/*.*"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/hello.jpg</span></span><br><span class="line"><span class="comment">// 匹配 /files/hello.html</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/files/*"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/ </span></span><br><span class="line"><span class="comment">// 匹配 /files/a</span></span><br><span class="line"><span class="comment">// 匹配 /files/a/b</span></span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/**/*.jpg"</span>&gt;</span><br><span class="line"><span class="comment">// 匹配 /files/hello.jpg</span></span><br><span class="line"><span class="comment">// 匹配 /files/path/to/file.jpg</span></span><br></pre></td></tr></table></figure><p><strong>通配符的规则如下</strong></p><ul><li><strong>:paramName</strong></li></ul><blockquote><p><code>:paramName</code>匹配<code>URL</code>的一个部分，直到遇到下一个<code>/</code>、<code>?</code>、<code>#</code>为止。这个路径参数可以通过<code>this.props.params.paramName</code>取出</p></blockquote><ul><li><strong>()</strong></li></ul><blockquote><p><code>()</code>表示<code>URL</code>的这个部分是可选的</p></blockquote><ul><li>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式</li><li>匹配任意字符，直到下一个<code>/</code>、<code>?</code>、<code>#</code>为止。匹配方式是贪婪模式</li></ul><blockquote><p><code>path</code>属性也可以使用相对路径（不以<code>/</code>开头），匹配时就会相对于父组件的路径。嵌套路由如果想摆脱这个规则，可以使用绝对路由</p></blockquote><ul><li>此外，<code>URL</code>的查询字符串<code>/foo?bar=baz</code>，可以用<code>this.props.location.query.bar</code>获取</li></ul><h3 id="8-5、IndexRoute-组件"><a href="#8-5、IndexRoute-组件" class="headerlink" title="8.5、IndexRoute 组件"></a>8.5、IndexRoute 组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>上面代码中，访问根路径<code>/</code>，不会加载任何子组件。也就是说，<code>App</code>组件的<code>this.props.children</code>，这时是<code>undefined</code></li><li>因此，通常会采用{<code>this.props.children</code> || <code>&lt;Home/&gt;}</code>这样的写法。这时，Home明明是<code>Accounts</code>和<code>Statements</code>的同级组件，却没有写在<code>Route</code>中</li><li>IndexRoute就是解决这个问题，显式指定Home是根路由的子组件，即指定默认情况下加载的子组件。你可以把<code>IndexRoute</code>想象成某个路径的<code>index.html</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"accounts"</span> component=&#123;Accounts&#125;/&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"statements"</span> component=&#123;Statements&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><blockquote><p>现在，用户访问<code>/</code>的时候，加载的组件结构如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Home/&gt;</span><br><span class="line">&lt;<span class="regexp">/App&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>IndexRoute</code>组件没有路径参数<code>path</code></li></ul><h3 id="8-6、Redirect-组件"><a href="#8-6、Redirect-组件" class="headerlink" title="8.6、Redirect 组件"></a>8.6、Redirect 组件</h3><blockquote><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">  &#123;<span class="comment">/* 从 /inbox/messages/:id 跳转到 /messages/:id */</span>&#125;</span><br><span class="line">  ＜Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>现在访问<code>/inbox/messages/5</code>，会自动跳转到<code>/messages/5</code></p></blockquote><h3 id="8-7、IndexRedirect-组件"><a href="#8-7、IndexRedirect-组件" class="headerlink" title="8.7、IndexRedirect 组件"></a>8.7、IndexRedirect 组件</h3><blockquote><p><code>IndexRedirect</code>组件用于访问根路由的时候，将用户重定向到某个子组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</span><br><span class="line">  ＜IndexRedirect to=<span class="string">"/welcome"</span> /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"welcome"</span> component=&#123;Welcome&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用户访问根路径时，将自动重定向到子组件<code>welcome</code></p></blockquote><h3 id="8-8、Link"><a href="#8-8、Link" class="headerlink" title="8.8、Link"></a>8.8、Link</h3><blockquote><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的<code>React</code> 版本，可以接收<code>Router</code>的状态</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul role="nav"&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/about"&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/repos"&gt;Repos&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果希望当前的路由与其他路由有不同样式，这时可以使用<code>Link</code>组件的<code>activeStyle</code>属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">"/about"</span> activeStyle=&#123;&#123;<span class="attr">color</span>: <span class="string">'red'</span>&#125;&#125;&gt;About&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">&lt;Link to="/</span>repos<span class="string">" activeStyle=&#123;&#123;color: 'red'&#125;&#125;&gt;Repos&lt;/Link&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在<code>Router</code>组件之外，导航到路由页面，可以使用浏览器的<code>History API</code>，像下面这样写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line">browserHistory.push(<span class="string">'/some/path'</span>);</span><br></pre></td></tr></table></figure><h3 id="8-9、IndexLink"><a href="#8-9、IndexLink" class="headerlink" title="8.9、IndexLink"></a>8.9、IndexLink</h3><blockquote><p>如果链接到根路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件</p></blockquote><ul><li>是因为对于根路由来说，<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效，因为<code>/</code>会匹配任何子路由。而<code>IndexLink</code>组件会使用路径的精确匹配</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IndexLink to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span>&gt;</span><br><span class="line">  Home</span><br><span class="line">&lt;<span class="regexp">/IndexLink&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，根路由只会在精确匹配时，才具有<code>activeClassName</code></p></blockquote><h3 id="8-10、histroy-属性"><a href="#8-10、histroy-属性" class="headerlink" title="8.10、histroy 属性"></a>8.10、histroy 属性</h3><blockquote><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将<code>URL</code>解析成一个地址对象，供 <code>React Router</code> 匹配</p></blockquote><ul><li><code>history</code>属性，一共可以设置三种值。<ul><li><code>browserHistory</code></li><li><code>hashHistory</code></li><li><code>createMemoryHistory</code></li></ul></li></ul><blockquote><p>如果设为<code>hashHistory</code>，路由将通过<code>URL</code>的hash部分<code>（#）</code>切换，<code>URL</code>的形式类似<code>example.com/#/some/path</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>如果设为<code>browserHistory</code>，浏览器的路由就不再通过<code>Hash</code>完成了，而显示正常的路径<code>example.com/some/path</code>，背后调用的是浏览器的<code>History API</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>但是，这种情况需要对服务器改造。否则用户直接向服务器请求某个子路由，会显示网页找不到的<code>404</code>错误。</p></blockquote><h3 id="8-11、表单处理"><a href="#8-11、表单处理" class="headerlink" title="8.11、表单处理"></a>8.11、表单处理</h3><blockquote><p><code>Link</code>组件用于正常的用户点击跳转，但是有时还需要表单跳转、点击按钮跳转等操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"userName"</span>/&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"repo"</span>/&gt;</span><br><span class="line">  &lt;button type=<span class="string">"submit"</span>&gt;Go&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br></pre></td></tr></table></figure><p><strong>第一种方法是使用browserHistory.push</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> userName = event.target.elements[<span class="number">0</span>].value</span><br><span class="line">    <span class="keyword">const</span> repo = event.target.elements[<span class="number">1</span>].value</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`/repos/<span class="subst">$&#123;userName&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">    browserHistory.push(path)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>第二种方法是使用context对象</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  // ask for `router` from context</span><br><span class="line">  contextTypes: &#123;</span><br><span class="line">    router: React.PropTypes.object</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    this.context.router.push(path)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-12、路由的钩子"><a href="#8-12、路由的钩子" class="headerlink" title="8.12、路由的钩子"></a>8.12、路由的钩子</h3><blockquote><p>每个路由都有<code>Enter</code>和<code>Leave</code>钩子，用户进入或离开该路由时触发</p></blockquote><ul><li>上面的代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子<ul><li><code>/messages/:id</code>的<code>onLeave</code></li><li><code>/inbox</code>的<code>onLeave</code></li><li><code>/about</code>的<code>onEnter</code></li></ul></li></ul><h2 id="九、redux"><a href="#九、redux" class="headerlink" title="九、redux"></a>九、redux</h2><h3 id="9-1-Redux-的适用场景"><a href="#9-1-Redux-的适用场景" class="headerlink" title="9.1 Redux 的适用场景"></a>9.1 Redux 的适用场景</h3><ul><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ul><p><strong>Redux设计思想</strong></p><blockquote><p><code>Redux</code> 的设计思想很简单，就两句话</p></blockquote><ul><li><code>Web</code> 应用是一个状态机，视图与状态是一一对应的</li><li>所有的状态，保存在一个对象里面</li></ul><h3 id="9-2-基本概念和-API"><a href="#9-2-基本概念和-API" class="headerlink" title="9.2 基本概念和 API"></a>9.2 基本概念和 API</h3><p><strong>Store</strong></p><ul><li><code>Store</code> 提供了三个方法<ul><li><code>store.getState()</code></li><li><code>store.dispatch()</code></li><li><code>store.subscribe()</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</span><br></pre></td></tr></table></figure><blockquote><p><code>Store</code>就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 <code>Store</code></p></blockquote><ul><li><code>Redux</code> 提供<code>createStore</code>这个函数，用来生成 <code>Store</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer); <span class="comment">// 返回新生成的 Store 对象</span></span><br></pre></td></tr></table></figure><p><strong>State</strong></p><blockquote><p><code>Store</code>对象包含所有数据。如果想得到某个时点的数据，就要对 <code>Store</code> 生成快照。这种时点的数据集合，就叫做 <code>State</code></p></blockquote><ul><li>当前时刻的 <code>State</code>，可以通过<code>store.getState()</code>拿到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = store.getState();</span><br></pre></td></tr></table></figure><blockquote><p><code>Redux</code> 规定， 一个 <code>State</code> 对应一个 <code>View</code>。只要 <code>State</code> 相同，<code>View</code> 就相同。你知道 <code>State</code>，就知道 <code>View</code> 是什么样，反之亦然</p></blockquote><p><strong>Action</strong></p><blockquote><p><code>State</code> 的变化，会导致 <code>View</code> 的变化。但是，用户接触不到 <code>State</code>，只能接触到 <code>View</code>。所以，<code>State</code> 的变化必须是 <code>View</code> 导致的。<code>Action</code> 就是 <code>View</code> 发出的通知，表示 <code>State</code> 应该要发生变化了</p></blockquote><ul><li><code>Action</code> 是一个对象。其中的<code>type</code>属性是必须的，表示 <code>Action</code> 的名称。其他属性可以自由设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="string">'Learn Redux'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Action</code> 的名称是<code>ADD_TODO</code>，它携带的信息是字符串<code>Learn Redux</code></li><li>可以这样理解，<code>Action</code> 描述当前发生的事情。改变 <code>State</code> 的唯一办法，就是使用 <code>Action</code>。它会运送数据到 <code>Store</code></li></ul><blockquote><p><code>action</code>有两个作用，一个是定义我们的应用可以进行的动作或操作的类型，另一个是传递改变应用状态的数据。在<code>Redux</code>的约定中，<code>action</code>只有<code>type</code>属性是必须包含的，其他的数据如何定义全在于你想要如何使用，当然如果你希望你定义的<code>action</code>能够规范一些的话，也可以遵从Flux Standard Action的标准</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// action 类型</span></span><br><span class="line">  type: <span class="string">'INCREMENT'</span>,</span><br><span class="line">  <span class="comment">// payload 中返回我们要传递的数据，用来修改应用 state</span></span><br><span class="line">  payload: &#123;</span><br><span class="line">    num: <span class="number">1</span>  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// payload 数据未获取成功时返回 true</span></span><br><span class="line">  error: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 一些不必要在 payload 中传递的其他数据</span></span><br><span class="line">  meta: &#123;</span><br><span class="line">    success: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Action Creator</strong></p><blockquote><p><code>View</code> 要发送多少种消息，就会有多少种 <code>Action</code>。如果都手写，会很麻烦。可以定义一个函数来生成 <code>Action</code>，这个函数就叫 <code>Action Creator</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'添加 TODO'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Learn Redux'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>addTodo</code>函数就是一个 <code>Action Creator</code></p></blockquote><p><strong>store.dispatch()</strong></p><blockquote><p><code>store.dispatch()</code>是 <code>View</code> 发出 <code>Action</code> 的唯一方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(fn);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: <span class="string">'Learn Redux'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>store.dispatch</code>接受一个 <code>Action</code> 对象作为参数，将它发送出去</p></blockquote><ul><li>结合 <code>Action Creator</code>，这段代码可以改写如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn Redux'</span>));</span><br></pre></td></tr></table></figure><p><strong>Reducer</strong></p><blockquote><p><code>Store</code> 收到 <code>Action</code> 以后，必须给出一个新的 <code>State</code>，这样 <code>View</code> 才会发生变化。这种 <code>State</code> 的计算过程就叫做 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function"><span class="keyword">function</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> new_state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>整个应用的初始状态，可以作为 <code>State</code> 的默认值。下面是一个实际的例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.payload;</span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reducer(<span class="number">1</span>, &#123;</span><br><span class="line">  type: <span class="string">'ADD'</span>,</span><br><span class="line">  payload: <span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>reducer</code>函数收到名为<code>ADD</code>的 <code>Action</code> 以后，就返回一个新的 <code>State</code>，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 <code>Action</code> 的不同来实现</p></blockquote><ul><li>实际应用中，<code>Reducer</code> 函数不用像上面这样手动调用，<code>store.dispatch</code>方法会触发 <code>Reducer</code> 的自动执行</li><li>为此，<code>Store</code> 需要知道 <code>Reducer</code> 函数，做法就是在生成 <code>Store</code> 的时候，将 <code>Reducer</code> 传入<code>createStore</code>方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class="line">const store = createStore(reducer);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>createStore</code>接受 <code>Reducer</code> 作为参数，生成一个新的 <code>Store</code>。以后每当<code>store.dispatch</code>发送过来一个新的 <code>Action</code>，就会自动调用 <code>Reducer</code>，得到新的 <code>State</code></li><li>为什么这个函数叫做 <code>Reducer</code>呢？因为它可以作为数组的<code>reduce</code>方法的参数</li></ul><p><strong>纯函数</strong></p><ul><li><code>Reducer</code> 函数最重要的特征是，它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出</li><li>纯函数是函数式编程的概念，必须遵守以下一些约束<ul><li>不得改写参数</li><li>不能调用系统 <code>I/O</code> 的<code>API</code></li><li>不能调用<code>Date.now()</code>或者<code>Math.random()</code>等不纯的方法，因为每次会得到不一样的结果</li></ul></li></ul><blockquote><p>由于 <code>Reducer</code> 是纯函数，就可以保证同样的<code>State</code>，必定得到同样的 <code>View</code>。但也正因为这一点，<code>Reducer</code> 函数里面不能改变 <code>State</code>，必须返回一个全新的对象，请参考下面的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// State 是一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123; thingToChange &#125;);</span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, ...newState &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State 是一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...state, newItem];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最好把 <code>State</code> 对象设成只读。你没法改变它，要得到新的 <code>State</code>，唯一办法就是生成一个新对象。这样的好处是，任何时候，与某个 <code>View</code> 对应的 <code>State</code> 总是一个不变的对象</p></blockquote><p><strong>store.subscribe()</strong></p><blockquote><p><code>Store</code> 允许使用<code>store.subscribe</code>方法设置监听函数，一旦 <code>State</code> 发生变化，就自动执行这个函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><blockquote><p>显然，只要把 <code>View</code> 的更新函数（对于 <code>React</code> 项目，就是组件的<code>render</code>方法或<code>setState</code>方法）放入<code>listen</code>，就会实现 <code>View</code> 的自动渲染</p></blockquote><ul><li><code>store.subscribe</code>方法返回一个函数，调用这个函数就可以解除监听</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">unsubscribe();</span><br></pre></td></tr></table></figure><h3 id="9-3-Reducer-的拆分"><a href="#9-3-Reducer-的拆分" class="headerlink" title="9.3 Reducer 的拆分"></a>9.3 Reducer 的拆分</h3><blockquote><p><code>Reducer</code> 函数负责生成 <code>State</code>。由于整个应用只有一个 <code>State</code> 对象，包含所有数据，对于大型应用来说，这个 State 必然十分庞大，导致 <code>Reducer</code> 函数也十分庞大</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_CHAT:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        chatLog: state.chatLog.concat(payload)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> CHANGE_STATUS:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        statusMessage: payload</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> CHANGE_USERNAME:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        userName: payload</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    chatLog: chatLog(state.chatLog, action),</span><br><span class="line">    statusMessage: statusMessage(state.statusMessage, action),</span><br><span class="line">    userName: userName(state.userName, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Reducer</code> 函数被拆成了三个小函数，每一个负责生成对应的属</li><li>这样一拆，<code>Reducer</code> 就易读易写多了。而且，这种拆分与 <code>React</code> 应用的结构相吻合:一个 <code>React</code> 根组件由很多子组件构成。这就是说，子组件与子 <code>Reducer</code> 完全可以对应</li></ul><blockquote><p><code>Redux</code> 提供了一个<code>combineReducers</code>方法，用于 <code>Reducer</code> 的拆分。你只要定义各个子 <code>Reducer</code> 函数，然后用这个方法，将它们合成一个大的 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chatReducer = combineReducers(&#123;</span><br><span class="line">  chatLog,</span><br><span class="line">  statusMessage,</span><br><span class="line">  userName</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp;</span><br></pre></td></tr></table></figure><blockquote><p>这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: doSomethingWithA(state.a, action),</span><br><span class="line">    b: processB(state.b, action),</span><br><span class="line">    c: c(state.c, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总之，<code>combineReducers()</code>做的就是产生一个整体的 Reducer 函数。该函数根据 <code>State</code> 的 <code>key</code> 去执行相应的子 <code>Reducer</code>，并将返回结果合并成一个大的 <code>State</code> 对象</p></blockquote><ul><li>你可以把所有子 <code>Reducer</code> 放在一个文件里面，然后统一引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(reducers)</span><br></pre></td></tr></table></figure><h3 id="9-4-工作流程"><a href="#9-4-工作流程" class="headerlink" title="9.4 工作流程"></a>9.4 工作流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-72a33d9e42602972.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-3e80b99c89f6aa4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d741057955c632ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="react组件+redux单向数据流" title="">                </div>                <div class="image-caption">react组件+redux单向数据流</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-5c6d10572cc20356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端异步请求用例" title="">                </div>                <div class="image-caption">前端异步请求用例</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-a42fb9019138c1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PFAT如何解决前端异步请求的用例？" title="">                </div>                <div class="image-caption">PFAT如何解决前端异步请求的用例？</div>            </figure><ul><li>首先，用户发出 <code>Action</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(action);</span><br></pre></td></tr></table></figure><ul><li>然后，<code>Store</code> 自动调用 <code>Reducer</code>，并且传入两个参数：当前 <code>State</code> 和收到的 <code>Action</code>。 <code>Reducer</code> 会返回新的 <code>State</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nextState = todoApp(previousState, action);</span><br></pre></td></tr></table></figure><ul><li><code>State</code> 一旦有变化，<code>Store</code> 就会调用监听函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置监听函数</span></span><br><span class="line">store.subscribe(listener);</span><br></pre></td></tr></table></figure><ul><li><code>listener</code>可以通过<code>store.getState()</code>得到当前状态。如果使用的是 <code>React</code>，这时可以触发重新渲染 <code>View</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listerner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newState = store.getState();</span><br><span class="line">  component.setState(newState);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5-实例：计数器"><a href="#9-5-实例：计数器" class="headerlink" title="9.5 实例：计数器"></a>9.5 实例：计数器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = <span class="function">(<span class="params">&#123; value, onIncrement, onDecrement &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;value&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button onClick=&#123;onIncrement&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;button onClick=&#123;onDecrement&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const reducer = (state = 0, action) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'INCREMENT': return state + 1;</span></span><br><span class="line"><span class="regexp">    case 'DECREMENT': return state - 1;</span></span><br><span class="line"><span class="regexp">    default: return state;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const store = createStore(reducer);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const render = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Counter</span></span><br><span class="line"><span class="regexp">      value=&#123;store.getState()&#125;</span></span><br><span class="line"><span class="regexp">      onIncrement=&#123;() =&gt; store.dispatch(&#123;type: 'INCREMENT'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">      onDecrement=&#123;() =&gt; store.dispatch(&#123;type: 'DECREMENT'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">    /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line">store.subscribe(render);</span><br></pre></td></tr></table></figure><h2 id="十、中间件与异步操作"><a href="#十、中间件与异步操作" class="headerlink" title="十、中间件与异步操作"></a>十、中间件与异步操作</h2><blockquote><p><code>Redux</code> 的基本做法：用户发出 <code>Action</code>，<code>Reducer</code> 函数算出新的 <code>State</code>，<code>View</code> 重新渲染</p></blockquote><ul><li><p>一个关键问题没有解决：异步操作怎么办？<code>Action</code> 发出以后，<code>Reducer</code> 立即算出 <code>State</code>，这叫做同步；<code>Action</code> 发出以后，过一段时间再执行 <code>Reducer</code>，这就是异步</p></li><li><p>怎么才能 <code>Reducer</code> 在异步操作结束后自动执行呢？这就要用到新的工具：中间件（<code>middleware</code>）</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-34a7ad88469625f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h3 id="10-1-中间件的概念"><a href="#10-1-中间件的概念" class="headerlink" title="10.1 中间件的概念"></a>10.1 中间件的概念</h3><blockquote><p>中间件就是一个函数，对<code>store.dispatch</code>方法进行了改造，在发出 <code>Action</code> 和执行 <code>Reducer</code> 这两步之间，添加了其他功能。</p></blockquote><h3 id="10-2-中间件的用法"><a href="#10-2-中间件的用法" class="headerlink" title="10.2 中间件的用法"></a>10.2 中间件的用法</h3><blockquote><p>常用的中间件都有现成的，只要引用别人写好的模块即可。比如日志中间件，就有现成的<code>redux-logger</code>模块</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"><span class="keyword">const</span> logger = createLogger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>redux-logger</code>提供一个生成器<code>createLogger</code>，可以生成日志中间件<code>logger</code>。然后，将它放在applyMiddleware方法之中，传入<code>createStore</code>方法，就完成了<code>store.dispatch()</code>的功能增强</p></blockquote><p><strong>这里有两点需要注意</strong></p><ul><li>（1）<code>createStore</code>方法可以接受整个应用的初始状态作为参数，那样的话，<code>applyMiddleware</code>就是第三个参数了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  initial_state,</span><br><span class="line">  applyMiddleware(logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>（2）中间件的次序有讲究</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk, promise, logger)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>applyMiddleware</code>方法的三个参数，就是三个中间件。有的中间件有次序要求，使用前要查一下文档。比如，<code>logger</code>就一定要放在最后，否则输出结果会不正确</p></blockquote><h3 id="10-3、applyMiddlewares"><a href="#10-3、applyMiddlewares" class="headerlink" title="10.3、applyMiddlewares()"></a>10.3、applyMiddlewares()</h3><blockquote><p><code>applyMiddlewares</code>这个方法。它是 <code>Redux</code> 的原生方法，作用是将所有中间件组成一个数组，依次执行</p></blockquote><h3 id="10-4-异步操作的基本思路"><a href="#10-4-异步操作的基本思路" class="headerlink" title="10.4 异步操作的基本思路"></a>10.4 异步操作的基本思路</h3><blockquote><p>理解了中间件以后，就可以处理异步操作了</p></blockquote><ul><li>同步操作只要发出一种 <code>Action</code> 即可，异步操作的差别是它要发出三种 <code>Action</code><ul><li>操作发起时的 <code>Action</code></li><li>操作成功时的 <code>Action</code></li><li>操作失败时的 <code>Action</code></li></ul></li></ul><blockquote><p>以向服务器取出数据为例，三种 <code>Action</code> 可以有两种不同的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一：名称相同，参数不同</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>, <span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">error</span>: <span class="string">'Oops'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS'</span>, <span class="attr">status</span>: <span class="string">'success'</span>, <span class="attr">response</span>: &#123; ... &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二：名称不同</span></span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_REQUEST'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_FAILURE'</span>, <span class="attr">error</span>: <span class="string">'Oops'</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">'FETCH_POSTS_SUCCESS'</span>, <span class="attr">response</span>: &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了 <code>Action</code>种类不同，异步操作的 <code>State</code> 也要进行改造，反映不同的操作状态。下面是 <code>State</code> 的一个例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  isFetching: <span class="literal">true</span>,</span><br><span class="line">  didInvalidate: <span class="literal">true</span>,</span><br><span class="line">  lastUpdated: <span class="string">'xxxxxxx'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>State</code> 的属性<code>isFetching</code>表示是否在抓取数据。<code>didInvalidate</code>表示数据是否过时，<code>lastUpdated</code>表示上一次更新时间</p></blockquote><blockquote><p>现在，整个异步操作的思路就很清楚了</p></blockquote><ul><li>操作开始时，送出一个 <code>Action</code>，触发 <code>State</code> 更新为”正在操作”状态，<code>View</code> 重新渲染</li><li>操作结束后，再送出一个 <code>Action</code>，触发 <code>State</code> 更新为”操作结束”状态，<code>View</code> 再一次重新渲染</li></ul><h3 id="10-5-redux-thunk-中间件"><a href="#10-5-redux-thunk-中间件" class="headerlink" title="10.5 redux-thunk 中间件"></a>10.5 redux-thunk 中间件</h3><blockquote><p>异步操作至少要送出两个 <code>Action</code>：用户触发第一个 <code>Action</code>，这个跟同步操作一样，没有问题；如何才能在操作结束时，系统自动送出第二个 <code>Action</code> 呢</p></blockquote><ul><li>奥妙就在 <code>Action Creator</code> 之中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    dispatch(fetchPosts(selectedPost))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码是一个异步组件的例子。加载成功后（<code>componentDidMount</code>方法），它送出了（<code>dispatch</code>方法）一个 <code>Action</code>，向服务器要求数据 <code>fetchPosts(selectedSubreddit)</code>。这里的<code>fetchPosts</code>就是 <code>Action Creator</code></p></blockquote><ul><li>下面就是<code>fetchPosts</code>的代码，关键之处就在里面</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-f0de2f9655fe28f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPosts = <span class="function"><span class="params">postTitle</span> =&gt;</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">  dispatch(requestPosts(postTitle));</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receivePosts(postTitle, json)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法一</span></span><br><span class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>));</span><br><span class="line"><span class="comment">// 使用方法二</span></span><br><span class="line">store.dispatch(fetchPosts(<span class="string">'reactjs'</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>fetchPosts</code>是一个<code>Action Creator</code>（动作生成器），返回一个函数。这个函数执行后，先发出一个<code>Action（requestPosts(postTitle)</code>），然后进行异步操作。拿到结果后，先将结果转成 <code>JSON</code> 格式，然后再发出一个 <code>Action（ receivePosts(postTitle, json)</code>）</p></blockquote><p><strong>上面代码中，有几个地方需要注意</strong></p><ul><li><code>fetchPosts</code>返回了一个函数，而普通的 <code>Action Creator</code> 默认返回一个对象</li><li>返回的函数的参数是<code>dispatch</code>和<code>getState</code>这两个 <code>Redux</code>方法，普通的<code>Action Creator</code>的参数是 <code>Action</code> 的内容</li><li>在返回的函数之中，先发出一个 <code>Action（requestPosts(postTitle)）</code>，表示操作开始</li><li>异步操作结束之后，再发出一个 <code>Action（receivePosts(postTitle, json)）</code>，表示操作结束</li></ul><blockquote><p>这样的处理，就解决了自动发送第二个 <code>Action</code> 的问题。但是，又带来了一个新的问题，<code>Action</code> 是由<code>store.dispatch</code>方法发送的。而<code>store.dispatch</code>方法正常情况下，参数只能是对象，不能是函数</p></blockquote><ul><li>这时，就要使用中间件<code>redux-thunk</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: this API requires redux@&gt;=3.1.0</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>上面代码使用<code>redux-thunk</code>中间件，改造<code>store.dispatch</code>，使得后者可以接受函数作为参数</li></ul><p><strong>因此，异步操作的第一种解决方案就是，写出一个返回函数的 <code>Action Creator</code>，然后使用<code>redux-thunk</code>中间件改造<code>store.dispatch</code></strong></p><h3 id="10-6、redux-promise-中间件"><a href="#10-6、redux-promise-中间件" class="headerlink" title="10.6、redux-promise 中间件"></a>10.6、redux-promise 中间件</h3><hr><blockquote><p>既然 <code>Action Creator</code> 可以返回函数，当然也可以返回其他值。另一种异步操作的解决方案，就是让 <code>Action Creator</code> 返回一个 <code>Promise</code> 对象</p></blockquote><ul><li>这就需要使用<code>redux-promise</code>中间件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> promiseMiddleware <span class="keyword">from</span> <span class="string">'redux-promise'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(promiseMiddleware)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>这个中间件使得<code>store.dispatch</code>方法可以接受 <code>Promise</code> 对象作为参数。这时，<code>Action Creator</code> 有两种写法</p></blockquote><ul><li>写法一，返回值是一个 <code>Promise</code> 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPosts = </span><br><span class="line">  (dispatch, postTitle) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">     dispatch(requestPosts(postTitle));</span><br><span class="line">     <span class="keyword">return</span> fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">       .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">         type: <span class="string">'FETCH_POSTS'</span>,</span><br><span class="line">         payload: response.json()</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>写法二，<code>Action</code> 对象的<code>payload</code>属性是一个 <code>Promise</code> 对象。这需要从<code>redux-actions</code>模块引入<code>createAction</code>方法，并且写法也要变成下面这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, selectedPost &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 发出同步 Action</span></span><br><span class="line">    dispatch(requestPosts(selectedPost));</span><br><span class="line">    <span class="comment">// 发出异步 Action</span></span><br><span class="line">    dispatch(createAction(</span><br><span class="line">      <span class="string">'FETCH_POSTS'</span>, </span><br><span class="line">      fetch(<span class="string">`/some/API/<span class="subst">$&#123;postTitle&#125;</span>.json`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，第二个<code>dispatch</code>方法发出的是异步 <code>Action</code>，只有等到操作结束，这个 <code>Action</code> 才会实际发出</li><li>注意，<code>createAction</code>的第二个参数必须是一个 <code>Promise</code> 对象</li></ul><h2 id="十一、react-redux"><a href="#十一、react-redux" class="headerlink" title="十一、react-redux"></a>十一、react-redux</h2><blockquote><ul><li>为了方便使用，<code>Redux</code> 的作者封装了一个 <code>React</code>专用的库 <code>React-Redux</code></li><li>这个库是可以选用的。实际项目中，你应该权衡一下，是直接使用 <code>Redux</code>，还是使用 <code>React-Redux</code>。后者虽然提供了便利，但是需要掌握额外的 <code>API</code>，并且要遵守它的组件拆分规范</li></ul></blockquote><h3 id="11-1-UI-组件"><a href="#11-1-UI-组件" class="headerlink" title="11.1 UI 组件"></a>11.1 UI 组件</h3><blockquote><p><code>React-Redux</code> 将所有组件分成两大类：<code>UI</code> 组件（<code>presentational component</code>）和容器组件（<code>container component</code>）</p></blockquote><p><strong>UI 组件有以下几个特征</strong></p><ul><li>只负责 <code>UI</code> 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用<code>this.state</code>这个变量）</li><li>所有数据都由参数（<code>this.props</code>）提供</li><li>不使用任何 <code>Redux</code> 的 <code>API</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> Title =</span><br><span class="line">  value =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>因为不含有状态，<code>UI</code> 组件又称为”纯组件”，即它纯函数一样，纯粹由参数决定它的值</p></blockquote><h3 id="11-2、容器组件"><a href="#11-2、容器组件" class="headerlink" title="11.2、容器组件"></a>11.2、容器组件</h3><ul><li>负责管理数据和业务逻辑，不负责 <code>UI</code> 的呈现</li><li>带有内部状态</li><li>使用 <code>Redux</code> 的 <code>API</code></li></ul><p><strong><code>UI</code> 组件负责 <code>UI</code> 的呈现，容器组件负责管理数据和逻辑</strong></p><blockquote><p>如果一个组件既有 <code>UI</code> 又有业务逻辑，那怎么办？回答是，将它拆分成下面的结构：外面是一个容器组件，里面包了一个<code>UI</code> 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图</p></blockquote><ul><li><code>React-Redux</code> 规定，所有的 <code>UI</code> 组件都由用户提供，容器组件则是由 <code>React-Redux</code> 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它</li></ul><h3 id="11-3、connect"><a href="#11-3、connect" class="headerlink" title="11.3、connect()"></a>11.3、connect()</h3><blockquote><p><code>React-Redux</code> 提供<code>connect</code>方法，用于从 <code>UI</code> 组件生成容器组件。<code>connect</code>的意思，就是将这两种组件连起来。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect()(TodoList);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>TodoList</code>是 <code>UI</code> 组件，<code>VisibleTodoList</code>就是由 <code>React-Redux</code> 通过<code>connect</code>方法自动生成的容器组件</li></ul><blockquote><p>但是，因为没有定义业务逻辑，上面这个容器组件毫无意义，只是 <code>UI</code> 组件的一个单纯的包装层。为了定义业务逻辑，需要给出下面两方面的信息。</p></blockquote><ul><li>（1）输入逻辑：外部的数据（即<code>state</code>对象）如何转换为 <code>UI</code> 组件的参数</li><li>（2）输出逻辑：用户发出的动作如何变为 <code>Action</code> 对象，从 <code>UI</code> 组件传出去</li></ul><blockquote><p>因此，<code>connect</code>方法的完整 <code>API</code> 如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>connect</code>方法接受两个参数<code>：mapStateToProps</code>和<code>mapDispatchToProps</code>。它们定义了 <code>UI</code> 组件的业务逻辑。前者负责输入逻辑，即将<code>state</code>映射到 <code>UI</code> 组件的参数（<code>props</code>），后者负责输出逻辑，即将用户对 <code>UI</code> 组件的操作映射成 <code>Action</code></p></blockquote><h3 id="11-4、mapStateToProps"><a href="#11-4、mapStateToProps" class="headerlink" title="11.4、mapStateToProps()"></a>11.4、mapStateToProps()</h3><blockquote><p><code>mapStateToProps</code>是一个函数。它的作用就是像它的名字那样，建立一个从（外部的）<code>state</code>对象到（<code>UI</code> 组件的）<code>props</code>对象的映射关系</p></blockquote><ul><li>作为函数，<code>mapStateToProps</code>执行后应该返回一个对象，里面的每一个键值对就是一个映射</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>mapStateToProps</code>是一个函数，它接受<code>state</code>作为参数，返回一个对象</li><li>这个对象有一个<code>todos</code>属性，代表 <code>UI</code> 组件的同名参数，后面的<code>getVisibleTodos</code>也是一个函数，可以从<code>state</code>算出 <code>todos</code> 的值</li></ul><blockquote><p>下面就是<code>getVisibleTodos</code>的一个例子，用来算出<code>todos</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (filter) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unknown filter: '</span> + filter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mapStateToProps</code>会订阅 <code>Store</code>，每当<code>state</code>更新的时候，就会自动执行，重新计算 <code>UI</code> 组件的参数，从而触发 <code>UI</code> 组件的重新渲染</li><li><code>mapStateToProps</code>的第一个参数总是<code>state</code>对象，还可以使用第二个参数，代表容器组件的<code>props</code>对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器组件的代码</span></span><br><span class="line"><span class="comment">//    &lt;FilterLink filter="SHOW_ALL"&gt;</span></span><br><span class="line"><span class="comment">//      All</span></span><br><span class="line"><span class="comment">//    &lt;/FilterLink&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    active: ownProps.filter === state.visibilityFilter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>ownProps</code>作为参数后，如果容器组件的参数发生变化，也会引发 <code>UI</code> 组件重新渲染</p></blockquote><ul><li><code>connect</code>方法可以省略<code>mapStateToProps</code>参数，那样的话，<code>UI</code> 组件就不会订阅<code>Store</code>，就是说 <code>Store</code> 的更新不会引起 <code>UI</code> 组件的更新</li></ul><h3 id="11-5、mapDispatchToProps"><a href="#11-5、mapDispatchToProps" class="headerlink" title="11.5、mapDispatchToProps()"></a>11.5、mapDispatchToProps()</h3><blockquote><p><code>mapDispatchToProps</code>是<code>connect</code>函数的第二个参数，用来建立 <code>UI</code> 组件的参数到<code>store.dispatch</code>方法的映射</p></blockquote><ul><li>也就是说，它定义了哪些用户的操作应该当作 <code>Action</code>，传给 <code>Store</code>。它可以是一个函数，也可以是一个对象</li><li>如果<code>mapDispatchToProps</code>是一个函数，会得到<code>dispatch</code>和<code>ownProps</code>（容器组件的<code>props</code>对象）两个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = (</span><br><span class="line">  dispatch,</span><br><span class="line">  ownProps</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">        filter: ownProps.filter</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从上面代码可以看到，<code>mapDispatchToProps</code>作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了 <code>UI</code> 组件的参数怎样发出 <code>Action</code></li><li>如果<code>mapDispatchToProps</code>是一个对象，它的每个键名也是对应 <code>UI</code> 组件的同名参数，键值应该是一个函数，会被当作 <code>Action creator</code> ，返回的 <code>Action</code> 会由 <code>Redux</code> 自动发出。举例来说，上面的<code>mapDispatchToProps</code>写成对象就是下面这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  onClick: <span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    type: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">    filter: filter</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6、-组件"><a href="#11-6、-组件" class="headerlink" title="11.6、 组件"></a>11.6、<provider> 组件</provider></h3><blockquote><p><code>connect</code>方法生成容器组件以后，需要让容器组件拿到<code>state</code>对象，才能生成 <code>UI</code> 组件的参数</p></blockquote><blockquote><p>一种解决方法是将<code>state</code>对象作为参数，传入容器组件。但是，这样做比较麻烦，尤其是容器组件可能在很深的层级，一级级将<code>state</code>传下去就很麻烦。</p></blockquote><ul><li><code>React-Redux</code> 提供<code>Provider</code>组件，可以让容器组件拿到<code>state</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><ul><li>上面代码中，<code>Provider</code>在根组件外面包了一层，这样一来，<code>App</code>的所有子组件就默认都可以拿到<code>state</code></li><li>它的原理是<code>React</code>组件的<code>context</code>属性</li></ul><h3 id="11-7、实例：计数器"><a href="#11-7、实例：计数器" class="headerlink" title="11.7、实例：计数器"></a>11.7、实例：计数器</h3><blockquote><p>我们来看一个实例。下面是一个计数器组件，它是一个纯的 <code>UI</code> 组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个 <code>UI</code> 组件有两个参数：<code>value</code>和<code>onIncreaseClick</code>。前者需要从<code>state</code>计算得到，后者需要向外发出 <code>Action</code></p></blockquote><ul><li>接着，定义<code>value</code>到<code>state</code>的映射，以及<code>onIncreaseClick</code>到<code>dispatch</code>的映射</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value: state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onIncreaseClick: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(increaseAction)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action Creator</span></span><br><span class="line"><span class="keyword">const</span> increaseAction = &#123; <span class="attr">type</span>: <span class="string">'increase'</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后，使用<code>connect</code>方法生成容器组件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const App = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Counter)</span><br></pre></td></tr></table></figure><blockquote><p>然后，定义这个组件的 <code>Reducer</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = state.count</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increase'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后，生成<code>store</code>对象，并使用<code>Provider</code>在根组件外面包一层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider, connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseClick&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Counter.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  value: PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">  onIncreaseClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Action</span></span><br><span class="line"><span class="regexp">const increaseAction = &#123; type: 'increase' &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Reducer</span></span><br><span class="line"><span class="regexp">function counter(state = &#123; count: 0 &#125;, action) &#123;</span></span><br><span class="line"><span class="regexp">  const count = state.count</span></span><br><span class="line"><span class="regexp">  switch (action.type) &#123;</span></span><br><span class="line"><span class="regexp">    case 'increase':</span></span><br><span class="line"><span class="regexp">      return &#123; count: count + 1 &#125;</span></span><br><span class="line"><span class="regexp">    default:</span></span><br><span class="line"><span class="regexp">      return state</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Store</span></span><br><span class="line"><span class="regexp">const store = createStore(counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux state to component props</span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    value: state.count</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Map Redux actions to component props</span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    onIncreaseClick: () =&gt; dispatch(increaseAction)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Connected Component</span></span><br><span class="line"><span class="regexp">const App = connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  mapDispatchToProps</span></span><br><span class="line"><span class="regexp">)(Counter)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;App /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h2 id="十二、思维导图总结"><a href="#十二、思维导图总结" class="headerlink" title="十二、思维导图总结"></a>十二、思维导图总结</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d20b7699e8d0624c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、npm的配置&quot;&gt;&lt;a href=&quot;#一、npm的配置&quot; class=&quot;headerlink&quot; title=&quot;一、npm的配置&quot;&gt;&lt;/a&gt;一、npm的配置&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用Fiddler做抓包分析</title>
    <link href="http://yoursite.com/2017/11/04/%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2017/11/04/抓包/</id>
    <published>2017-11-04T06:09:43.000Z</published>
    <updated>2018-03-29T15:14:57.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Fiddler简介"><a href="#一、Fiddler简介" class="headerlink" title="一、Fiddler简介"></a>一、Fiddler简介</h2><blockquote><p><code>Fiddler</code>是位于客户端和服务器端的<code>HTTP</code>代理，也是目前最常用的<code>http</code>抓包工具之一 。 它能够记录客户端和服务器之间的所有 <code>HTTP</code>请求，可以针对特定的<code>HTTP</code>请求，分析请求数据、设置断点、调试<code>web</code>应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是<code>web</code>调试的利器</p></blockquote><ul><li>客户端的所有请求都要先经过<code>Fiddler</code>，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过<code>Fiddler</code>然后发送到客户端</li><li>使用了<code>Fiddler</code>之后，web客户端和服务器的请求如下所示</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-a3626e30ed1a3352?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><img src="http://upload-images.jianshu.io/upload_images/1480597-1efcd89c578faeda?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>主界面中主要包括四个常用的块</strong></p><ul><li><code>Fiddler</code>的菜单栏，上图绿色部分。包括捕获<code>http</code>请求，停止捕获请求，保存<code>http</code>请求，载入本地<code>session</code>、设置捕获规则等功能。</li><li><code>Fiddler</code>的工具栏,上图红色部分。包括<code>Fiddler</code>针对当前<code>view</code>的操作（暂停，清除<code>session</code>,<code>decode</code>模式、清除缓存等）。</li><li><code>web Session</code>面板，上图黄色区域，主要是<code>Fiddler</code>抓取到的每条<code>http</code>请求（每一条称为一个<code>session</code>）,主要包含了请求的<code>url</code>，协议，状态码，<code>body</code>等信息，详细的字段含义如下图所示</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-742c4cf318b6ef40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="二、HTTP请求图标说明"><a href="#二、HTTP请求图标说明" class="headerlink" title="二、HTTP请求图标说明"></a>二、HTTP请求图标说明</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d5cc377e14bcd3a4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-60a3d9069289be30?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="三、Statistic"><a href="#三、Statistic" class="headerlink" title="三、Statistic"></a>三、Statistic</h2><blockquote><p>关于HTTP请求的性能和其他数据分析</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-634e34d101a4a3da?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>我们可以从中看出一些基本性能数据：如DNS解析的时间消耗是<code>8ms</code>,建立<code>TCP/IP</code>连接的时间消耗是<code>8ms</code>等等信息</p></blockquote><h2 id="四、Inspectors"><a href="#四、Inspectors" class="headerlink" title="四、Inspectors"></a>四、Inspectors</h2><blockquote><p>分为上下两个部分，上半部分是请求头部分，下半部分是响应头部分。对于每一部分，提供了多种不同格式查看每个请求和响应的内容。</p></blockquote><ul><li>JPG 格式使用 ImageView 就可以看到图片</li><li>HTML/JS/CSS 使用 TextView可以看到响应的内容。</li><li>Raw标签可以查看原始的符合HTTP标准的请求和响应头。</li><li>Auth则可以查看授权Proxy-Authorization 和 Authorization的相关信息。</li><li>Cookies标签可以看到请求的cookie和响应的set-cookie头信息</li></ul><h2 id="五、Composer"><a href="#五、Composer" class="headerlink" title="五、Composer"></a>五、Composer</h2><blockquote><p>老版本的<code>fiddler</code>中叫<code>request-builder</code>.顾名思义，可以构建相应的请求，有两种常用的方式构建请求</p></blockquote><ul><li><code>Parsed 输入请求的url之后</code>executed<code>即可，也可以修改相应的头信息（如添加常用的</code>accept<code>,</code>host<code>,</code>referrer<code>,</code>cookie<code>，</code>cache-control<code>等头部）后</code>execute`.</li><li><code>Raw</code>。使用HTTP头部信息构建<code>http</code>请求。与上类似</li></ul><h2 id="六、fiddler过滤会话"><a href="#六、fiddler过滤会话" class="headerlink" title="六、fiddler过滤会话"></a>六、fiddler过滤会话</h2><blockquote><p>问题：每次使用<code>Fiddler</code>,<br>打开一个网站，都能在<code>Fiddler</code>中看到几十个会话，看得眼花缭乱。</p></blockquote><ul><li>期望：只想抓取自己想要的请求</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-323fc05889d1cd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="七、Response乱码时的处理方法"><a href="#七、Response乱码时的处理方法" class="headerlink" title="七、Response乱码时的处理方法"></a>七、Response乱码时的处理方法</h2><blockquote><p>问题：有时候我们看到<code>Response</code>中的<code>HTML</code>是乱码的， 这是因为<code>HTML</code>被压缩了， 我们可以通过两种方法去解压缩</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d93275c7db4cc8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>方法二：选中工具栏中的”Decode”。  这样会自动解压缩</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-197294a2aeeef8cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="八、反向代理-AutoResponder"><a href="#八、反向代理-AutoResponder" class="headerlink" title="八、反向代理-AutoResponder"></a>八、反向代理-AutoResponder</h2><blockquote><p>原理：利用<code>fiddler</code>作為反向代理。意思就是将外界的<code>request</code>请求端口修改掉！ 改写返回数据，最实用的功能</p></blockquote><ul><li>用浏览器随意输入一个网址，如<code>http://www.baidu.com/</code></li><li>选中序号<code>16</code>记录，右击-勾选<code>“Unlock fo Editing”</code>,选择<code>Fiddler</code>右侧<code>reponse</code>块下的<code>TextView</code>，这里修改<code>title</code>,如图：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-4b59b0685ce8fb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>选择<code>Fiddler</code>右侧<code>reponse</code>块下的<code>TextView</code>，这里修改<code>title</code>,如图：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-dd602c351d962a8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>去掉<code>“Unlock for Editing”</code>，再选择右侧上方的<code>AutoResponder</code>,勾选下方的<code>checkbox</code>选框，并将序号<code>16</code>托到下方，同时，里面会多条记录，如下图：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-5c71df63b8ee6db7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>回到浏览器，刷新页面，如图，标题变为上面改的内容</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d154a2cbeb2a63f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="九、fiddler提供了一个功能，让我们模拟低速网路环境"><a href="#九、fiddler提供了一个功能，让我们模拟低速网路环境" class="headerlink" title="九、fiddler提供了一个功能，让我们模拟低速网路环境"></a>九、fiddler提供了一个功能，让我们模拟低速网路环境</h2><blockquote><p>启用方法如：Rules → Performances → Simulate Modem Speeds</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d154a2cbeb2a63f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="十、直接在fiddler上配置host"><a href="#十、直接在fiddler上配置host" class="headerlink" title="十、直接在fiddler上配置host"></a>十、直接在fiddler上配置host</h2><blockquote><p>点击<code>tools&gt;&gt;hosts</code>,在里面填写自己想要设置的<code>host</code>即可</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5bd1f6d694bb03ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="十一、Fiddler显示请求服务器的ip及系统环境的配置方法"><a href="#十一、Fiddler显示请求服务器的ip及系统环境的配置方法" class="headerlink" title="十一、Fiddler显示请求服务器的ip及系统环境的配置方法"></a>十一、Fiddler显示请求服务器的ip及系统环境的配置方法</h2><ul><li>打开<code>Rules——&gt;Customize  Rules</code></li><li>找到如下这段代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> today: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">FiddlerObject.StatusText = <span class="string">" CustomRules.js was loaded at: "</span> + today;</span><br><span class="line"><span class="comment">// Uncomment to add a "Server" column containing the response "Server" header, if present</span></span><br><span class="line"></span><br><span class="line">在这一行后面添加如下代码：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示服务器web环境</span></span><br><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"Server"</span>, <span class="number">50</span>, <span class="string">"@response.server"</span>);</span><br><span class="line"><span class="comment">// 显示服务器IP地址</span></span><br><span class="line">FiddlerObject.UI.lvSessions.AddBoundColumn(<span class="string">"HostIP"</span>, <span class="number">50</span>, <span class="string">"x-hostIP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置后重启<code>fiddler</code>，效果如下</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d14e6280553bda0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-d14e6280553bda0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="十二、fiddler断点调试"><a href="#十二、fiddler断点调试" class="headerlink" title="十二、fiddler断点调试"></a>十二、fiddler断点调试</h2><blockquote><p>第一种方法：菜单栏 <code>Rules</code> –》 <code>Automatic Breakpoints</code> –》 <code>Before Requests</code>(请求被发送到服务器端之前)；或者 <code>After Responses</code>(响应返回客户端之前)，这种设置对客户机发出的所有请求都进行拦截</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-f4e00f335a41e115.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-de8617c36d47d914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="十三、配合SwitchySharp插件使用"><a href="#十三、配合SwitchySharp插件使用" class="headerlink" title="十三、配合SwitchySharp插件使用"></a>十三、配合SwitchySharp插件使用</h2><blockquote><p>为<code>fiddler</code>创建一个规则，代理到本地的<code>8888</code>端口（<code>fiddler</code>所用的端口）<br><code>google</code>设置代理的方法：下载<code>SwitchySharp</code>插件，设置如下：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-a5861df2f7177513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>接着点击保存即可~ 这样在需要的时候可以切换到<code>Fiddler</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1480597-830e8d71a794a16c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Fiddler简介&quot;&gt;&lt;a href=&quot;#一、Fiddler简介&quot; class=&quot;headerlink&quot; title=&quot;一、Fiddler简介&quot;&gt;&lt;/a&gt;一、Fiddler简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Fiddler&lt;/code&gt;是
      
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="调试" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Fiddler" scheme="http://yoursite.com/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序一些常用方法</title>
    <link href="http://yoursite.com/2017/09/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/09/30/微信小程序方法/</id>
    <published>2017-09-30T03:16:12.000Z</published>
    <updated>2018-03-29T10:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><hr><blockquote><p>最近一个月都在写小程序，有用到一些封装方法和深坑记录一下</p></blockquote><p>1.微信小程序路由跳转<code>navigateTo</code>封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const parse = (query) =&gt; &#123;</span><br><span class="line">  return Object.keys(query).map(key =&gt; `$&#123;key&#125;=$&#123;query[key]&#125;`).join(&apos;&amp;&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  go(url, query = &#123;&#125;) &#123;</span><br><span class="line">    console.log(url)</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      wx.navigateTo(&#123;</span><br><span class="line">        url: `$&#123;url&#125;?$&#123;parse(query)&#125;`,</span><br><span class="line">        success: resolve,</span><br><span class="line">        fail: reject</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  replace(url, query = &#123;&#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      wx.redirectTo(&#123;</span><br><span class="line">        url: `$&#123;url&#125;?$&#123;parse(query)&#125;`,</span><br><span class="line">        success: resolve,</span><br><span class="line">        fail: reject</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  back(delta) &#123;</span><br><span class="line">    wx.navigateBack(&#123; delta &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>promise</code>封装<code>request</code>请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">var Promise = require(&apos;../plugins/es6-promise.js&apos;)</span><br><span class="line"></span><br><span class="line">function wxPromisify(fn) &#123;</span><br><span class="line">  return function (obj = &#123;&#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      obj.success = function (res) &#123;</span><br><span class="line">        //成功</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">      obj.fail = function (res) &#123;</span><br><span class="line">        //失败</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;</span><br><span class="line">      fn(obj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//无论promise对象最后状态如何都会执行</span><br><span class="line">Promise.prototype.finally = function (callback) &#123;</span><br><span class="line">  let P = this.constructor;</span><br><span class="line">  return this.then(</span><br><span class="line">    value =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class="line">    reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * 微信请求get方法</span><br><span class="line"> * url</span><br><span class="line"> * data 以对象的格式传入</span><br><span class="line"> */</span><br><span class="line">function getRequest(url, data) &#123;</span><br><span class="line">  var getRequest = wxPromisify(wx.request)</span><br><span class="line">  return getRequest(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    method: &apos;GET&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    header: &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;application/json&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 微信请求post方法封装</span><br><span class="line"> * url</span><br><span class="line"> * data 以对象的格式传入</span><br><span class="line"> */</span><br><span class="line">function postRequest(url, data) &#123;</span><br><span class="line">  var postRequest = wxPromisify(wx.request)</span><br><span class="line">  return postRequest(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    method: &apos;POST&apos;,</span><br><span class="line">    data: data,</span><br><span class="line">    header: &#123;</span><br><span class="line">      &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  postRequest: postRequest,</span><br><span class="line">  getRequest: getRequest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小程序不支持<code>promise</code>所以先引入<code>promise</code>库才行<br>3.<code>promise</code>封装<code>storage</code>请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">var Promise = require(&apos;../plugins/es6-promise.js&apos;)</span><br><span class="line"></span><br><span class="line">function wxPromisify(fn) &#123;</span><br><span class="line">  return function (obj = &#123;&#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      obj.success = function (res) &#123;</span><br><span class="line">        //成功</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">      obj.fail = function (res) &#123;</span><br><span class="line">        //失败</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;</span><br><span class="line">      fn(obj)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//无论promise对象最后状态如何都会执行</span><br><span class="line">Promise.prototype.finally = function (callback) &#123;</span><br><span class="line">  let P = this.constructor;</span><br><span class="line">  return this.then(</span><br><span class="line">    value =&gt; P.resolve(callback()).then(() =&gt; value),</span><br><span class="line">    reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">//异步设置storage</span><br><span class="line">function setStorage(keys, value) &#123;</span><br><span class="line">  wx.setStorage(&#123;</span><br><span class="line">    key: keys,</span><br><span class="line">    data: value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//同步设置storage</span><br><span class="line">function setStorageSync(keys, value) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    wx.setStorageSync(kes, value)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//异步获取stotage</span><br><span class="line">function getStorage(keys) &#123;</span><br><span class="line">  let getStorage = wxPromisify(wx.getStorage)</span><br><span class="line">  return getStorage(&#123;</span><br><span class="line">    key: keys</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//同步获取storage</span><br><span class="line">function getStorageSync(keys) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var value = wx.getStorageSync(keys)</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      // Do something with return value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // Do something when catch error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//移除指定key storage</span><br><span class="line">function removeStorage(obj) &#123;</span><br><span class="line">  let removeStorage = wxPromisify(wx.removeStorage);</span><br><span class="line">  return removeStorage(&#123;</span><br><span class="line">    key: obj</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  setStorage,</span><br><span class="line">  setStorageSync,</span><br><span class="line">  getStorage,</span><br><span class="line">  getStorageSync,</span><br><span class="line">  removeStorage,</span><br><span class="line">  clearStorageSync: wx.clearStorageSync(),</span><br><span class="line">  clearStorage: wx.clearStorage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目中还遇到html转wxml用wxParse解决<a href="https://github.com/icindy/wxParse；" target="_blank" rel="noopener">https://github.com/icindy/wxParse；</a></li><li>微信小程序启动时，调用生命周期方法为：<code>onLaunch</code>方法<code>（app.js）</code>—<code>onShow</code>方法<code>（app.js）---onLoad</code>方法（首页面：<code>index.js</code>的<code>onLoad</code>方法）；所以如果在<code>app.js</code>里面去获取用户信息操作<code>token</code>，在<code>index</code>页面使用会出现异步还没获取到数据就执行,一般情况用<code>promise</code>就可以直接解决问题，稍微麻烦的一般使用<code>settimeout</code>去解决。</li><li>项目中还用上了<code>socket</code>实时更新数据，比较坑的地方就是小程序的<code>socket</code>只能连接60秒就断，可以让用户上拉刷新，试了定时器方法，但是由于会频繁的去操作<code>setData</code>考虑到性能问题并没有使用.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h4&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;最近一个月都在写小程序，有用到一些封装方法和深坑记录一下&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Wechat" scheme="http://yoursite.com/categories/Wechat/"/>
    
    
      <category term="Wechat" scheme="http://yoursite.com/tags/Wechat/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router整理</title>
    <link href="http://yoursite.com/2017/09/12/vue-router%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/09/12/vue-router总结/</id>
    <published>2017-09-12T14:24:08.000Z</published>
    <updated>2018-03-29T10:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>##VUE-ROUTER API文档</p><hr><p><br></p><h3 id="一-lt-router-link-gt"><a href="#一-lt-router-link-gt" class="headerlink" title="一.&lt;router-link&gt;"></a>一.<code>&lt;router-link&gt;</code></h3><p>1.<code>Props</code></p><ul><li><code>to</code><ul><li>类型:<code>string</code> | <code>Location</code></li><li><code>required</code><br>表示目标路由的链接。当被点击后，内部会立刻把<code>to</code>的值传到<code>router.push()</code>，所以这个值是可以一个字符串或者是描述目标位置的对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字符串 --&gt;</span><br><span class="line"> &lt;router-link to=&quot;home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"> &lt;!-- 渲染结果 --&gt;</span><br><span class="line"> &lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span><br><span class="line"> &lt;router-link v-bind:to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 同上 --&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&#123; path: &apos;home&apos; &#125;&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 命名的路由 --&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span><br><span class="line"> &lt;router-link :to=&quot;&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;&quot;&gt;Register&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><code>to</code>可以是字符串或者表达式，动态设置需要加上<code>v-bind</code>或：  <code>path</code>路径 <code>params</code>传参 <code>query</code>问号后面的值。</p><ul><li><code>replace</code></li><li>类型:<code>boolean</code></li><li>默认值:<code>false</code><br>设置了<code>replace</code>的属性话，当点击时，会调用<code>router.replace()</code>而不是<code>router.push()</code><br>于是导航不会留下<code>history</code>记录。<br><code>&lt;router-link :to=&quot;{path: &#39;/home&#39;} replace&gt;&lt;/router-link&gt;&quot;</code></li><li><code>append</code></li><li>类型:<code>boolean</code></li><li>默认值:<code>false</code><br>设置<code>append</code>属性后，则在当前(相对)路径前添加基路径。例如，我们从/a导航到一个相对路径<code>b</code>，如果没有配置<code>append</code>，则路径为<code>/b</code>,如果赔了，则为<code>/a/b</code><br><code>&lt;router-link :to=&quot;{path : &quot;relative/path&quot; append} &lt;/router-link&gt;&quot;</code></li><li><code>tag</code><ul><li>类型: <code>string</code></li><li>默认值: <code>&quot;a&quot;</code><br>有时候想要 <code>&lt;router-link&gt;</code> 渲染成某种标签，例如 <code>&lt;li&gt;</code>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/foo&quot; tag=&quot;li&quot;&gt;foo&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 渲染结果 --&gt;</span><br><span class="line">&lt;li&gt;foo&lt;/li&gt;</span><br></pre></td></tr></table></figure><ul><li><code>active-class</code></li><li>类型:<code>string</code></li><li>默认值:”<code>router-link-active</code>“<br>设置链接激活时使用的<code>css</code>类名。默认值可以通过路由的构造选项<code>linkActiveClass</code>来全局配置。</li><li><code>exact</code><ul><li>类型:<code>boolean</code></li><li>默认值:<code>false</code><br>“是否激活” 默认类名的依据是 <code>inclusive match</code> （全包含匹配）。 举个例子，如果当前的路径是 <code>/a</code> 开头的，那么 <code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 <code>CSS</code> 类名。</li></ul></li></ul><p>按照这个规则，<code>&lt;router-link to=&quot;/&quot;&gt;</code> 将会点亮各个路由！想要链接使用 “<code>exact</code> 匹配模式”，则使用 <code>exact</code> 属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这个链接只会在地址为 / 的时候被激活 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/&quot; exact&gt;</span><br></pre></td></tr></table></figure><ul><li>events<ul><li>类型: string | Array<string></string></li><li>默认值: ‘click’<br>声明可以用来触发导航的时间。可以是一个字符串或是一个包含字符串的数组</li></ul></li></ul><h4 id="将”激活时的CSS类名”应用在外层元素"><a href="#将”激活时的CSS类名”应用在外层元素" class="headerlink" title="将”激活时的CSS类名”应用在外层元素"></a><strong>将”激活时的CSS类名”应用在外层元素</strong></h4><p>有时候我们要让 “激活时的CSS类名” 应用在外层元素，而不是 <code>&lt;a&gt;</code> 标签本身，那么可以用 <code>&lt;router-link&gt;</code> 渲染外层元素，包裹着内层的原生 <code>&lt;a&gt;</code> 标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link tag=&quot;li&quot; to=&quot;/foo&quot;&gt;</span><br><span class="line">  &lt;a&gt;/foo&lt;/a&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>在这种情况下，<code>&lt;a&gt;</code> 将作为真实的链接（它会获得正确的 <code>href</code> 的），而 “激活时的CSS类名” 则设置到外层的<br><br><br><br></p><hr><h3 id="二-lt-router-view-gt"><a href="#二-lt-router-view-gt" class="headerlink" title="二.&lt;router-view&gt;"></a>二.<code>&lt;router-view&gt;</code></h3><p><code>&lt;router-view&gt;</code>组件是一个functional组件，渲染路径匹配到的视图组件。<code>&lt;router-view&gt;</code>渲染的组件还可以内嵌自己的<code>&lt;router-view&gt;</code>，根据嵌套的路径，渲染嵌套组件。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>name <ul><li>类型:string</li><li>默认值:”default”<br>如果<code>&lt;router-view&gt;</code>设置了名称，则会渲染对应的路由配置中comonents下的相应组件。查看命名视图中的列子。<h4 id="行为表现"><a href="#行为表现" class="headerlink" title="行为表现"></a>行为表现</h4>其他属性（非router-view使用的属性）都直接传给渲染的组件，很多时候，每个路由的数据都是包含在路由的参数中。<br>因为它也是一个组件，可以配合<code>&lt;transtion&gt;</code>和<code>&lt;keep-alive&gt;</code>使用，如果两者结合使用一定要保证在内层使用<code>&lt;keep-alive&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><br><br><br></p><hr><h3 id="三-路由信息对象"><a href="#三-路由信息对象" class="headerlink" title="三.路由信息对象"></a>三.路由信息对象</h3><p>一个route object（路由信息对象）表示当前激活的路由的状态信息，包含了当前的url解析得到的信息，还有url匹配到的route record （路由记录）</p><p>  route object是immutable（不可变）的，每次成功的导航后都会产生一个新的对象。</p><p>  route object出现在多个地方：</p><ul><li>组件内的<code>this.$route</code>和<code>$route watcher</code>回调（监测变化处理）；</li><li><code>router.match(location)</code>的返回值</li><li>导航钩子的参数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line">//ro 和 from 都是路由信息对象</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="路由信息对象的属性"><a href="#路由信息对象的属性" class="headerlink" title="路由信息对象的属性"></a>路由信息对象的属性</h3><ul><li>$route.path<ul><li>类型:string<br>  字符串，对应当前的路径，总是解析为绝对路径，如<code>&quot;/foo/bar&quot;</code>。</li></ul></li><li>$route.params<ul><li>类型:Object<br>一个key/value对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。</li></ul></li><li>$route.query<ul><li>类型：Object<br>一个key/value对象，表示URL查询参数。例如，对于路径/foo?user=1,则有<code>$route.query.user=1</code>,如果没有查询参数，则是一个空对象。</li></ul></li><li>$route.hash<ul><li>类型:string<br>当前路由的hash值（带#），如果没有hash值，则为空字符串。</li></ul></li><li>$route.fullPath<ul><li>类型:string<br>完成解析后的URL，包含查询参数和hash的完整路径。</li></ul></li><li>$route.matched<ul><li>类型:<code>Array&lt;RouteRecord&gt;</code><br>一个数组，包含当前路由的所有嵌套路径片段的路由记录。路由记录就是routes配置数组中的对象副本（还有在children数组）。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    // 下面的对象就是 route record</span><br><span class="line">    &#123; path: &apos;/foo&apos;, component: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        // 这也是个 route record</span><br><span class="line">        &#123; path: &apos;bar&apos;, component: Bar &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 URL 为 /foo/bar，<code>$route.matched</code> 将会是一个包含从上到下的所有对象（副本）。</p><ul><li>$route.name</li></ul><p>当前路由的名称，如果有的话。（查看 命名路由）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://otue68nu2.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170919105103.png" alt="enter image description here" title="">                </div>                <div class="image-caption">enter image description here</div>            </figure><br><br><br><br></p><hr><h3 id="四-Router构造配置"><a href="#四-Router构造配置" class="headerlink" title="四.Router构造配置"></a>四.Router构造配置</h3><p><strong>routes</strong></p><ul><li>类型<code>Array&lt;RouteConfig&gt;</code><br>  RouteConfig的类型定义：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare type RouteConfig = &#123;</span><br><span class="line">  path: string;//路径</span><br><span class="line">  component?: Component;//组件</span><br><span class="line">  name?: string; // for named routes (命名路由)</span><br><span class="line">  components?: &#123; [name: string]: Component &#125;; // for named views (命名视图组件)</span><br><span class="line">  redirect?: string | Location | Function;//重定向</span><br><span class="line">  alias?: string | Array&lt;string&gt;;//别名</span><br><span class="line">  children?: Array&lt;RouteConfig&gt;; // for nested routes</span><br><span class="line">  beforeEnter?: (to: Route, from: Route, next: Function) =&gt; void;//全局route注册之前的钩子</span><br><span class="line">  meta?: any;//路由配置元信息meta字段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>mode</strong></p><ul><li>类型:<code>string</code></li><li>默认值:<code>&quot;hash‘(浏览器环境) | &quot;abstract&quot;(Node.js环境)</code></li><li>可选值:<code>&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;</code><br>  配置路由模式：<ul><li>hash:使用URL hash值来做路由，支持所有浏览器，包括不支持HTML5 History Api的浏览器</li><li>history:依赖HTML5 History API和服务器配置，查看<a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="noopener">HTML5 History模式 </a></li><li>abstract:支持所有JavaScript运行环境，如Node.js服务器端。如果发现没有浏览器的API,路由会自动强制进入这个模式<br><strong>base</strong></li></ul></li><li>类型:string</li><li>默认值:”/“<br>应用的基路径。例如，如果整个单页面应用服务在<code>/app/</code>下，然后base就应该设为<code>&quot;/app/&quot;</code>。<br><strong>linkActiveClass</strong></li><li>类型:string</li><li>默认值:”router-link-active”<br>全局配置<router-link>的默认[激活cass类名]。参考router-link<br><strong>scrollBehavior</strong></router-link></li><li>类型:function<br>  签名：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">  to: Route,</span><br><span class="line">  from: Route,</span><br><span class="line">  savedPosition?: &#123; x: number, y: number &#125;</span><br><span class="line">) =&gt; &#123; x: number, y: number &#125; | &#123; selector: string &#125; | ?&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>更多详情参考<a href="https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html" target="_blank" rel="noopener"> 滚动行为</a>.<br><br><br><br></p><hr><h3 id="五-Router实例"><a href="#五-Router实例" class="headerlink" title="五.Router实例"></a>五.Router实例</h3><p><strong>属性</strong><br>router.app</p><ul><li>类型:Vue instace<br>  配置了router的Vue根实例。</li></ul><p>route.mode</p><ul><li>类型:string<br>  路由使用的<a href="https://router.vuejs.org/zh-cn/api/options.html#mode" target="_blank" rel="noopener">模式</a>。 </li></ul><p>router.currentRoute</p><ul><li>类型:Route<br>当前路由对应的路由信息对象<a href="https://router.vuejs.org/zh-cn/api/route-object.html" target="_blank" rel="noopener">信息对象</a><br><strong>方法</strong></li><li>router.beforeEach(guard)路由加载之前</li><li>router.befireResolve(guard)此时异步组件已加载完成</li><li>router.afterEach(hood)<br>  增加全局的导航钩子</li><li>router.push(location,ONccomplete?,onAbort?)</li><li>router.replace(location,ONccomplete?,onAbort?)</li><li>router.go(n)</li><li>router.back()</li><li>router.forward()<br>动态的导航到一个新 url。</li><li>router.getMatchedComponents(location?)</li></ul><p>返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</p><ul><li>router.resolve(location, current?, append?)<br>解析目标位置，返回包含如下属性的对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  location: Location;</span><br><span class="line">  route: Route;</span><br><span class="line">  href: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>router.addRoutes(routes)</li></ul><p>动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组。</p><ul><li>router.onReady(callback)</li></ul><p>添加一个会在第一次路由跳转完成时被调用的回调函数。此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##VUE-ROUTER API文档&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-lt-router-link-gt&quot;&gt;&lt;a href=&quot;#一-lt-router-link-gt&quot; class=&quot;headerlink&quot; title=&quot;一.&amp;lt;route
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
</feed>
